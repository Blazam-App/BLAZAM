@using BLAZAM.Server.Data;
@using BLAZAM.Server.Shared.UI.Outputs
@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@inject IDbContextFactory<DatabaseContext> dbFactory
@inject IActiveDirectory directory
<Card>
    <CardHeader>
      Active Directory Connection Status
    </CardHeader>
    <CardBody>
        <Row>
            <Column>
                Server Online
            </Column>
            <Column>
                <StatusCheck Status="_serverStatus" />

            </Column>
        </Row>
        <Row>
            <Column>
                Server Port Open
            </Column>
            <Column>
                <StatusCheck Status="_portStatus" />


            </Column>
        </Row>
        <Row>
            <Column>
                Credentials OK
            </Column>
            <Column>
                <StatusCheck Status="_credStatus"/>
            </Column>
        </Row>
    </CardBody>
    <Progress Value="100" Animated Striped Visibility=@showProgress/>
</Card>
@{


}
@code {

    [Parameter]
    public EventCallback DirectoryConnected{ get; set; }


    bool _serverStatus;
    bool _portStatus;
    bool _credStatus;
    Blazorise.Visibility showProgress = Visibility.Visible;
    DatabaseContext _context;
    Timer t;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Timer t = new Timer(UpdateStatus, null, 0, 1000);
        //Monitor.OnDirectoryConnectionChanged += ((state) => { UpdateStatus(state); });
        //UpdateStatus(null);
    }




    private async void UpdateStatus(object? state)
    {
        if (directory.Status== DirectoryConnectionStatus.Connecting)
        {
            showProgress = Visibility.Default;
            await InvokeAsync(StateHasChanged);

        }
        if (directory.Pingable)
        {
            _serverStatus = true;
            if (directory.PortOpen)
            {
                _portStatus = true;
                if (directory.Status == DirectoryConnectionStatus.OK)
                {
                    _credStatus = true;

                }
                else
                {
                    _credStatus = false;
                }
            }
            else
            {
                _portStatus = false;
            }
        }
        else
        {
            _serverStatus = false;
        }
        if (directory.Status == DirectoryConnectionStatus.Connecting)
        {
            showProgress = Visibility.Default;

        }
        else
        {

            showProgress = Visibility.Invisible;
        }

        await InvokeAsync(StateHasChanged);
    }

    private Task StatusChanged()
    {
        DirectoryConnected.InvokeAsync();
        return null;
    }
}
