@using BLAZAM.Server.Pages;
@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@inject IDbContextFactory<DatabaseContext> DbFactory
@inherits ValidatedForm


<LoadingIndicator Height="Height.Is100" Visible=LoadingData>

    <Validations Mode="ValidationMode.Auto" Model="@settings" StatusChanged="OnValidation">
       
        <Row Margin=Margin.Is3>
            <Validation>
                <Field Horizontal ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldLabel ColumnSize="ColumnSize.Is6.OnDesktop">@SettingsLocalization["Allow Auto Update"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is6">
                        <Switch TValue="bool" @bind-Checked="@settings.AutoUpdate" />
                    </FieldBody>
                </Field>

            </Validation>

           


        </Row>
        @if (settings.AutoUpdate)
        {
            <Row Margin=Margin.Is3>
                <Field Horizontal ColumnSize="ColumnSize.Is6.OnDesktop" hidden="@(!settings.AutoUpdate)">
                    <FieldLabel>@SettingsLocalization["Auto Update Time"]</FieldLabel>
                    <FieldHelp>The time of each day to automatically apply an update.</FieldHelp>
                    <FieldBody>
                        <TimePicker TValue="TimeSpan" @bind-Time="@settings.AutoUpdateTime">

                        </TimePicker>
                    </FieldBody>
                </Field>
            </Row>
        }
       
        
        <Row Margin=Margin.Is3>
            <Field Horizontal>

                <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">
                    @SettingsLocalization["Update"]
                </FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">

                    <ManualApplicationUpdater />

                </FieldBody>
            </Field>

        </Row>


        <Row Margin=Margin.Is3>
            <Button Disabled="saveDisabled" @onclick="Save" Color="Color.Success">Save Changes</Button>
        </Row>
    </Validations>
</LoadingIndicator>
@code {
    AppSettings settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        Task.Run(() =>
        {
            settings = Context.AppSettings.FirstOrDefault();
            LoadingData = false;
            InvokeAsync(StateHasChanged);
        });
    }


    private async void LoadIcon(FileUploadEventArgs e)
    {
        //TODO Try and capture the moment the file upload starts
        using (var stream = e.File.OpenReadStream(5000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                settings.AppIcon = memoryStream.ToArray();
            }
        }
        await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);


    }



}
