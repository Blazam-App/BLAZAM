@inherits AppComponent
<LoadingIndicator Visible=LoadingData>
        @if (RootOU != null && RootOU.Any())
        {
            @*  <TreeView Nodes="RootOU"
        AutoExpandAll
        GetChildNodes="@(item => item.Children)"
        HasChildNodes="@(item => item.Children?.Any() == true)"
        ExpandedNodes="ExpandedNodes">
        <NodeContent>
        <Icon Name="IconName.Folder" />
        @context.CanonicalName
        </NodeContent>
        </TreeView>*@

            <TreeView Nodes=RootOU
                  TNode=IADOrganizationalUnit
                  GetChildNodes="@(item => item.Children.Where(c=>c.CanRead||
                       (StartingSelectedOU!=null &&
                            (StartingSelectedOU.DN.Contains(c.DN) == true))))"
                  HasChildNodes="@(item => item.Children?.Any(c=>c.CanRead||
                        (StartingSelectedOU!=null &&
                            (StartingSelectedOU.DN.Contains(c.DN) == true))) == true)"
                  @bind-SelectedNode="SelectedOU"
                  @bind-ExpandedNodes="ExpandedNodes"
                  NodeContent="@NodeContent">


                >

            </TreeView>

        }

</LoadingIndicator>
@code {


    [Parameter]
    public bool StartRootExpanded { get; set; } = true;


    [Parameter]
    public RenderFragment<IADOrganizationalUnit>? NodeContent { get; set; }

    IADOrganizationalUnit? _selectedNode;

    [Parameter]
    public IEnumerable<IADOrganizationalUnit> RootOU { get; set; } = new List<IADOrganizationalUnit>();


    IADOrganizationalUnit? _startingSelectedNode;
    [Parameter]
    public IADOrganizationalUnit? StartingSelectedOU
    {
        get => _startingSelectedNode; set
        {
            if (value == _startingSelectedNode) return;
            _startingSelectedNode = value;
            _selectedNode = value;


            StartingSelectedOUChanged.InvokeAsync(value);
        }

    }

    [Parameter]
    public EventCallback<IADOrganizationalUnit> StartingSelectedOUChanged
    {
        get; set;
    }

    [Parameter]
    public IADOrganizationalUnit? SelectedOU
    {
        get => _selectedNode; set
        {
            if (value == _selectedNode) return;
            if (value!=null && value.CanRead)
            {
                _selectedNode = value;
                if (TopLevel==null)
                    OnInitializedAsync();
                OpenToSelected();
                SelectedOUChanged.InvokeAsync(value);
            }
        }

    }

    [Parameter]
    public EventCallback<IADOrganizationalUnit> SelectedOUChanged { get; set; }

    ADOrganizationalUnit TopLevel;


    TreeView<IADOrganizationalUnit>? OUTree { get; set; }


    IList<IADOrganizationalUnit> ExpandedNodes = new List<IADOrganizationalUnit>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //ApplicationBaseOUs = Directory.OUs.FindSubOusByDN(null);
        TopLevel = new ADOrganizationalUnit();
        await TopLevel.Parse(Directory.GetDirectoryEntry(), Directory);
        _ = TopLevel.Children;
        RootOU = new List<IADOrganizationalUnit>() { TopLevel };
        if (StartingSelectedOU == null)
        {
            SelectedOU = TopLevel;
        }
        else
            OpenToSelected();
        LoadingData = false;

        if (NodeContent == null)
            throw new ApplicationException("OU Tree was provided no NodeContent template");
        await InvokeAsync(StateHasChanged);


    }
    void OpenToSelected()
    {
        //ExpandedNodes.Clear();
        var newExpandedNodes = new List<IADOrganizationalUnit>(ExpandedNodes);
        if (StartRootExpanded)
            newExpandedNodes.Add(TopLevel);
        if (!SelectedOU.Equals(TopLevel))
        {
            IADOrganizationalUnit? openThis = TopLevel;
            do
            {
                openThis = openThis.Children.Where(c => SelectedOU.DN.Contains(c.DN) && !SelectedOU.DN.Equals(c.DN)).FirstOrDefault();
                if (openThis != null)
                    newExpandedNodes.Add(openThis);
            } while (openThis != null);
        }
        ExpandedNodes = newExpandedNodes;
        InvokeAsync(StateHasChanged);


    }






















}
