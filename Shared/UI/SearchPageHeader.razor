<Form @onsubmit="(()=>{OnSubmit.InvokeAsync();})">

    <Bar Mode="BarMode.Horizontal"
         CollapseMode="BarCollapseMode.Small"
         Breakpoint="Breakpoint.Desktop"
         NavigationBreakpoint="Breakpoint.Tablet"
         ThemeContrast="ThemeContrast.Dark"
         Padding="Padding.Is2.OnX"
         Background="Background.Dark"
         TextColor="TextColor.Light"
         VerticalAlignment="VerticalAlignment.Middle">
        <BarBrand Padding=Padding.Is0.OnY Width="Width.Is100">
            <Row Style="font-size:0.8em;">
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is2.OnFullHD.Is2.OnDesktop.Is3.OnTablet">
                    <Div TextOverflow="TextOverflow.Wrap">
                        @Text

                    </Div>

                </Column>
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is9.OnFullHD.Is8.OnDesktop.Is7.OnTablet">
                    @ChildContent

                </Column>
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is2.OnTablet">
                    @if (Searcher?.SearchState == SearchState.Collecting)
                    {
                        <Button Float="Float.End" Type="ButtonType.Button" Clicked=@(()=>{
                            disableCancel = true;
                            Searcher.Cancel();
                            }) Color="Color.Primary" Disabled=@disableCancel>
                            Cancel
                        </Button>

                    }
                    else
                    {
                        <Button Float="Float.End" Type="ButtonType.Submit" Color="Color.Primary">Search</Button>

                    }

                </Column>
            </Row>
        </BarBrand>
    </Bar>

</Form>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [CascadingParameter]
    public ADSearch Searcher { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set;}

    [Parameter]
    public string Text { get; set; }

    bool disableCancel = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Searcher.ResultsCollected += ((batch) => { InvokeAsync(StateHasChanged); });
        Searcher.OnSearchCompleted += (() =>
        {
            disableCancel = false;

            InvokeAsync(StateHasChanged);
        });
    }
}