@inherits AppComponentBase
<MudPopover Open=@IsOpen>
    <MudStack Row=true>
        <MudText>@Group.CanonicalName @AppLocalization["Members"]</MudText>
        <MudSpacer/>
        <AppCloseButton OnClick="Close"/>
    </MudStack>
    @if (Members != null)
{
    <MudDataGrid Elevation=0
                 Items="@Members.Where(m=>m.CanRead).OrderBy(m=>m.ObjectType).ThenBy(m=>m.CanonicalName)"
                 Filterable="false"
                 Dense=true
                 Loading=@LoadingData
                 Virtualize=true
                 Height="300px"
                 FixedHeader=true
                 SortMode="@SortMode.None"
                 Groupable="false">
        <Columns>
            <TemplateColumn Context="templateContext">
                <HeaderTemplate>
                    @AppLocalization["Type"]
                </HeaderTemplate>
                <CellTemplate Context="cellContext">
                    @{
                        var icon = Icons.Material.Filled.Person;
                        switch (cellContext.Item.ObjectType)
                        {
                            case ActiveDirectoryObjectType.Group:
                                icon = Icons.Material.Filled.People;
                                break;
                            case ActiveDirectoryObjectType.Computer:
                                icon = Icons.Material.Filled.Computer;
                                break;
                        }

                    }
                    <AppTooltip Text="@cellContext.Item.ObjectType.ToString()">
                        <MudIcon Icon="@icon" />
                    </AppTooltip>

                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Sortable=true Filterable=true Context="templateContext">
                <HeaderTemplate>
                    @AppLocalization["Name"]
                </HeaderTemplate>
                <CellTemplate Context="cellContext">
                    <MudLink OnClick="@(()=>{Nav.NavigateTo(cellContext.Item.SearchUri);})">
                        @cellContext.Item.CanonicalName
                    </MudLink>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Sortable=true Filterable=true Context="templateContext">
                <HeaderTemplate>
                    @AppLocalization["OU"]
                </HeaderTemplate>
                <CellTemplate Context="cellContext">
                    <MudText>
                        @cellContext.Item.OU.ToPrettyOu()
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Context="templateContext">
                <HeaderTemplate>
                    @AppLocalization["Remove Member"]
                </HeaderTemplate>
                <CellTemplate Context="cellContext">
                    <AppTooltip 
                                ShowOnClick=@(!cellContext.Item.CanUnassign)
                                ShowOnHover=@(!cellContext.Item.CanUnassign)
                                Text=@AppLocalization["You don't have permission to remove this group member"]>
                        <MudButton Disabled=@(!Group.CanUnassign)
                                   Color="Color.Error"
                                   OnClick="(()=>{Group.UnassignMember(cellContext.Item);InvokeAsync(OnInitializedAsync);})">
                            @AppLocalization["Remove"]
                        </MudButton>
                    </AppTooltip>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    if (Members.Where(m => !m.CanRead).Count() > 0)
    {
        <MudAlert Class="mud-alert-filled-info">
            @AppLocalization["The group has more members you don't have access to"]
        </MudAlert>
    }
}
else
{
    <MudOverlay Visible=true Absolute=true DarkBackground=false>
        <MudProgressCircular Indeterminate Color=Color.Primary />
    </MudOverlay>
}
</MudPopover>



@code {
    [Parameter]
    public bool IncludeNested { get; set; }
    [Parameter]
    public bool IsOpen { get; set; }
    [Parameter]
    public IADGroup Group { get; set; }
    /// <summary>
    /// Number of members per page
    /// </summary>
    /// <remarks>
    /// Default value is 25
    /// </remarks>
    [Parameter]
    public int PageSize { get; set; } = 25;

    List<IGroupableDirectoryAdapter> Members{ get; set; }


    AppModal AssignMemberModal;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _=Task.Run(() =>
        {
            if (IncludeNested)
            {
                Members = Group.NestedMembers.ToList();
            }
            else
            {

                Members = Group.Members;
            }
            LoadingData = false;
            InvokeAsync(StateHasChanged);

        });
        await InvokeAsync(StateHasChanged);

    }


    public async void Open()
    {
       IsOpen = true;
        await InvokeAsync(StateHasChanged);
    }
      public async void Close()
    {
       IsOpen = false;
        await InvokeAsync(StateHasChanged);
    }

}