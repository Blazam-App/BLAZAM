@inherits AppModalContent

<MudTextField Label="@AppLocalization["Username"]" @bind-Value="@User.SamAccountName" Disabled=true />


@* 
<MudTextField Label="@AppLocalization["Email Address"]" @bind-Value="@User.Email" Disabled=true />
 *@

<MudTextField Validation="@(newPassword.IsNullOrEmpty()==false)" Label="@AppLocalization["New Password"]" InputType="InputType.Password" @bind-Value="@newPassword" />


<MudTextField Immediate=true Validation="@(newPasswordConfirm.Equals(newPassword))" Label="@AppLocalization["Confirm New Password"]" InputType="InputType.Password" @bind-Value="@newPasswordConfirm" />

<MudTooltip Text=@AppLocalization["Require the user to change their password at next logon"]>
<MudSwitch T="bool" @ref=requireChangeSwitch>@AppLocalization["Require change"]</MudSwitch>
    </MudTooltip>


    @code {
    #nullable disable warnings
    string newPassword = "";
    string newPasswordConfirm = "";
    MudSwitch<bool>? requireChangeSwitch;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Modal.OnYes = SaveChanges;
        Modal.YesText = AppLocalization["Change Password"];
        Modal.Title = "Change Password";

    }


    public async void SaveChanges()
    {
        //User.CommitChanges();
        Modal.LoadingData = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(async() =>
        
        {
            try
            {
                if (User.SetPassword(newPassword.ToSecureString(), requireChangeSwitch.Value))
                {


                    SnackBarService.Success("Changed password for " + User.DisplayName);
                    await AuditLogger.User.PasswordChanged(User, requireChangeSwitch.Value);
                    await InvokeAsync(Close);

                }
                else
                {
                    SnackBarService.Error("Unable to set password for " + User.DisplayName);

                }
            }
            catch (Exception ex)
            {
                SnackBarService.Error(ex.Message + " " + ex.InnerException?.Message);
            }
            
        });
       
        Modal.LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }

    bool PasswordsValid
    {
        get
        {

            if (newPassword != null && newPassword != "")
                return newPassword == newPasswordConfirm;
            return false;
        }
    }
    protected override bool IsValid => (!newPassword.IsNullOrEmpty()
            && !newPasswordConfirm.IsNullOrEmpty()
            && newPassword.Equals(newPasswordConfirm));




}
