@inherits AppModalContent

        <MudTextField Label="@AppLocalization["Username"]" @bind-Value="@User.SamAccountName" Disabled=true />



        <MudTextField Label="@AppLocalization["Email Address"]" @bind-Value="@User.Email" Disabled=true />


        <MudTextField Validation="@(newPassword.IsNullOrEmpty()==false)" Label="@AppLocalization["Password"]" InputType="InputType.Password" @bind-Value="@newPassword" />


        <MudTextField Validation="@(newPasswordConfirm.Equals(newPassword))" Label="@AppLocalization["Password"]" InputType="InputType.Password" @bind-Value="@newPasswordConfirm" />

        <MudText>
            @AppLocalization["Require change"]
        </MudText>
        <MudText>
            Require the user to change their password at next logona
        </MudText>

        <MudSwitch T="bool" @ref=requireChangeSwitch />



@code {
    #nullable disable warnings
    string newPassword = "";
    string newPasswordConfirm = "";
    MudSwitch<bool>? requireChangeSwitch;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Modal.OnYes = SaveChanges;
        Modal.YesText = AppLocalization["Change Password"];
        Modal.Title = "Change Password";

        Modal.YesEnabled = ValidateModal;
    }


    public async void SaveChanges()
    {
        //User.CommitChanges();

        if (User.SetPassword(newPassword.ToSecureString(), requireChangeSwitch.Checked))
        {


            SnackBarService.Success("Changed password for " + User.DisplayName);
            await AuditLogger.User.PasswordChanged(User, requireChangeSwitch.Checked);
            Close();

        }
        else
        {
            SnackBarService.Error("Unable to set password for " + User.DisplayName);

        }
    }
    bool PasswordsValid
    {
        get
        {

            if (newPassword != null && newPassword != "")
                return newPassword == newPasswordConfirm;
            return false;
        }
    }
    protected override bool IsValid => (!newPassword.IsNullOrEmpty()
            && !newPasswordConfirm.IsNullOrEmpty()
            && newPassword.Equals(newPasswordConfirm));
        
    


}
