@inherits AppComponentBase
@if(Entry is IAccountDirectoryAdapter account)
{
    if(account.CanUnlock && account.LockedOut)
    {
        <MudMenuItem OnClick="(()=>{UnlockAccount(account);})" Icon="@Icons.Material.Outlined.LockOpen">
            @AppLocalization["Unlock"] @AppLocalization[account.ObjectType.ToString()]
        </MudMenuItem>

    }
    if (account.Enabled)
    {
        <MudMenuItem OnClick="(()=>{DisableAccount(account);})" Icon="@Icons.Material.Outlined.Cancel">
            @AppLocalization["Disable"] @AppLocalization[account.ObjectType.ToString()]
        </MudMenuItem>
    }
    if (account.Disabled)
    {
        <MudMenuItem OnClick="(()=>{EnableAccount(account);})" Icon="@Icons.Material.Outlined.Check">
            @AppLocalization["Enable"] @AppLocalization[account.ObjectType.ToString()]
        </MudMenuItem>
    }
}

<MudMenuItem>

</MudMenuItem>

@code {
    [Parameter]
    public IDirectoryEntryAdapter Entry{ get; set; }

    async void UnlockAccount(IAccountDirectoryAdapter userToUnlock)
    {
        if (userToUnlock.LockedOut)
        {

            userToUnlock.LockedOut = false;
            var changes = userToUnlock.Changes;

            var unlockJob = await userToUnlock.CommitChangesAsync();
            await AuditLogger.User.Changed(userToUnlock, changes);
            if (unlockJob.Result == JobResult.Passed)
            {

                SnackBarService.Success(userToUnlock.CanonicalName + AppLocalization[" unlocked"]);
            }
            else
            {
                SnackBarService.Error("Could not unlock: " + unlockJob.Exception?.Message);
            }
        }
    }

    async void EnableUser(IAccountDirectoryAdapter userToUnlock)
    {
        if (userToUnlock.Disabled)
        {

            userToUnlock.Enabled = true;
            var changes = userToUnlock.Changes;

            var unlockJob = await userToUnlock.CommitChangesAsync();
            await AuditLogger.User.Changed(userToUnlock, changes);
            if (unlockJob.Result == JobResult.Passed)
            {

                SnackBarService.Success(userToUnlock.CanonicalName + AppLocalization[" enabled"]);
            }
            else
            {
                SnackBarService.Error("Could not enable: " + unlockJob.Exception?.Message);
            }
        }
    }

    async void DisableUser(IAccountDirectoryAdapter userToUnlock)
    {
        if (userToUnlock.Enabled)
        {

            userToUnlock.Enabled = false;
            var changes = userToUnlock.Changes;

            var unlockJob = await userToUnlock.CommitChangesAsync();
            await AuditLogger.User.Changed(userToUnlock, changes);
            if (unlockJob.Result == JobResult.Passed)
            {

                SnackBarService.Success(userToUnlock.CanonicalName + AppLocalization[" disabled"]);
            }
            else
            {
                SnackBarService.Error("Could not disable: " + unlockJob.Exception?.Message);
            }
        }
    }
}
