@inherits AppComponentBase

<MudText>@Label</MudText>

<MudTreeView 
    T="IADOrganizationalUnit"
             ServerData="GetChildrenAsync"
             Items="RootOU"
             Dense="true"
             Hover="true"
             MaxHeight="400px"
             Color="Color.Success"
             @bind-SelectedValue="SelectedOU">
    <ItemTemplate>
        <MudTreeViewItem Value="@context"
                         LoadingIconColor="Color.Info"
                         @bind-Expanded="@context.IsExpanded"
                          
                         Text="@context.CanonicalName"
                         Icon="@Icons.Material.Filled.Folder"
                         Class="minw-max w-100"
                         CanExpand=context.HasChildren()
                         EndText="@EndText?.Invoke(context)">
            @*<Content>
            @{
            string itemIcon = Icons.Material.Filled.Folder;
            }
            @if (context.IsExpanded)
            {
            itemIcon = Icons.Material.Filled.FolderOpen;
            }
            @if (Badge != null)
            {
            <MudBadge Content="Badge" Overlap="true" Class="mx-6 my-4">
            <MudTreeViewItemToggleButton  Loading=@context.IsLoadingChildren @bind-Expanded="@context.IsExpanded" Visible="@context.HasChildren()" />
            <MudIcon Icon="@itemIcon" Class="ml-0 mr-2" Color="@Color.Default" />
            <MudText>@context.CanonicalName</MudText>

            @EndAdornment?.Invoke(context)

            </MudBadge>
            }
            else
            {
            <MudTreeViewItemToggleButton Loading=@context.IsLoadingChildren @bind-Expanded="@context.IsExpanded" Visible="@context.HasChildren()" />
            <MudIcon Icon="@itemIcon" Class="ml-0 mr-2" Color="@Color.Default" />
            <MudText>@context.CanonicalName</MudText>
            @EndAdornment?.Invoke(context)
            }
            </Content>*@
        </MudTreeViewItem>
    </ItemTemplate>
</MudTreeView>

@if (RootOU == null || !RootOU.Any() || LoadingData)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" />

}



@code {
    #nullable disable warnings
    Dictionary<IADOrganizationalUnit, bool> OULoadingStates = new();

    [Parameter]
    public bool StartRootExpanded { get; set; } = true;

    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public Func<IADOrganizationalUnit, string>? EndText { get; set; }


    [Parameter]
    public object? Badge { get; set; }


    [Parameter]
    public RenderFragment<IADOrganizationalUnit>? EndAdornment { get; set; }

    IADOrganizationalUnit? _selectedNode;

    [Parameter]
    public HashSet<IADOrganizationalUnit> RootOU { get; set; } = new HashSet<IADOrganizationalUnit>();


    IADOrganizationalUnit? _startingSelectedNode;
    [Parameter]
    public IADOrganizationalUnit? StartingSelectedOU
    {
        get => _startingSelectedNode; set
        {
            if (value == _startingSelectedNode) return;
            _startingSelectedNode = value;
            _selectedNode = value;


            StartingSelectedOUChanged.InvokeAsync(value);
        }

    }

    [Parameter]
    public EventCallback<IADOrganizationalUnit> StartingSelectedOUChanged
    {
        get; set;
    }

    [Parameter]
    public IADOrganizationalUnit? SelectedOU
    {
        get => _selectedNode; set
        {
            if (value == _selectedNode) return;
            if (value != null && value.CanRead)
            {
                _selectedNode = value;
                //if (TopLevel == null)
                //    OnInitializedAsync();
                //OpenToSelected();
                SelectedOUChanged.InvokeAsync(value);
            }
        }

    }

    [Parameter]
    public EventCallback<IADOrganizationalUnit> SelectedOUChanged { get; set; }

    ADOrganizationalUnit TopLevel;


    MudTreeView<IADOrganizationalUnit>? OUTree { get; set; }


    IList<IADOrganizationalUnit> ExpandedNodes = new List<IADOrganizationalUnit>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();



        //await InvokeAsync(StateHasChanged);

        await InitializeTreeView();

    }
    async Task InitializeTreeView()
    {
        //Wait a few milliseconds to trip the async into acutally awaiting
        await Task.Delay(500);

        //ApplicationBaseOUs = Directory.OUs.FindSubOusByDN(null);


        if (RootOU is null || RootOU.Count < 1)
        {
            TopLevel = new ADOrganizationalUnit();
            await TopLevel.Parse(Directory.GetDirectoryEntry(), Directory);
            _ = TopLevel.Children;
            RootOU = new HashSet<IADOrganizationalUnit>() { TopLevel };
        }
        if (StartingSelectedOU == null)
        {
            SelectedOU = TopLevel;
        }
        else
            OpenToSelected();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }
    void OpenToSelected()
    {
        //ExpandedNodes.Clear();
        //var newExpandedNodes = new List<IADOrganizationalUnit>(ExpandedNodes);
        if (StartRootExpanded)
        {
            //newExpandedNodes.Add(TopLevel);
            if (!SelectedOU.Equals(RootOU))
            {
                IADOrganizationalUnit? openThis = RootOU.First();
                openThis.IsExpanded = true;
                while (openThis != null)
                {
                    openThis = openThis.Children.Where(c => SelectedOU.DN.Contains(c.DN) && !SelectedOU.DN.Equals(c.DN)).FirstOrDefault();
                    if (openThis != null)
                        openThis.IsExpanded = true;
                    //newExpandedNodes.Add(openThis);
                }
            }
        }
        //ExpandedNodes = newExpandedNodes;
        //InvokeAsync(StateHasChanged);


    }


    async Task<HashSet<IADOrganizationalUnit>> GetChildrenAsync(IADOrganizationalUnit parentNode)
    {
        return await Task.Run(() =>
            {
                return GetChildren(parentNode);

            });
    }

    HashSet<IADOrganizationalUnit> GetChildren(IADOrganizationalUnit parentNode)
    {
        parentNode.IsLoadingChildren = true;

        var children = parentNode.Children.ToHashSet();

        parentNode.IsLoadingChildren = false;
        return children;

    }


















}
