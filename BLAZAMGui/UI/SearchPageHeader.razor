@inherits AppComponentBase
@attribute [Authorize]

<MudForm Style="width:100%" Class="mx-2" @onsubmit="(()=>{SearchService.Search();})">

    <AuthorizeView Context="authContext">

        <MudStack Row="true">

            <MudMenu AnchorOrigin=Origin.BottomCenter TransformOrigin=Origin.TopCenter Color=Color.Secondary StartIcon="@Icons.Material.Filled.TypeSpecimen" Label="@SearchService.SeachObjectType.ToString()">
                <CascadingAuthenticationState>

                    <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.All; })>@AppLocalization["All"]</MudMenuItem>
                    <AuthorizeView Roles="@(UserRoles.SearchUsers+","+UserRoles.SuperAdmin)">
                        
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.User; })>@AppLocalization["User"]</MudMenuItem>
                    </AuthorizeView>

                    <AuthorizeView Roles="@(UserRoles.SearchGroups+","+UserRoles.SuperAdmin)">
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.Group; })>@AppLocalization["Group"]</MudMenuItem>

                    </AuthorizeView>
                    <AuthorizeView Roles="@(UserRoles.SearchOUs+","+UserRoles.SuperAdmin)">
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.OU; })>@AppLocalization["OU"]</MudMenuItem>

                    </AuthorizeView>
                    <AuthorizeView Roles="@(UserRoles.SearchComputers+","+UserRoles.SuperAdmin)">
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.Computer; })>@AppLocalization["Computer"]</MudMenuItem>

                    </AuthorizeView>
                    <AuthorizeView Roles="@(UserRoles.SearchComputers+","+UserRoles.SuperAdmin)">
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.Printer; })>@AppLocalization["Printer"]</MudMenuItem>

                    </AuthorizeView>
                </CascadingAuthenticationState>

            </MudMenu>


            @if (IsAdmin == true || CurrentUser.State?.CanSearchDisabled(ActiveDirectoryObjectType.User) == true)
            {
                var buttonColor = Color.Error;
                if (!SearchService.IncludeDisabled)

                {
                    buttonColor = Color.Success;
                }
                <MudButton Size=Size.Small Class="d-flex" ButtonType="ButtonType.Button" OnClick=@(async()=>{
                       SearchService.IncludeDisabled= !SearchService.IncludeDisabled;
                       await InvokeAsync(StateHasChanged);
                       }) Color=buttonColor>
                    Enabled Only
                </MudButton>





            }
            @{
                var adornmentIcon = Icons.Material.Filled.AccountTree;
                switch (SearchService.SeachObjectType)
                {
                    case ActiveDirectoryObjectType.User:
                        adornmentIcon = Icons.Material.Filled.Person;
                        break;
                    case ActiveDirectoryObjectType.Group:
                        adornmentIcon = Icons.Material.Filled.People;
                        break;
                    case ActiveDirectoryObjectType.OU:
                        adornmentIcon = Icons.Material.Filled.Folder;
                        break;
                    case ActiveDirectoryObjectType.Computer:
                        adornmentIcon = Icons.Material.Filled.Computer;
                        break;
                }
            }
            <MudPaper Class=" mud-overlay-light" Style="width:100%;max-width:550px;height:min-content;">
                <ADAutoComplete Class="mt-0"
                                Style="max-width:550px;"
                                AdornmentIcon="@adornmentIcon"
                                Variant="Variant.Filled"
                                Label="Search Directory"
                                SelectedResultChanged="@((result)=>{if(result!=null)SearchService.Search(SearchService.SearchTerm);})"
                                SearchObjectType="@SearchService.SeachObjectType"
                                SearchDisabled=@SearchService.IncludeDisabled
                                @bind-SearchTerm="@SearchService.SearchTerm" />
            </MudPaper>
      

        </MudStack>

    </AuthorizeView>
</MudForm>

@code {
    List<ActiveDirectoryObjectType> ObjectTypes = new() { ActiveDirectoryObjectType.All, ActiveDirectoryObjectType.User, ActiveDirectoryObjectType.Group, ActiveDirectoryObjectType.OU, ActiveDirectoryObjectType.Computer };


    public ADSearch Searcher { get; set; } = new ADSearch();




    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string? Text { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Searcher.ResultsCollected += ((batch) => { InvokeAsync(StateHasChanged); });
        Searcher.OnSearchCompleted += (() =>
        {

            InvokeAsync(StateHasChanged);
        });
    }



}