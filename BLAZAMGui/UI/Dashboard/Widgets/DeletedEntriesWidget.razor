@inherits Widget
@attribute [Authorize]

<MudDataGrid T="IDirectoryEntryAdapter"
             Items="deletedObjects"
             RowClick="@RowClicked"
             RowClass="cursor-pointer"
             Dense=true
             Filterable=true
             RowsPerPage="@ItemsPerPage"
             RowsPerPageChanged="@SetRowsPerPage"
             FilterMode="DataGridFilterMode.Simple"
             Loading=@LoadingData
             Square=true
             ColumnResizeMode="ResizeMode.Column"
             Virtualize=true
             Class="py-0"
             SortMode="SortMode.Single">
    <Columns>
        <TemplateColumn Style="width:100px;" Title="Type">
            <CellTemplate>
               
                        <AppTooltip Text="@context.Item?.OU.ToPrettyOu()">
                            <MudText>@context.Item?.CanonicalName</MudText>
                        </AppTooltip>

            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Name">
            <CellTemplate>
                <AppTooltip Text="@context.Item?.OU.ToPrettyOu()">
                    <MudText>@context.Item?.CanonicalName</MudText>
                </AppTooltip>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x=>x.LastChanged" Title="Deleted" />

    </Columns>
    <PagerContent>
        <MudDataGridPager PageSizeOptions=[5,10,25,50,100] T="IDirectoryEntryAdapter" />
    </PagerContent>
</MudDataGrid>


<MudOverlay Visible=LoadingData>
    <MudProgressLinear Indeterminate=true />
</MudOverlay>
@code {
    List<IDirectoryEntryAdapter> deletedObjects
    {
        get => CurrentUser.State.Cache.Get<List<IDirectoryEntryAdapter>>(this.GetType());
        set => CurrentUser.State.Cache.Set(this.GetType(), value);
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CurrentUserDashboardWidgets.OnRefreshWidget += (Widget widget) =>
        {
            if (widget.WidgetType.Equals(WidgetType))
            {
                _ = RefreshData();

            }

        };

        _ = RefreshData();

    }
    async Task RefreshData()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        var search = new ADSearch(Directory) { SearchRoot = Directory.GetDeleteObjectsEntry() };
        search.SearchDeleted = true;
        search.Fields.Changed = DateTime.Now.AddDays(-14);
        deletedObjects = await search.SearchAsync<DirectoryEntryAdapter, IDirectoryEntryAdapter>();
        LoadingData = false;
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }


}
