@inherits Widget
@attribute [Authorize]
<MudDataGrid T="IADUser"
             Items="@LockedUsers.Where(u=>u.LockedOut)"
             Dense=true
             Filterable=true
             RowsPerPage="@ItemsPerPage"
             RowsPerPageChanged="@SetRowsPerPage"
             FilterMode="DataGridFilterMode.Simple"
             Loading=@LoadingData
             Square=true
             ColumnResizeMode="ResizeMode.Column"
             Virtualize
             RowClass="cursor-pointer"
             RowClick=@GoTo
             Class="py-0"
             SortMode="SortMode.Single">
    <Columns>
        <TemplateColumn Title="Name">
            <CellTemplate>
                <MudContextMenu>

                    <ChildContent>

                        <AppTooltip Text="@context.Item?.OU.ToPrettyOu()">
                            <MudText>@context.Item?.CanonicalName</MudText>
                        </AppTooltip>

                    </ChildContent>
                    <MenuContents>

                     <DirectoryEntryContextMenuItems Entry="@context.Item"/>

                    </MenuContents>
                </MudContextMenu>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Locked Out">
            <CellTemplate>
                @if (context.Item?.LockoutTime != null)
                {
                    <MudText>@context.Item.LockoutTime.Value.ToLocalTime()</MudText>
                }
            </CellTemplate>
        </TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager PageSizeOptions=[5,10,25,50,100] T="IADUser" />
    </PagerContent>
</MudDataGrid>

@code {
    List<IADUser> LockedUsers
    {
        get => CurrentUser.State?.Cache.Get<List<IADUser>>(this.GetType());
        set => CurrentUser.State?.Cache.Set(this.GetType(), value);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CurrentUserDashboardWidgets.OnRefreshWidget += (Widget widget) =>
        {
            if (widget.WidgetType.Equals(WidgetType))
            {
                _ = RefreshData();

            }

        };

        _ = RefreshData();
    }

    async Task RefreshData()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        LockedUsers = (await Directory.Users.FindLockedOutUsersAsync()).OrderByDescending(u => u.LockoutTime).Where(u => u.CanRead).ToList();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }

    void GoTo(DataGridRowClickEventArgs<IADUser> args)
    {
        Nav.NavigateTo(args.Item.SearchUri);
    }
    async void UnlockAccount(IADUser userToUnlock)
    {
        if (userToUnlock.LockedOut)
        {

            userToUnlock.LockedOut = false;
            var changes = userToUnlock.Changes;

            var unlockJob = await userToUnlock.CommitChangesAsync();
            await AuditLogger.User.Changed(userToUnlock, changes);
            if (unlockJob.Result == JobResult.Passed)
            {
                await RefreshData();

                SnackBarService.Success(userToUnlock.CanonicalName + AppLocalization[" unlocked"]);
            }
            else
            {
                SnackBarService.Error("Could not unlock: " + unlockJob.Exception?.Message);
            }
        }
    }
}
