@inherits Widget
@attribute [Authorize]

<MudDataGrid T="IDirectoryEntryAdapter"
             Items="LockedUsers"
             RowClick="@RowClicked"
             RowClass="cursor-pointer"
             Dense=true
             Filterable=true
             RowsPerPage="5"
             FilterMode="DataGridFilterMode.Simple"
             Loading=@LoadingData
             Square=true
             ColumnResizeMode="ResizeMode.Column"
             Virtualize=true
             Class="py-0"
             SortMode="SortMode.Single">
    <Columns>
        <TemplateColumn Title="Name">
            <CellTemplate>
                <MudTooltip Text="@context.Item?.OU.ToPrettyOu()">
                    <MudText>@context.Item?.CanonicalName</MudText>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Password Changed">
            <CellTemplate>
                    <MudText>@(((IADUser)context.Item).PasswordLastSet)</MudText>
            </CellTemplate>
        </TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="IDirectoryEntryAdapter" />
    </PagerContent>
</MudDataGrid>


<MudOverlay Visible=LoadingData>
    <MudProgressLinear Indeterminate=true />
</MudOverlay>
@* <div Background="Background.Secondary" >


    <div Overflow="Overflow.Auto" Style="max-height:350px;">
        @foreach (var user in LockedUsers)
        {

            <MudCard @onclick="@(()=>{Nav.NavigateTo(user.SearchUri);})">


                @user.DisplayName <br>
                @user.SamAccountName <br>
                @DirectoryTools.PrettifyOu(user.OU) <br>

                @user.PasswordLastSet <br>

            </MudCard>

        }
    </div>
</div> *@
@code {
    List<IADUser> LockedUsers = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Title = "Disabled Users";
        LockedUsers = await Directory.Users.FindChangedPasswordUsersAsync(false);
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }
}
