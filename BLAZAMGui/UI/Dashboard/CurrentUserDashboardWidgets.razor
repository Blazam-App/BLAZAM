@using BLAZAM.Gui.Services
@using BLAZAM.Gui.UI.Dashboard.Widgets;
@using MudBlazor.Utilities;

@inherits AppComponentBase
@if (CurrentUser.State != null && CurrentUser.State.Preferences != null)
{
    if (CurrentUser.State?.Preferences?.DashboardWidgets.Count > 0)
    {
        <MudDropContainer @ref=widgetContainer
                          T="UserDashboardWidget" Items="CurrentUser.State?.Preferences?.DashboardWidgets.OrderBy(uw => uw.Slot).ThenBy(uw => uw.Order)"
                          ItemsSelector="ItemSelector"
                          ItemDropped="ItemDropped"
                          Class="d-flex flex-wrap flex-grow-1 mud-width-full  mt-5">
            <ChildContent>

                <FlexContainer Spacing="4" Class="mx-auto">

                    <MudCard Class="pa-0 mx-auto" Elevation="1">
                        <MudList T="MudDropZone<UserDashboardWidget>"
                                 Class="d-flex flex-column ma-0 mx-auto py-0">
                            <MudDropZone AllowReorder=true
                                         T="UserDashboardWidget"
                                         Identifier="slot1"
                                         Class="flex-grow-1"
                                         Style="min-height:50px;min-width:300px;" />
                        </MudList>
                    </MudCard>
                    <MudCard Class="pa-0 mx-auto" Elevation="2">
                        <MudList T="MudDropZone<UserDashboardWidget>"
                                 Class="d-flex flex-column ma-0 mx-auto py-0">
                            <MudDropZone AllowReorder=true
                                         T="UserDashboardWidget"
                                         Identifier="slot2"
                                         Class="flex-grow-1"
                                         Style="min-height:50px; min-width:300px;" />
                        </MudList>
                    </MudCard>

                </FlexContainer>
            </ChildContent>
            <ItemRenderer>
                @{


                    Widget? widget = null;
                    try
                    {
                        widget = allWidgets.First(w => w.WidgetType == context.WidgetType);
                    }
                    catch
                    {

                    }
                    if (widget != null)
                    {
                        <MudCard Class="my-5 " Elevation="1">
                            <MudCardHeader>
                                <MudText Typo="Typo.h6"> @widget.Title</MudText>
                                <MudSpacer />
                                <AppTooltip Text=@AppLocalization["Refresh"]>
                                    <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                                               Color="Color.Primary"
                                               OnClick="@(()=>{OnRefreshWidget?.Invoke(widget);})" />
                                </AppTooltip>

                                <AppTooltip Text=@AppLocalization["Remove"]>
                                    <AppCloseButton OnClick=@(async()=>{await RemoveWidget(context);}) />
                                </AppTooltip>

                            </MudCardHeader>
                            <CascadingValue Value="this">

                                <DynamicComponent Parameters="@(new Dictionary<string,object>(){
                                    {"ItemsPerPage",context.ItemsPerPage>5?context.ItemsPerPage:5},
                                    {"WidgetType",context.WidgetType}
                                 })"
                                                  Type="@widget.GetType()" />
                            </CascadingValue>

                        </MudCard>
                    }
                }

            </ItemRenderer>
        </MudDropContainer>
    }
    else
    {
        <MudContainer Class="d-flex flex-wrap flex-grow-1 mud-width-full mt-5 ">

            <FlexContainer Spacing="4" Class="mx-auto">
                <MudCard>
                    <MudCardContent>
                        It's lonely in here. Click the + button to add some widgets...
                    </MudCardContent>
                </MudCard>
            </FlexContainer>
        </MudContainer>

    }

    <MudMenu Class="d-flex" Style="justify-content: flex-end;" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <AppTooltip Text="Add Widget">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />
            </AppTooltip>
        </ActivatorContent>
        <ChildContent>
            @foreach (var widget in allWidgets)
            {
                @if (!CurrentUser.State?.Preferences?.DashboardWidgets.Any(w => w.WidgetType == widget.WidgetType) == true)
                {
                    <MudMenuItem OnClick="@(async()=>{await AddWidget(widget.WidgetType);})">@widget.Title</MudMenuItem>
                }

            }
        </ChildContent>
    </MudMenu>
}





@code {

    [Inject]
    public WidgetService WidgetService { get; set; }
    public AppEvent<Widget> OnRefreshWidget { get; set; } = (val) => { };
    IApplicationUserState _currentUser;
    MudDropContainer<UserDashboardWidget>? widgetContainer;
    List<Widget> allWidgets = new List<Widget>();

    protected override Task OnInitializedAsync()
    {

        allWidgets = new List<Widget>(WidgetService.Available());
        _currentUser = CurrentUser.State;
        return base.OnInitializedAsync();
    }
    bool ItemSelector(UserDashboardWidget item, string dropzone)
    {
        return item.Slot == dropzone;
    }

    private Task ItemDropped(MudItemDropInfo<UserDashboardWidget> dropItem)
    {
        if (dropItem.Item == null) return Task.CompletedTask;
        if (CurrentUser.State != null)
        {
            var refItem = CurrentUser.State.Preferences?.DashboardWidgets.Where(w => w.WidgetType == dropItem.Item.WidgetType).FirstOrDefault();
            if (refItem != null)
            {
                refItem.Slot = dropItem.DropzoneIdentifier;
                refItem.Order = dropItem.IndexInZone;

                foreach (var widget in CurrentUser.State.Preferences.DashboardWidgets)
                {
                    if (widget.Slot == dropItem.DropzoneIdentifier && widget.Order >= dropItem.IndexInZone)
                    {
                        widget.Order++;
                    }
                }

                CurrentUser.State.SaveDashboardWidgets();
            }
        }
        return Task.CompletedTask;
    }


    async Task AddWidget(DashboardWidgetType widgetType)
    {
        var order = 0;
        if (CurrentUser.State != null)
        {
            if (CurrentUser.State.Preferences?.DashboardWidgets.Count > 0)
            {
                order = CurrentUser.State.Preferences.DashboardWidgets.Max(w => w.Order) + 1;
            }
            CurrentUser.State.Preferences?.DashboardWidgets.Add(new UserDashboardWidget
                {
                    Id = 0,
                    User = CurrentUser.State.Preferences,
                    Slot = "slot1",
                    WidgetType = widgetType,
                    Order = order
                });
            await CurrentUser.State.SaveDashboardWidgets();
            await InvokeAsync(StateHasChanged);
            widgetContainer?.Refresh();
        }

    }
    async Task RemoveWidget(UserDashboardWidget widget)
    {
        if (CurrentUser.State != null)
        {
            CurrentUser.State.Preferences?.DashboardWidgets.Remove(widget);
            await CurrentUser.State.SaveDashboardWidgets();

            await InvokeAsync(StateHasChanged);

            widgetContainer?.Refresh();
        }

    }
}