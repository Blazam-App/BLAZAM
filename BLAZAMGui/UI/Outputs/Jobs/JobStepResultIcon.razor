@{
    var color = Color.Success;
    var icon = Icons.Material.Filled.Check;
    switch (Step.Result)
    {
        case JobResult.NotRun:
            color = Color.Warning;
            icon = Icons.Material.Filled.QuestionMark;
            break;
        case JobResult.Failed:
            color = Color.Error;
            icon = Icons.Material.Filled.Close;
            break;
        case JobResult.Running:
            color = Color.Warning;
            icon = Icons.Material.Filled.RunCircle;
            break;
        case JobResult.Cancelled:
            color = Color.Error;
            icon = Icons.Material.Filled.Cancel;
            break;
    }
}

<MudStack AlignItems=AlignItems.Center
          Spacing="0">
    @if (Step.Result != JobResult.Running)
    {
        <MudIcon Color="@color"
                 Icon="@icon" />
    }
    else
    {

        <MudProgressCircular Size=Size.Small
                             Color="Color.Primary"
                             Indeterminate=@(Step.Progress==null)
                             Value="@(Step.Progress.HasValue==true?Step.Progress.Value:0)"
                             Max="100" />
        @if (Step.Progress != null)
        {
            <MudText Class="relative"
                     Style="top:-22px;height:0px;"
                     Typo="Typo.caption">@Step.Progress.Value.Round()%</MudText>
        }


    }
</MudStack>
@code {
    [Parameter]
    public IJobStep Step { get; set; }
}