@inherits AppComponentBase
@if (!Label.IsNullOrEmpty())
{
    <MudText>@Label</MudText>
}

    <MudTreeView T="DirectoryTemplate"
                 Items="RootTemplate"
                 AutoExpand=true
                 Dense="true"
                 Hover="true"
                 Class="py-3"
                 SelectedValue="SelectedTemplate"
                 SelectedValueChanged=SelectedTemplateChanged
                 MaxHeight="400px">
    <ItemTemplate>
        <MudTreeViewItem Selected=@(context.Value.Id.Equals(SelectedTemplate?.Id)==true)
                         Expanded="context.Expanded"
                         Items="@context.Children"
                         Value="@context.Value">
            <Content>
                <MudTreeViewItemToggleButton ExpandedChanged="@((state)=>{context.Expanded=state;})"
                                             Visible="@(context.HasChildren)" />

                <MudBadge Icon="@Icons.Material.Filled.VisibilityOff"
                          Visible=@(!context.Value.Visible)
                          Color="Color.Warning">
                    @context.Value.Name
                </MudBadge>
            </Content>
        </MudTreeViewItem>
    </ItemTemplate>
</MudTreeView>





@code {


    [Parameter]
    public string? Label { get; set; }
    /// <summary>
    /// Called when the user clicks on a template in the treeview
    /// </summary>
    [Parameter]
    public EventCallback<DirectoryTemplate> OnTemplateSelected { get; set; }




    /// <summary>
    /// The hashset of all templates, starting at the root templates that have no parents
    /// </summary>
    [Parameter]
    public IReadOnlyCollection<TreeItemData<DirectoryTemplate>> RootTemplate { get; set; } = new List<TreeItemData<DirectoryTemplate>>();

    /// <summary>
    /// The already or recently selected template
    /// </summary>
    /// <remarks>
    /// Prefilling this from another razor component will active this template in the treeview
    /// </remarks>
    [Parameter]
    public DirectoryTemplate? SelectedTemplate { get; set; }
    private void SelectedTemplateChanged(DirectoryTemplate selectedTemplate)
    {
        if (selectedTemplate != null)
        {
            SelectedTemplate = selectedTemplate;
            OnTemplateSelected.InvokeAsync(selectedTemplate);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }
   
}
