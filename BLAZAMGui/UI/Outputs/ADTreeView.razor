@inherits AppComponentBase

<MudText>@Label</MudText>

<MudTreeView T="IDirectoryEntryAdapter"
             ServerData="GetChildrenAsync"
             Items="RootOU"
             Dense="true"
             Hover="true"
             Color="Color.Success"
             @bind-SelectedValue="SelectedEntry">
    <ItemTemplate>
        <MudTreeViewItem Value="@context"
                         Items=@GetItems(context)
                         LoadingIconColor="Color.Info"
                         @bind-Expanded="@context.IsExpanded"
                         @bind-Activated=context.IsSelected
                         Text="@context.CanonicalName"
                         Icon="@context.TypeIcon()"
                         IconColor=@GetItemColor(context)
                         Class="minw-max w-100 overflow-x-auto"
                         CanExpand=@(context is IADOrganizationalUnit)
                         EndText="@EndText?.Invoke(context)"
                         Context="itemContext">
            @*     <BodyContent>
            <MudStack Row=true Spacing="0" Class="mud-input mud-input-underline cursor-pointer minw-max w-100">
            <MudText Color="@TextColor">@context.CanonicalName</MudText>
            <MudSpacer/>

            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" />


            </MudStack>
            </BodyContent> *@

        </MudTreeViewItem>
    </ItemTemplate>

</MudTreeView>

@if (RootOU == null || !RootOU.Any() || LoadingData)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" />

}



@code {
    #nullable disable warnings

    [Parameter]
    public bool StartRootExpanded { get; set; } = true;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public Color TextColor { get; set; } = Color.Default;
    [Parameter]
    public Func<IDirectoryEntryAdapter, string>? EndText { get; set; }


    IDirectoryEntryAdapter? _selectedNode;

    [Parameter]
    public HashSet<IDirectoryEntryAdapter> RootOU { get; set; } = new HashSet<IDirectoryEntryAdapter>();


    IADOrganizationalUnit? _startingSelectedNode;
    [Parameter]
    public IADOrganizationalUnit? StartingSelectedOU
    {
        get => _startingSelectedNode; set
        {
            if (value == _startingSelectedNode) return;
            _startingSelectedNode = value;
            _selectedNode = value;


            StartingSelectedOUChanged.InvokeAsync(value);
        }

    }

    [Parameter]
    public EventCallback<IDirectoryEntryAdapter> StartingSelectedOUChanged
    {
        get; set;
    }

    [Parameter]
    public IDirectoryEntryAdapter? SelectedEntry
    {
        get => _selectedNode; set
        {
            if (value == _selectedNode) return;
            if (value != null && value.CanRead)
            {
                var cache = _selectedNode;

                _selectedNode = value;
                if (cache==null && value == RootOU.First())return;


                    SelectedEntryChanged.InvokeAsync(value);

                
                //if (TopLevel == null)
                //    OnInitializedAsync();
                //OpenToSelected();
               
            }
        }

    }

    [Parameter]
    public EventCallback<IDirectoryEntryAdapter> SelectedEntryChanged { get; set; }

    ADOrganizationalUnit TopLevel;


    MudTreeView<IDirectoryEntryAdapter>? OUTree { get; set; }


    IList<IDirectoryEntryAdapter> ExpandedNodes = new List<IDirectoryEntryAdapter>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();



        //await InvokeAsync(StateHasChanged);

        await InitializeTreeView();

    }
    async Task InitializeTreeView()
    {
        //Wait a few milliseconds to trip the async into acutally awaiting
        await Task.Delay(50);

        //ApplicationBaseOUs = Directory.OUs.FindSubOusByDN(null);


        if (RootOU is null || RootOU.Count < 1)
        {
            TopLevel = new ADOrganizationalUnit();
            TopLevel.Parse(directory: Directory, directoryEntry: Directory.GetDirectoryEntry());
            _ = TopLevel.SubOUs;
            RootOU = new HashSet<IDirectoryEntryAdapter>() { TopLevel };
        }
        if (StartingSelectedOU == null)
        {
            SelectedEntry = TopLevel;
        }
        else
            OpenToSelected();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }
    void OpenToSelected()
    {
        //ExpandedNodes.Clear();
        //var newExpandedNodes = new List<IADOrganizationalUnit>(ExpandedNodes);
        if (StartRootExpanded)
        {
            //newExpandedNodes.Add(TopLevel);
            if (!SelectedEntry.Equals(RootOU))
            {
                IDirectoryEntryAdapter? openThis = RootOU.First();
                openThis.IsExpanded = true;
                //while (openThis != null)
                //{
                //    var child = openThis.Children.Where(c => SelectedOU.DN.Contains(c.DN) && !SelectedOU.DN.Equals(c.DN)).FirstOrDefault();
                //    if (child != null)
                //    {
                //        child.IsExpanded = true;
                //        openThis = child;
                //    }
                //    else
                //    {
                //        var matchingOU = openThis.Children.Where(c => SelectedOU.DN.Equals(c.DN)).FirstOrDefault();
                //        if (matchingOU!=null)
                //            matchingOU.IsSelected = true;
                //        break;
                //    }


                //}
            }
        }


    }
    private Color GetItemColor(IDirectoryEntryAdapter item)
    {
        if (item is IAccountDirectoryAdapter account)
        {
            if (account.Disabled) return Color.Error;
            if (account.LockedOut) return Color.Warning;
            if (account.Created > DateTime.Now.AddDays(-14)) return Color.Success;
        }
        return Color.Default;
    }
    private HashSet<IDirectoryEntryAdapter>? GetItems(IDirectoryEntryAdapter parent)
    {
        if (parent.IsExpanded || parent.CachedChildren != null)
        {
            var items = parent.Children.MoveToTop(c => c.ObjectType == ActiveDirectoryObjectType.OU);
            var hashst = items.ToHashSet();
            return hashst;
        }
        return null;
    }
    async Task<HashSet<IDirectoryEntryAdapter>> GetChildrenAsync(IDirectoryEntryAdapter parentNode)
    {
        return await Task.Run(() =>
            {
                return GetChildren(parentNode);

            });
    }

    HashSet<IDirectoryEntryAdapter> GetChildren(IDirectoryEntryAdapter parentNode)
    {

        var children = parentNode.Children.ToHashSet();

        return children;

    }


















}
