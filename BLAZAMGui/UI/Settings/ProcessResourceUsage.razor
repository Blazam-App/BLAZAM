@inherits AppComponentBase
@using System.Diagnostics
<SettingsField Label=@AppLocalization["CPU"]>
    @if (CPUUsage != null)
    {
        <MudText>@cpuUsage%</MudText>
    }
    else
    {
        <MudText>@AppLocalization["Loading"]</MudText>
    }

</SettingsField>
<SettingsField Label=@AppLocalization["Memory"]>
    @if (MemoryUsage != null)
    {
        <MudText>@memoryUsage</MudText>

    }
    else
    {
        <MudText>@AppLocalization["Loading"]</MudText>
    }
</SettingsField>

@code {
    [Parameter]
    public Process Process { get; set; }

    private string cpuUsage
    {
        get

        {
            if (CPUUsage == null) return AppLocalization["Unable to read"];
            return Math.Round(CPUUsage.Value, 2).ToString();


        }
    }
    private string memoryUsage
    {
        get

        {
            if (MemoryUsage == null) return AppLocalization["Unable to read"];
            return new ByteSize(MemoryUsage.Value).ToString();


        }
    }
    private double? CPUUsage;
    private double? MemoryUsage;

    private Timer? refreshTimer;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        refreshTimer = new Timer((state) => { PollData(); }, null, 2000, 2000);


    }
    private TimeSpan lastProcessTime = TimeSpan.Zero;
    private DateTime lastPollTime = DateTime.Now;
    private void PollData()
    {
        Task.Run(() =>
       {
           try
           {
               Process.Refresh();
               MemoryUsage = Process.WorkingSet64;
               var processTimeDelta = Process.TotalProcessorTime - lastProcessTime;
               lastProcessTime = Process.TotalProcessorTime;
               var pollingDelta = DateTime.Now - lastPollTime;
               CPUUsage = (processTimeDelta / pollingDelta) * 100;
               lastPollTime = DateTime.Now;

           }
           catch (Exception ex)
           {
               Loggers.SystemLogger.Error("Error creating performance counters {@Error}", ex);
           }

           InvokeAsync(StateHasChanged);
       });
    }
    public override void Dispose()
    {
        refreshTimer?.Dispose();
    }
}