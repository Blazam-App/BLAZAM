@using BLAZAM.Services.Duo
@inherits SettingsComponents
@inject IDuoClientProvider Duo



<MudText Typo="Typo.h4">@AppLocalization["Authentication Settings"] <AppDocumentationButton Page="/admin/settings/authentication" /></MudText>
    
<MudForm @onsubmit=Save>


    <SettingsField Label="@AppLocalization["Admin Password"]">

        <MudTextField Label="@AppLocalization["Admin Password"]" InputType="InputType.Password" @bind-Value="newAdminPassword" />
    </SettingsField>

    <SettingsField Label="@AppLocalization["Session Timeout"]">

        <MudNumericField Label="@AppLocalization["Session Timeout"]" HelperText="Time in minute" T="int?" @bind-Value="@settings.SessionTimeout" />

    </SettingsField>
    <MudDivider Class="my-6"/>
    <SettingsField Label="@AppLocalization["Duo Security MFA (optional)"]">

        <StatusCheck Status=duoHealthCheckResult Text="@AppLocalization["Duo Health Check"]" />
    </SettingsField>

    <SettingsField Label="Duo ClientID">

        <MudTextField Label="Duo ClientID" InputType="InputType.Password" @bind-Value="@settings.DuoClientId" />

    </SettingsField>
    <SettingsField Label="Duo ClientSecret">

        <MudTextField Label="Duo ClientSecret" InputType="InputType.Password" @bind-Value="@settings.DuoClientSecret" />

    </SettingsField>
    <SettingsField Label="Duo ApiHost">

        <MudTextField Label="Duo ApiHost" InputType="InputType.Password" @bind-Value="@settings.DuoApiHost" />

    </SettingsField>




    <SettingsField>

        <MudButton Disabled="SaveDisabled" ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

    </SettingsField>



</MudForm>
@code {
    #nullable disable warnings
    AuthenticationSettings settings = new AuthenticationSettings();
    string newAdminPassword;
    string adminPasswordInDb;
    bool? duoHealthCheckResult = null;

    string _timeoutString = "Loading...";
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Task.Run(async() =>
        {
             LoadingData = true;
        await InvokeAsync(StateHasChanged);

            duoHealthCheckResult = await Duo.DoHealthCheckAsync();
        originalSettings = await Context.AuthenticationSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = await Context.AuthenticationSettings.FirstOrDefaultAsync();
        _timeoutString = settings.SessionTimeout.ToString() + " Minutes";

        //Pull encrypted admin pass and store encrypted value
        adminPasswordInDb = settings?.AdminPassword;
        newAdminPassword = adminPasswordInDb;
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
        
        });
       

    }
    private void UpdateTimeoutDisplay()
    {
        _timeoutString = settings.SessionTimeout.ToString() + " Minutes";
        InvokeAsync(StateHasChanged);

    }
    protected override async void Save()
    {
        if (!newAdminPassword.Equals(adminPasswordInDb))
        {

            settings.AdminPassword = newAdminPassword.Encrypt();

            adminPasswordInDb = settings.AdminPassword;

        }

        await AuditLogger.System.SettingsChanged("Authentication", settings.GetChanges(originalSettings));
        base.Save();
        await InvokeAsync(StateHasChanged);

    }
}
