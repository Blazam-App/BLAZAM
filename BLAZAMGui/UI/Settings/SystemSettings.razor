@inherits SettingsComponents
@using System.IO.Compression;
<MudText Typo="Typo.h4">@AppLocalization["System Settings"]</MudText>
<MudForm @onsubmit="Save">
    @if (settings != null)
    {
        <SettingsField Label="@AppLocalization["Google Analytics ID"]">

            <MudTextField Label="@AppLocalization["Google Analytics ID"]" @bind-Value="@settings.AnalyticsId" />

        </SettingsField>
        <SettingsField>

            <MudButton Color="Color.Error" Variant=Variant.Outlined OnClick=RestartApplication>Restart Web Application</MudButton>


        </SettingsField>
    }
    <MudText>Log Directory: @Loggers.LogPath</MudText>
    <SettingsField Label=@AppLocalization["Logs"]>

            <MudLink Href="/download/logs" Target="Target.Blank">
            <MudButton Variant=Variant.Outlined Color="Color.Primary">Download Logs</MudButton>
        </MudLink>


    </SettingsField>
    <SettingsField Label=@AppLocalization["Memory"]>
        <MudText>@(new  ByteSize((double)ApplicationInfo.RunningProcess.WorkingSet64).ToString())</MudText>

    </SettingsField>
    <SettingsField>

        <MudButton OnClick="Export" Color="Color.Success">Export</MudButton>

    </SettingsField>
   

    <SettingsField>

        <MudButton ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

    </SettingsField>
</MudForm>
    @code {
    #nullable disable warnings
        AppSettings? settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = Context.AppSettings.FirstOrDefault();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }



    [Inject] ApplicationManager applicationManager { get; set; }
    async Task Export()
    {
        MemoryStream memoryStream = new MemoryStream();

        IJob exportJob = new Job(AppLocalization["Export Database"], CurrentUser.Username);
        IJobStep exportData = new JobStep(AppLocalization["Export Data"], (step) =>
        {
            Context.Export("export");
            return true;

        });
        IJobStep packageData = new JobStep(AppLocalization["Prepare Files"], (step) =>
    {
        ZipArchive exportZip = new ZipArchive(memoryStream, ZipArchiveMode.Create);
        var exportDir = new SystemDirectory("export");
        exportZip.AddToZip(exportDir,exportDir.Path);
        memoryStream.SaveTo(new SystemFile("export/" + DatabaseCache.ApplicationSettings.AppName + "-" + DateTime.Now.ToString("yyyy-MM-dd-hh-mm-ss") + ".zip"));
        return true;

    });
        exportJob.Steps.Add(exportData);
        exportJob.Steps.Add(packageData);
        exportJob.Run();
        exportJob.ShowJobDetailsDialog(MessageService);
    }
    async Task RestartApplication()
    {
        if (await MessageService.Confirm("Are you sure you want to restart the application? All connected users will be disconnected.", "Restart Application"))
        {
            if (ApplicationInfo.InDemoMode && !UserStateService.CurrentUsername.Equals("admin", StringComparison.OrdinalIgnoreCase))
            {
                SnackBarService.Warning("Restarting the application is not allowed in the demo");
                return;
            }
            applicationManager.Restart();
        }
    }

    protected override void Save()
    {
        AuditLogger.System.SettingsChanged("Application", settings.GetChanges(originalSettings));
        base.Save();
    }

}
