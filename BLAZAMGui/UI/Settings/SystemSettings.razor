@inherits SettingsComponents
<MudText Typo="Typo.h4">@AppLocalization["System Settings"]</MudText>
    <MudForm @onsubmit="Save">
        @if (settings != null)
    {
        <SettingsField Label="@AppLocalization["Google Analytics ID"]">

            <MudTextField Label="@AppLocalization["Google Analytics ID"]" @bind-Value="@settings.AnalyticsId" />

        </SettingsField>
        <SettingsField Label="@AppLocalization["Manage Web Application"]">

            <MudButton Color="Color.Error" Variant=Variant.Outlined OnClick=RestartApplication>Restart Web Application</MudButton>


        </SettingsField>
    }
   
        <SettingsField Label=@AppLocalization["Logs"]>

            <MudLink Href="/download/logs" Target="Target.Blank">
                <MudButton Variant=Variant.Outlined Color="Color.Primary">Download Logs</MudButton>
            </MudLink>
        <MudText>Log Directory: @Loggers.LogPath</MudText>

        </SettingsField>

        <ProcessResourceUsage Process="@ApplicationInfo.RunningProcess" />



        <SettingsField Label="@AppLocalization["Encryption Seed String"]">

            <MudTextField Label="@AppLocalization["Encryption Seed String"]" Disabled=true Value="@Encryption.Instance?.KeySeedString" />

        </SettingsField>


        <SettingsField>

            <MudButton ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

        </SettingsField>
    </MudForm>
    @code {
#nullable disable warnings
    AppSettings? settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = Context.AppSettings.FirstOrDefault();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }

    string processMemory
    {
        get
        {
            ApplicationInfo.RunningProcess.Refresh();
            return new ByteSize((double)ApplicationInfo.RunningProcess.WorkingSet64).ToString();
        }
    }

    [Inject] ApplicationManager applicationManager { get; set; }

   
    async Task RestartApplication()
    {
        if (await MessageService.Confirm("Are you sure you want to restart the application? All connected users will be disconnected.", "Restart Application"))
        {
            if (ApplicationInfo.InDemoMode && !UserStateService.CurrentUsername.Equals("admin", StringComparison.OrdinalIgnoreCase))
            {
                SnackBarService.Warning("Restarting the application is not allowed in the demo");
                return;
            }
            applicationManager.Restart();
        }
    }

    protected override void Save()
    {
        AuditLogger.System.SettingsChanged("Application", settings.GetChanges(originalSettings));
        base.Save();
    }

}
