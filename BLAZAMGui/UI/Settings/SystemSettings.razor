@inherits SettingsComponents
<MudText Typo="Typo.h4">@AppLocalization["System Settings"]</MudText>
<MudForm @onsubmit="Save">
    @if (settings != null)
    {
        <MudText Typo="Typo.h6">@AppLocalization["Manage Web Application"]</MudText>
        <SettingsField Label="@AppLocalization["Restart Web Application"]">

            <MudButton Color="Color.Error" Variant=Variant.Outlined OnClick=RestartApplication>@AppLocalization["Restart Web Application"]</MudButton>


        </SettingsField>
        <SettingsField Label="@AppLocalization["Google Analytics ID"]">
            <MudText>Set up a GA4 account and enter your tracking ID here to collect data on the usage of your installation.</MudText>
            <MudTextField Label="@AppLocalization["Google Analytics ID"]" @bind-Value="@settings.AnalyticsId" />

        </SettingsField>

        <SettingsField Label="@AppLocalization["Encryption Seed String"]">

            <MudTextField Label="@AppLocalization["Encryption Seed String"]" ReadOnly=true Value="@(ApplicationInfo.InDemoMode&&CurrentUser.Username=="Demo"?AppLocalization["Private"]:Encryption.Instance?.KeySeedString)" />

        </SettingsField>
    }


    <MudDivider Class="my-6" />
    <MudText Typo="Typo.h6">@AppLocalization["Data Collection Settings"]</MudText>




    <SettingsField Label="@AppLocalization["Send logs to developer"]">
        <MudText>
            We ask that you allow developer logging so we can quickly and transparently improve Blazam and to aid in our developement efforts.
        </MudText>
        <MudSwitch Label="@AppLocalization["Enabled"]"
                   Color="Color.Success"
                   @bind-Value="@settings.SendLogsToDeveloper" />

    </SettingsField>

    <SettingsField Label="@AppLocalization["Developer Analytics"]">
        <MudText>
            We ask that you allow developer analytics so we can understand how our app is used to focus our
            efforts on what our users think matters most.
        </MudText>
        <MudSwitch Label="@AppLocalization["Enabled"]"
                   Color="Color.Success"
                   @bind-Value="@settings.SendDeveloperAnalytics" />

    </SettingsField>

    <MudDivider Class="my-6" />
    <MudText Typo="Typo.h6">@AppLocalization["Logging"]</MudText>


    <SettingsField Label="@AppLocalization["Installation Id"]">

        <MudTextField ReadOnly=true Label="@AppLocalization["Installation Id"]" Value="@ApplicationInfo.InstallationId" />
    </SettingsField>

    <SettingsField Label=@AppLocalization["Logs"]>


        <MudLink Href="/download/logs" Target="Target.Blank">
            <MudButton Variant=Variant.Outlined Color="Color.Primary">Download Logs</MudButton>
        </MudLink>
        <MudText>Log Directory: @Loggers.LogPath</MudText>

    </SettingsField>



    <MudDivider Class="my-6" />
    <MudText Typo="Typo.h6">@AppLocalization["Resource Usage"]</MudText>


    <ProcessResourceUsage Process="@ApplicationInfo.RunningProcess" />

    <MudDivider Class="my-6" />
    <MudText Typo="Typo.h6">@AppLocalization["Jobs Monitor"]</MudText>

    <JobsMonitor />


    <SettingsField>

        <MudButton ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

    </SettingsField>
</MudForm>
@code {
#nullable disable warnings
    AppSettings? settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = Context.AppSettings.FirstOrDefault();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }

    string processMemory
    {
        get
        {
            ApplicationInfo.RunningProcess.Refresh();
            return new ByteSize((double)ApplicationInfo.RunningProcess.WorkingSet64).ToString();
        }
    }

    [Inject] ApplicationManager applicationManager { get; set; }


    async Task RestartApplication()
    {
        if (await MessageService.Confirm("Are you sure you want to restart the application? All connected users will be disconnected.", "Restart Application"))
        {
            if (ApplicationInfo.InDemoMode && !UserStateService.CurrentUsername.Equals("admin", StringComparison.OrdinalIgnoreCase))
            {
                SnackBarService.Warning("Restarting the application is not allowed in the demo");
                return;
            }
            applicationManager.Restart();
        }
    }

    protected override void Save()
    {
        AuditLogger.System.SettingsChanged("Application", settings.GetChanges(originalSettings));
        base.Save();
    }

}
