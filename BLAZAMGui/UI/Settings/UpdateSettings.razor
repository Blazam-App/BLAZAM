@using BLAZAM.Update;
@inherits SettingsComponents


<MudText Typo="Typo.h4">@AppLocalization["Update Settings"]</MudText>
<MudForm @onsubmit="Save">


    @if (settings != null)
    {

        <SettingsField Label="@AppLocalization["Update Branch"]">
            <MudSelect @bind-Value=@settings.UpdateBranch HelperText="The stable branch is the recommended branch. Choosing Nightly is only recommended for test installations. Dev is only for developers.">
                @foreach (var val in updateBranches)
                {
                    <MudSelectItem Value="@val">@val</MudSelectItem>
                }
            </MudSelect>



        </SettingsField>


        <SettingsField Label="@AppLocalization["Update"]">

            <FieldLabel>
                <MudText>
                    @AppLocalization["Update"]
                </MudText>
                <MudIconButton Color="Color.Primary"
                           OnClick=@(async()=>{await appUpdateComponent?.GetLatestUpdate();})
                           Icon="@Icons.Material.Filled.Refresh" />

            </FieldLabel>
            <ChildContent>

                <ManualApplicationUpdater @ref=appUpdateComponent />

            </ChildContent>


        </SettingsField>


        <SettingsField Label="@AppLocalization["Allow Auto Update"]">

            <MudSwitch @bind-Checked=@(settings.AutoUpdate) />

        </SettingsField>


        @if (settings?.AutoUpdate == true)
        {
            <SettingsField Label="@AppLocalization["Auto Update Time"]">

                <MudTimePicker HelperText="The time of each day to automatically apply an update."
                       @bind-Time="@settings.AutoUpdateTime" />


            </SettingsField>


        }


        <SettingsField>

            <MudButton Disabled="SaveDisabled" ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

        </SettingsField>
    }
</MudForm>
@code {
    ManualApplicationUpdater? appUpdateComponent;
    AppSettings? settings = new AppSettings();
    List<string> updateBranches = new() { ApplicationReleaseBranches.Stable, ApplicationReleaseBranches.Nightly, ApplicationReleaseBranches.Dev };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Context != null)
        {
            originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();
            settings = await Context.AppSettings.FirstOrDefaultAsync();

        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }




}

