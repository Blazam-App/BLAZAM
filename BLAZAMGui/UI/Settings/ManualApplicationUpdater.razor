@using BLAZAM.FileSystem;
@using BLAZAM.Update;
@inherits AppComponentBase

@if (ApplicationInfo.InDebugMode)
{

    <code>
        Working Directory: @ApplicationInfo.ApplicationRoot
    </code>
    <code>
        PID: @ApplicationInfo.RunningProcess.Id
    </code>
}
@if (AutoUpdateService.IsUpdatedScheduled)
{
    <MudAlert Class="mud-alert-filled-info">
        <MudText Typo="Typo.h6">@AppLocalization["Update Scheduled"]</MudText>
        <MudText>
            The application will be updated to version @AutoUpdateService.ScheduledUpdate?.Version at @AutoUpdateService.ScheduledUpdateTime
        </MudText>
    </MudAlert>
}
@if (LoadingData)
{
    <MudText>Checking for update..</MudText>

}


@{
    if (LatestAvailableVersion != null)
    {
        var value = updateStage;
        switch (updateStage)
        {
            case UpdateStage.Downloading:
                <MudText>Downloading Update...</MudText>
                @if (DownladProgress != null)
                {

                    <MudProgressLinear Value="@DownladProgress.FilePercentage">
                        @(DownladProgress?.CompletedBytes / 1024 / 1024)MB
                    </MudProgressLinear>
                }
                <MudButton Color=Color.Error OnClick=@(()=>{ LatestAvailableVersion.Cancel(); })>Cancel</MudButton>
                break;
            case UpdateStage.Staging:
                <MudText>Staging update, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />
                break;
            case UpdateStage.BackingUp:
                <MudText>Backing up current version, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />

                break;
            case UpdateStage.Applying:
                <MudText>Applying update, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />

                break;
            case UpdateStage.None:
            default:
                if ((LatestAvailableVersion != null && LatestAvailableVersion.Newer) || ApplicationInfo.InDebugMode)
                {
                    if (ApplicationInfo.InDebugMode && !LatestAvailableVersion?.Newer == true)
                    {
                        <h4>
                            Downgrade Available (Debug Mode)
                            <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" OnClick=@(async()=>{await CopyToClipboard(LatestAvailableVersion.UpdateCommand);}) />

                        </h4>
                    }
                    else
                    {

                        <h4>Update Available</h4>

                    }
                    <MudTimeline TimelineAlign="TimelineAlign.Default">
                        <MudTimelineItem Color="Color.Info" Size="Size.Small">
                            <ItemOpposite>
                                @{
                                    DateTime firstRelease = DateTime.Parse("March 4, 2023");
                                }
                                <MudText Color="Color.Info" Typo="Typo.h5">
                                    @firstRelease.ToString("MMMM d, yyyy")</MudText>
                            </ItemOpposite>
                            <ItemContent>
                                <MudCard Class="pa-3">
                                    <MudText Color="Color.Info" Typo="Typo.h6" GutterBottom="true">First Release</MudText>
                                    <MudText Class="pa-6">Blazam Beta 0.6.7 released.</MudText>
                                </MudCard>
                            </ItemContent>
                        </MudTimelineItem>
                        <MudTimelineItem Color="Color.Success" Size="Size.Small" TimelineAlign="TimelineAlign.End">
                            <ItemOpposite>
                                <MudText Color="Color.Success" Typo="Typo.h5">@ApplicationInfo.runningVersion.ReleaseDate.ToString("MMMM d, yyyy")</MudText>
                            </ItemOpposite>
                            <ItemContent>
                                <MudCard Class="pa-3">

                                    <MudText Color="Color.Success" Typo="Typo.h6" GutterBottom="true">Current Version</MudText>
                                    <MudText Class="pa-6">@ApplicationInfo.runningVersion</MudText>
                                </MudCard>
                            </ItemContent>
                        </MudTimelineItem>
                        <MudTimelineItem Color="Color.Error" Size="Size.Small">
                            <ItemOpposite>
                                <MudText Color="Color.Error" Typo="Typo.h5">@LatestAvailableVersion.Version.ReleaseDate.ToString("MMMM d, yyyy")</MudText>
                            </ItemOpposite>
                            <ItemContent>
                                <MudCard Class="pa-3">

                                    <MudText Color="Color.Error" Typo="Typo.h6" GutterBottom="true">Available Update</MudText>
                                    <MudExpansionPanels Elevation=0 DisableBorders=true>
                                        <MudExpansionPanel Text="@LatestAvailableVersion.Version.ToString()">
                                            <MudMarkdown OverrideHeaderTypo=ConvertHeaders Value="@LatestAvailableVersion.Release.ReleaseNotes" />
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                    <MudButton Class="mx-6" Variant=Variant.Filled Color=Color.Success OnClick="ApplyUpdate">Apply Update</MudButton>
                                    @if (ApplicationInfo.InDebugMode)
                                    {
                                        <MudButton Class="mx-6" Disabled=@(AutoUpdateService.IsUpdatedScheduled) OnClick=TestAutoUpdate Color="Color.Success">Test Auto Update</MudButton>

                                       
                                    }
                                </MudCard>
                                @* <AvailableUpdate Update=@LatestAvailableVersion OnApply="ApplyUpdate"/>*@
                            </ItemContent>
                        </MudTimelineItem>
                    </MudTimeline>

                    @if (AutoUpdateService.IsUpdatedScheduled)
                    {
                        <MudButton OnClick=@(()=>{AutoUpdateService.Cancel();}) Color="Color.Error">Cancel Auto Update</MudButton>
                    }
                }
                if (LatestAvailableVersion != null && !LatestAvailableVersion.Newer)
                {
                    <MudIcon Class="d-inline" Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                    <MudText Class="d-inline">Application is up to date</MudText>
                }
                break;

        }
    }
}




@code {
    ApplicationUpdate? LatestAvailableVersion { get; set; }

    UpdateStage updateStage = UpdateStage.None;

    FileProgress? DownladProgress { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetLatestUpdate();
    }
    public async Task GetLatestUpdate()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            LatestAvailableVersion = await UpdateService.GetLatestUpdate();
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }

    private Typo ConvertHeaders(Typo from)
    {
        switch (from)
        {
            case Typo.h1:
                return Typo.h3;

            case Typo.h2:
                return Typo.h4;
            case Typo.h3:
                return Typo.h5;
            case Typo.h4:
                return Typo.h6;

            case Typo.h5:
                return Typo.h6;

            case Typo.h6:
                return Typo.h6;
            default:
                return from;
        }
    }

    async Task ApplyUpdate()
    {
        if (LatestAvailableVersion == null)
        {
            SnackBarService.Error("Couldn't fetch updates.");
            return;
        }

        SnackBarService.Info("Update started. Downloading update...");

        updateStage = UpdateStage.Downloading;
        LatestAvailableVersion.DownloadPercentageChanged += UpdateDownloadPercentage;

        if (await LatestAvailableVersion.Download())
        {
            DownladProgress = null;
            LatestAvailableVersion.DownloadPercentageChanged -= UpdateDownloadPercentage;


            updateStage = UpdateStage.Staging;

            await InvokeAsync(StateHasChanged);
            if (await LatestAvailableVersion.Stage())
            {


                if (await MessageService.Confirm("Would you like to apply the update?"))
                {
                    updateStage = UpdateStage.Applying;


                    await InvokeAsync(StateHasChanged);

                    var output = await LatestAvailableVersion.Apply();
                    if (output != null)
                    {
                        SnackBarService.Success("Update started successfully. The web application will restart and update momentarily.");
                        if (ApplicationInfo.InDebugMode)
                        {
                            await MessageService.Info(output);

                        }
                    }




                    updateStage = UpdateStage.Applied;

                }
                updateStage = UpdateStage.None;

                await InvokeAsync(StateHasChanged);

            }
        }
        else
        {
            SnackBarService.Error("Update failed.");
            updateStage = UpdateStage.None;

        }
        updateStage = UpdateStage.None;

    }

    async void UpdateDownloadPercentage(FileProgress? progress)
    {

        DownladProgress = progress;
        await InvokeAsync(StateHasChanged);

    }

    void TestAutoUpdate()
    {
        if (LatestAvailableVersion != null)
            AutoUpdateService.ScheduleUpdate(DateTime.Now.TimeOfDay + TimeSpan.FromSeconds(60), LatestAvailableVersion);
    }


}