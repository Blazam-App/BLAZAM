@using BLAZAM.FileSystem;
@using BLAZAM.Update;
@inherits AppComponentBase

@if (ApplicationInfo.InDebugMode)
{

    <code>
        Working Directory: @ApplicationInfo.ApplicationRoot
    </code>
    <code>
        PID: @ApplicationInfo.RunningProcess.Id
    </code>
}
@if (AutoUpdateService.IsUpdatedScheduled)
{
    <MudAlert Class="mud-alert-filled-info">
        <MudText Typo="Typo.h6">@AppLocalization["Update Scheduled"]</MudText>
        <MudText>
            The application will be updated to version @AutoUpdateService.ScheduledUpdate?.Version at @AutoUpdateService.ScheduledUpdateTime
        </MudText>
    </MudAlert>
}
@if (LoadingData)
{
    <MudText>Checking for update..</MudText>

}


@{
    if (LatestAvailableVersion != null)
    {
        var value = updateStage;
        switch (updateStage)
        {
            case UpdateStage.Downloading:
                <MudText>Downloading Update...</MudText>
                @if (DownladProgress != null)
                {

                    <MudProgressLinear Value="@DownladProgress.FilePercentage">
                        @(DownladProgress?.CompletedBytes / 1024 / 1024)MB
                    </MudProgressLinear>
                }
                <MudButton Color=Color.Error OnClick=@(()=>{ LatestAvailableVersion.Cancel(); })>Cancel</MudButton>
                break;
            case UpdateStage.Staging:
                <MudText>Staging update, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />
                break;
            case UpdateStage.BackingUp:
                <MudText>Backing up current version, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />

                break;
            case UpdateStage.Applying:
                <MudText>Applying update, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />

                break;
            case UpdateStage.None:
            default:
                if ((LatestAvailableVersion != null && LatestAvailableVersion.Newer) || ApplicationInfo.InDebugMode)
                {
                    if (ApplicationInfo.InDebugMode && !LatestAvailableVersion?.Newer == true)
                    {
                        <h4>
                            Downgrade Available (Debug Mode)
                            <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" OnClick=@(async()=>{await CopyToClipboard(LatestAvailableVersion.UpdateCommand);}) />

                        </h4>
                    }
                    else
                    {

                        <h4>Update Available</h4>

                    }
                    <MudTimeline TimelineAlign="TimelineAlign.Default" TimelinePosition="TimelinePosition.Top">
                        @{
                            int i = 0;
                        }
                        @if (!ShowAllUpdates)
                        {
                            <MudTimelineItem Color="Color.Info" Size="Size.Small">
                                <ItemOpposite>
                                    <MudText Color="Color.Info" Typo="Typo.h5">@AppLocalization["Previous Versions"]</MudText>
                                </ItemOpposite>
                                <ItemContent>
                                    <MudCard Class="pa-3">

                              
                                                <MudButton Class="mx-6" OnClick="(()=>{ShowAllUpdates=true;})" Color="Color.Success">Show Previous Updates</MudButton>


                                          
                                    </MudCard>


                                </ItemContent>
                            </MudTimelineItem>
                            @foreach (var update in UpdateService.StableUpdates.Where(x=>x.Version.CompareTo(ApplicationInfo.RunningVersion)>0).OrderBy(x => x.Version))
                            {


                                <AvailableUpdate Update=@update OnApply="ApplyUpdate" Disabled=true Even=@(i%2==0) />

                                i++;

                            }

                        }
                        else
                        {
                             <MudTimelineItem Color="Color.Info" Size="Size.Small">
                                <ItemOpposite>
                                </ItemOpposite>
                                <ItemContent>
                                    <MudCard Class="pa-3">


                                        <MudButton Class="mx-6" OnClick="(()=>{ShowAllUpdates=false;})" Color="Color.Success">Hide Previous Updates</MudButton>



                                    </MudCard>


                                </ItemContent>
                            </MudTimelineItem>
                            @foreach (var update in UpdateService.StableUpdates.OrderBy(x => x.Version))
                            {


                                <AvailableUpdate Update=@update OnApply="ApplyUpdate" Disabled=true Even=@(i%2==0) />

                                i++;

                            }
                           
                        }
                     
                      
                    </MudTimeline>

                    @if (AutoUpdateService.IsUpdatedScheduled)
                    {
                        <MudButton OnClick=@(()=>{AutoUpdateService.Cancel();}) Color="Color.Error">Cancel Auto Update</MudButton>
                    }
                }
                if (LatestAvailableVersion != null && !LatestAvailableVersion.Newer)
                {
                    <MudIcon Class="d-inline" Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                    <MudText Class="d-inline">Application is up to date</MudText>
                }
                break;

        }
    }
}




@code {
    ApplicationUpdate? LatestAvailableVersion { get; set; }

    UpdateStage updateStage = UpdateStage.None;

    FileProgress? DownladProgress { get; set; } = null;

    private bool ShowAllUpdates { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetLatestUpdate();
    }
    public async Task GetLatestUpdate()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            LatestAvailableVersion = await UpdateService.GetUpdates();
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }

   

    async Task ApplyUpdate()
    {
        if (LatestAvailableVersion == null)
        {
            SnackBarService.Error("Couldn't fetch updates.");
            return;
        }

        SnackBarService.Info("Update started. Downloading update...");

        updateStage = UpdateStage.Downloading;
        LatestAvailableVersion.DownloadPercentageChanged += UpdateDownloadPercentage;

        if (await LatestAvailableVersion.Download())
        {
            DownladProgress = null;
            LatestAvailableVersion.DownloadPercentageChanged -= UpdateDownloadPercentage;


            updateStage = UpdateStage.Staging;

            await InvokeAsync(StateHasChanged);
            if (await LatestAvailableVersion.Stage())
            {


                if (await MessageService.Confirm("Would you like to apply the update?"))
                {
                    updateStage = UpdateStage.Applying;


                    await InvokeAsync(StateHasChanged);

                    var output = await LatestAvailableVersion.Apply();
                    if (output != null)
                    {
                        SnackBarService.Success("Update started successfully. The web application will restart and update momentarily.");
                        if (ApplicationInfo.InDebugMode)
                        {
                            await MessageService.Info(output);

                        }
                    }




                    updateStage = UpdateStage.Applied;

                }
                updateStage = UpdateStage.None;

                await InvokeAsync(StateHasChanged);

            }
        }
        else
        {
            SnackBarService.Error("Update failed.");
            updateStage = UpdateStage.None;

        }
        updateStage = UpdateStage.None;

    }

    async void UpdateDownloadPercentage(FileProgress? progress)
    {

        DownladProgress = progress;
        await InvokeAsync(StateHasChanged);

    }

    void TestAutoUpdate()
    {
        if (LatestAvailableVersion != null)
            AutoUpdateService.ScheduleUpdate(DateTime.Now.TimeOfDay + TimeSpan.FromSeconds(60), LatestAvailableVersion);
    }


}