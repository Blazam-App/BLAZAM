@using BLAZAM.FileSystem;
@using BLAZAM.Update;
@inherits AppComponentBase

@if (ApplicationInfo.InDebugMode)
{

    <code>
        Working Directory: @ApplicationInfo.ApplicationRoot
    </code>
    <code>
        PID: @ApplicationInfo.RunningProcess.Id
    </code>
}
@if (AutoUpdateService.IsUpdatedScheduled)
{
    <MudAlert Class="mud-alert-filled-info">
        <MudText Typo="Typo.h6">@SettingsLocalization["Update Scheduled"]</MudText>
        <MudText>
            The application will be updated to version @AutoUpdateService.ScheduledUpdate.Version at @AutoUpdateService.ScheduledUpdateTime
        </MudText>
    </MudAlert>
}
@if (LoadingData)
{
    <MudText>Checking for update..</MudText>

}


@{
    if (LatestAvailableVersion != null)
    {
        var value = updateStage;
        switch (updateStage)
        {
            case UpdateStage.Downloading:
                <MudText>Downloading Update...</MudText>
                @if (DownladProgress != null)
                {

                    <MudProgressLinear Value="@DownladProgress.FilePercentage">
                        @(DownladProgress?.CompletedBytes / 1024 / 1024)MB
                    </MudProgressLinear>
                }
                <MudButton Color=Color.Error OnClick=@(()=>{ LatestAvailableVersion.Cancel(); })>Cancel</MudButton>
                break;
            case UpdateStage.Staging:
                <MudText>Staging update, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />
                break;
            case UpdateStage.BackingUp:
                <MudText>Backing up current version, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />

                break;
            case UpdateStage.Applying:
                <MudText>Applying update, please wait a moment...</MudText>
                <MudProgressLinear Animated Striped />

                break;
            case UpdateStage.None:
            default:
                if ((LatestAvailableVersion != null && LatestAvailableVersion.Newer) || ApplicationInfo.InDebugMode)
                {
                    if (ApplicationInfo.InDebugMode && !LatestAvailableVersion.Newer)
                    {
                        <h4>
                            Downgrade Available (Debug Mode)
                            <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" OnClick=@(()=>{CopyToClipboard(LatestAvailableVersion.UpdateCommand);}) />

                        </h4>
                    }
                    else
                    {

                        <h4>Update Available</h4>

                    }
                    <MudStack Row=true Class="w-100">

                        <MudCard Class="mud-theme-primary">
                            <MudCardHeader Class="pb-0">Current Version</MudCardHeader>
                            <MudCardContent>
                                <MudText>@ApplicationInfo.RunningVersion</MudText>

                            </MudCardContent>
                        </MudCard>

                        <MudIcon class="align-middle" Icon="@Icons.Material.Filled.ArrowRightAlt" Size="Size.Large" />

                        <MudCard Class="mud-theme-info">
                            <MudCardHeader Class="pb-0">

                                <ChildContent>
                                    Available Version
                                </ChildContent>
                                <CardHeaderActions>
                                    <MudMenu Size=Size.Small Icon="@Icons.Material.Filled.MoreVert">
                                        <MudMenuItem OnClick="ShowReleaseNotes">View Release Notes</MudMenuItem>
                                    </MudMenu>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                @LatestAvailableVersion.Branch<br />
                                <MudText>@LatestAvailableVersion.Version</MudText>

                                @LatestAvailableVersion.Release.ReleaseTime?.ToLocalTime().DateTime<br />
                                <MudButton Disabled=@(AutoUpdateService.IsUpdatedScheduled) OnClick=TestAutoUpdate Color="Color.Success">Test Auto Update</MudButton><br />
                                <MudButton Color=Color.Success OnClick="ApplyUpdate">Apply Update</MudButton>


                            </MudCardContent>
                        </MudCard>

                    </MudStack>
                    @if (AutoUpdateService.IsUpdatedScheduled)
                    {
                        <MudButton OnClick=@(()=>{AutoUpdateService.Cancel();}) Color="Color.Error">Cancel Auto Update</MudButton>
                    }
                }
                else
                {
                    <MudText>Application is up to date</MudText>

                }
                break;

        }
    }
}

@if (Monitor.DatabaseUpdatePending)
{
    <MudText>A database update needs to be applied</MudText>
    <MudButton Color=Color.Primary OnClick="UpdateDB">Update</MudButton>
}
<AppModal Title=@(LatestAvailableVersion?.Version+" Release Notes") @ref="@_releaseNotesModal">
<ReleaseNotesModalContent Update="LatestAvailableVersion"/>
</AppModal>

@code {
    AppModal? _releaseNotesModal;
    ApplicationUpdate? LatestAvailableVersion { get; set; }

    UpdateStage updateStage = UpdateStage.None;

    FileProgress? DownladProgress { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        GetLatestUpdate();
    }
    public async Task GetLatestUpdate()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            LatestAvailableVersion = await UpdateService.GetLatestUpdate();
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }
    async Task ApplyUpdate()
    {
        SnackBarService.Info("Update started. Downloading update...");

        updateStage = UpdateStage.Downloading;
        LatestAvailableVersion.DownloadPercentageChanged += UpdateDownloadPercentage;

        if (await LatestAvailableVersion.Download())
        {
            DownladProgress = null;
            LatestAvailableVersion.DownloadPercentageChanged -= UpdateDownloadPercentage;


            updateStage = UpdateStage.Staging;

            await InvokeAsync(StateHasChanged);
            if (await LatestAvailableVersion.Stage())
            {


                if (await MessageService.Confirm("Would you like to apply the update?"))
                {
                    updateStage = UpdateStage.Applying;


                    await InvokeAsync(StateHasChanged);

                    var output = await LatestAvailableVersion.Apply();
                    if (output != null)
                    {
                        SnackBarService.Success("Update started successfully. The web application will restart and update momentarily.");

                    }
                    if (ApplicationInfo.InDebugMode)
                    {
                        await MessageService.Info(output);

                    }



                    updateStage = UpdateStage.Applied;

                }
                updateStage = UpdateStage.None;

                await InvokeAsync(StateHasChanged);

            }
        }
        else
        {
            SnackBarService.Error("Update failed.");
            updateStage = UpdateStage.None;

        }
        updateStage = UpdateStage.None;

    }
    void TestAutoUpdate()
    {
        if (LatestAvailableVersion != null)
            AutoUpdateService.ScheduleUpdate(DateTime.Now.TimeOfDay + TimeSpan.FromSeconds(30), LatestAvailableVersion);
    }
    async void UpdateDownloadPercentage(FileProgress? progress)
    {

        DownladProgress = progress;
        await InvokeAsync(StateHasChanged);

    }
    protected void UpdateDB()
    {
        Task.Run(async () =>
        {

            await InvokeAsync(StateHasChanged);
            if (await Context.ApplyDatabaseMigrations())
            {
            }

            await InvokeAsync(StateHasChanged);

        });
    }

    async Task ShowReleaseNotes()
    {
        _releaseNotesModal.Show();
        //MessageService.Info(LatestAvailableVersion.Release.ReleaseNotes, LatestAvailableVersion.Version + " Release Notes");
    }

}