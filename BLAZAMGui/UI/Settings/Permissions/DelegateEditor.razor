@using Microsoft.EntityFrameworkCore;

@inherits AppComponentBase
<MudText Typo="Typo.h3">Delegates  <AppDocumentationButton Page="/admin/permissions" /></MudText>
<MudText> Delegates are your approved application users. Only the users your define here, or users in the following Active Directory groups (or nested groups) will be allowed to log in to the application.</MudText>
<MudText> The access allowed to each delegate is controlled by the mapped access level.</MudText>

<MudStack Row=true>
    <MudTextField Placeholder="Filter Delegates"
                  @bind-Value="@DelegateFilter" />
    <MudSpacer />
    <MudButton Color=Color.Secondary
               OnClick="(()=>{trashModal.Show();})"><MudIcon Icon=@Icons.Material.Filled.RestoreFromTrash /></MudButton>
</MudStack>



@if (AllDelegates.Count > 0)
{
    var delegates = AllDelegates.Where(l => l.DeletedAt == null)@*.Where(l =>
  Directory.FindEntryBySID(l.DelegateSid).CanonicalName
  .StartsWith(DelegateFilter, StringComparison.OrdinalIgnoreCase) ||
  Directory.FindEntryBySID(l.DelegateSid).CanonicalName
  .Contains(DelegateFilter, StringComparison.OrdinalIgnoreCase))*@;
    @foreach (var pl in delegates)
    {
        <DelegateListItem Delegate="pl" Context="Context" DelegateDeleted="DelegatesChanged" />
    }
}

<MudButton Color=Color.Success OnClick="@(()=>{addGroupModal?.Show();})">
    @AppLocalization["Create New Delegation Target"]
</MudButton>

<AppModal @ref=@trashModal Title="Deleted Delegates">
    @foreach (var deleg in AllDelegates.Where(l => l.DeletedAt != null))
    {
        var model = Directory.FindEntryBySID(deleg.DelegateSid);
        <MudContainer>
            <b>@model?.ObjectType</b><br />
            <MudText>@model?.CanonicalName</MudText>
                <MudText>@deleg.DeletedAt</MudText>
                <MudButton Float="Float.End" Color="Color.Primary" OnClick="(async()=>{await RestoreDelegate(deleg);})">Restore</MudButton>

            </MudContainer>
    }
</AppModal>
<AppModal @ref=@addGroupModal
          Title="Add Delegate"
          YesText="Add">
    <AddPrivilegeLevelModalContent DelegateAdded=@(()=>{SnackBarService.Success("Delegate added"); DelegatesChanged();}) />
</AppModal>

@{

}
@code {
#nullable disable warnings
    string _DelegateFilter = "";
    string DelegateFilter
    {
        get => _DelegateFilter; set
        {
            if (_DelegateFilter == value) return;
            _DelegateFilter = value;
            InvokeAsync(StateHasChanged);
        }
    }
    AppModal? trashModal;
    AppModal? addGroupModal;
    List<PermissionDelegate> AllDelegates { get; set; } = new List<PermissionDelegate>();
    DbSet<PermissionDelegate> settings;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        settings = Context.PermissionDelegate;
        await RefreshDelegates();

        await InvokeAsync(StateHasChanged);

    }

    private async Task RefreshDelegates()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);

        AllDelegates.Clear();
        AllDelegates = await settings.ToListAsync();
        LoadingData = false;

        await InvokeAsync(StateHasChanged);

    }

    async Task RestoreDelegate(PermissionDelegate delegateToRestore)
    {
        delegateToRestore.DeletedAt = null;
        await Context.SaveChangesAsync();
        SnackBarService.Success("Delegate restored");
        if (AllDelegates.Where(l => l.DeletedAt != null).Count() < 1)
        {
            trashModal.Close();
        }
    }
    private async void DelegatesChanged()
    {

        await RefreshDelegates();

        await InvokeAsync(StateHasChanged);
    }

}
