@inherits AppModal
<MudDialog @ref="Modal">
    <MudText>Add Delegate</MudText>
    <AppCloseButton />
    <MudStack>
        <ADAutoComplete Label="User or Group" SearchObjectType="ActiveDirectoryObjectType.All"
        @bind-SelectedResult=@selectedDelegate
                        CustomResultsFilter="(result)=>result.ObjectType==ActiveDirectoryObjectType.User|| result.ObjectType==ActiveDirectoryObjectType.Group" />

        <MudSwitch T=bool Label="Super User" @bind-Value="@NewPermissionDelegate.IsSuperAdmin" Disabled=ApplicationInfo.inDemoMode />
        <MudText>Will have complete and total acceess to the application if enabled</MudText>

    </MudStack>
  

   




</MudDialog>
@code {


    IDirectoryEntryAdapter? selectedDelegate;
    [Parameter]
    public EventCallback DelegateAdded { get; set; }

    PermissionDelegate NewPermissionDelegate = new PermissionDelegate();
    private async void AddGroup()
    {
        try
        {
            if (Context == null) return;

            NewPermissionDelegate.DelegateSid = selectedDelegate?.SID;
            Context.PermissionDelegate.Add(NewPermissionDelegate);
            await Context.SaveChangesAsync();
            NewPermissionDelegate = new PermissionDelegate();
            Modal?.CloseAsync();
            await DelegateAdded.InvokeAsync();
        }
        catch (DbUpdateException ex)
        {
            switch (ex.InnerException?.HResult)
            {
                case -2146232060:
                    if (Context != null)
                    {
                        var conflictingDelegate = Context.PermissionDelegate.Where(pd => pd.DelegateSid == selectedDelegate.SID).FirstOrDefault();
                        if (conflictingDelegate != null)
                            if (conflictingDelegate.DeletedAt == null)
                                NotificationService.Error("That delegate already exists.");
                            else
                                NotificationService.Error("That delegate already exists. It has been deleted. Restore it from the trash.");
                    }
                    else
                        NotificationService.Error("That database connection was lost.");

                    break;
            }
        }
        catch (Exception ex)
        {

            Loggers.ActiveDirectoryLogger.Error("Error attempting to add delegate " + selectedDelegate.CanonicalName + " {@Error}",ex);
            NotificationService.Error("An unexpected error has occured.");
        }

    }
}