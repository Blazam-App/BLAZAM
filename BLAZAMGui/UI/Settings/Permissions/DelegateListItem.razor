@inherits ValidatedForm
<MudExpansionPanel Dense Text="">
    <TitleContent>
        <MudStack Row=true>
            <MudText Typo="Typo.h6">

                @Group?.CanonicalName
            </MudText>

            <MudSwitch Label="Super User Group" Checked="Level?.IsSuperAdmin" Disabled />
        </MudStack>


    </TitleContent>
    <ChildContent>
        <MudStack Row=true>



            <ADAutoComplete Label="@AppLocalization["Delgate Name"]"
                            SearchObjectType="ActiveDirectoryObjectType.All"
                            @bind-SelectedResult=@Group
                            CustomResultsFilter="(result)=>result.ObjectType==ActiveDirectoryObjectType.User|| result.ObjectType==ActiveDirectoryObjectType.Group" />
            @*<ADGroupAutoComplete @bind-SelectedGroup="@Group"/>*@





            <MudSwitch Label="Super User Group" Disabled=@(ApplicationInfo.InDebugMode && UserStateService.CurrentUsername !="admin") @bind-Checked="Level.IsSuperAdmin" />





            <MudButton VerticalAlignment="VerticalAlignment.Middle" @onclick="Save" Color="Color.Success">Save Changes</MudButton>
            <AppCloseButton VerticalAlignment="VerticalAlignment.Middle" @onclick="DeleteDelegate" Color="Color.Success" />
        </MudStack>


    </ChildContent>
</MudExpansionPanel>


@code {

    #nullable disable warnings
    IDirectoryEntryAdapter? Group;
    [Parameter]
    public PermissionDelegate Level { get; set; }
    [Parameter]
    public new IDatabaseContext Context { get; set; }

    [Parameter]
    public EventCallback DelegateDeleted{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Group = Directory.FindEntryBySID(Level.DelegateSid);
    }

    bool collapse1Visible = false;

    async Task DeleteDelegate()
    {
        Level.DeletedAt = DateTime.UtcNow;
        await Context.SaveChangesAsync();
        SnackBarService.Success("Permission Delegate removed.");
        DelegateDeleted.InvokeAsync();
    }
    private async void Save()
    {
        collapse1Visible = false;
        Level.DelegateSid = Group.SID;
        await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);
    }
}
