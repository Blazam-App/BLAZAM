@inherits ValidatedForm
<MudExpansionPanel Dense Text="">
    <TitleContent>
        <MudStack Row=true>
            <MudText Typo="Typo.h6">
                @Delegate.DelegateName

            </MudText>

            <MudSwitch T=bool
                Label="Super User Group"
                 Value="Delegate.IsSuperAdmin"
                 Disabled=true />
        </MudStack>


    </TitleContent>
    <ChildContent>
        <MudStack Row=true>



            <ADAutoComplete Label="@AppLocalization["Delgate Name"]"
                            SearchObjectType="ActiveDirectoryObjectType.All"
                            @bind-SelectedResult=@_delegateEntry
                            CustomResultsFilter="(result)=>result.ObjectType==ActiveDirectoryObjectType.User|| result.ObjectType==ActiveDirectoryObjectType.Group" />
            @*<ADGroupAutoComplete @bind-SelectedGroup="@Group"/>*@





            <MudSwitch T=bool
                       Label="Super User Group"
                       Disabled=@(ApplicationInfo.InDebugMode && UserStateService.CurrentUsername !="admin")
                       @bind-Value="Delegate.IsSuperAdmin" />





            <MudButton Variant="Variant.Outlined"
                       @onclick="Save"
                       Color="Color.Success">Save Changes</MudButton>
            <AppCloseButton @onclick="DeleteDelegate"
                            Color="Color.Success" />
        </MudStack>


    </ChildContent>
</MudExpansionPanel>


@code {

#nullable disable warnings
    IDirectoryEntryAdapter? _delegateEntry;
    [Parameter]
    public PermissionDelegate Delegate { get; set; }
    [Parameter]
    public new IDatabaseContext Context { get; set; }

    [Parameter]
    public EventCallback DelegateDeleted { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _delegateEntry = Directory.FindEntryBySID(Delegate.DelegateSid);
        if (_delegateEntry != null)
        {
            if (Delegate.DelegateName != _delegateEntry.CanonicalName)
            {
                Delegate.DelegateName = _delegateEntry.CanonicalName;
                var result = await Context.SaveChangesAsync();
            }
        }
        else
        {
            Delegate.DelegateName = ("(" + Delegate.DelegateSid.ToSidString() + ")").Trim();
            var result = await Context.SaveChangesAsync();
        }
    }


    async Task DeleteDelegate()
    {
        Delegate.DeletedAt = DateTime.UtcNow;
        await Context.SaveChangesAsync();
        SnackBarService.Success("Permission Delegate removed.");
        await DelegateDeleted.InvokeAsync();
    }
    protected async override void Save()
    {
        Delegate.DelegateSid = _delegateEntry.SID;
        await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);
    }
}
