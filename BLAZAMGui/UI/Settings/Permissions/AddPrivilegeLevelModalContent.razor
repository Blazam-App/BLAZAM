@inherits AppModalContent

<MudStack Row=true>
    
    <ADAutoComplete Label="User or Group" SearchObjectType="ActiveDirectoryObjectType.All"
                    @bind-SelectedResult=@selectedDelegate
                    CustomResultsFilter="@((result)=>{
return result.ObjectType==ActiveDirectoryObjectType.User|| result.ObjectType==ActiveDirectoryObjectType.Group;
})" />




    <DynamicMudInput HelperText="Will have complete and total acceess to the application if enabled"
                     Label="Super User"
                     @bind-Value="@NewPermissionDelegate.IsSuperAdmin"
                     Disabled=ApplicationInfo.InDemoMode />

</MudStack>


@code {

    IDirectoryEntryAdapter? selectedDelegate;
    [Parameter]
    public EventCallback DelegateAdded { get; set; }

    PermissionDelegate NewPermissionDelegate = new PermissionDelegate();
    public async void AddGroup()
    {
        try
        {
            if (Context == null) return;
            if (selectedDelegate !=null && Context.PermissionDelegate.Any(pd => pd.DelegateSid == selectedDelegate.SID))
            {
                var confilctingDelegate = Context.PermissionDelegate.Where(pd => pd.DelegateSid == selectedDelegate.SID).FirstOrDefault();
                if (confilctingDelegate != null)
                    if (confilctingDelegate.DeletedAt == null)
                        SnackBarService.Error("That delegate already exists.");
                    else
                        SnackBarService.Error("That delegate already exists. It has been deleted. Restore it from the trash.");
                return;
            }
            NewPermissionDelegate.DelegateSid = selectedDelegate.SID;
            Context.PermissionDelegate.Add(NewPermissionDelegate);
            await Context.SaveChangesAsync();
            NewPermissionDelegate = new PermissionDelegate();
            Modal?.Hide();
            await DelegateAdded.InvokeAsync();
            return;
        }
        
        catch (Exception ex)
        {

            Loggers.ActiveDirectryLogger.Error("Error attempting to add delegate " + selectedDelegate.CanonicalName);
            Loggers.ActiveDirectryLogger.Error(ex.Message, ex);
            SnackBarService.Error("An unexpected error has occured.");
        }
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Modal.OnYes = AddGroup;
    }

}