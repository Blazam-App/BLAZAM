@using System.Text.RegularExpressions;
@using BLAZAM.Database.Models.Templates;
@using Microsoft.Data.SqlClient;
@using Microsoft.EntityFrameworkCore;
@inherits ValidatedForm
@attribute [Authorize]
@if (DirectoryTemplate != null)
{
    <EditForm OnValidSubmit="SaveTemplate" Model="DirectoryTemplate">
        <MudStack>

            <MudSelectList T="DirectoryTemplate"
                       Clearable=true
                       Label="Parent Template"
                       Values="@otherTemplates"
                       Value="@DirectoryTemplate.ParentTemplate"
                       ValueChanged="@ParentTemplateChanged" />
            <MudTextField Label="@AppLocalization["Template Name"]"
                      @bind-Value=DirectoryTemplate.Name />

            <MudAutocomplete CoerceValue SearchFunc="SearchCategories"
                         @bind-Value=DirectoryTemplate.Category
                         Label="@AppLocalization["Template Category"]" />



            <MudCard>
            Variables:
            <MudStack Row=true>
                <code>{fn}</code>:First Name<br />
            </MudStack>
            <MudStack Row=true>

                <code>{fi}</code>:First Initial<br />
            </MudStack>
            <MudStack Row=true>
                <code>{mn}</code>:Middle Name<br />
            </MudStack>
            <MudStack Row=true>
                <code>{mi}</code>:Middle Initial<br />
            </MudStack>
            <MudStack Row=true>
                <code>{ln}</code>:Last Name<br />
            </MudStack>
            <MudStack Row=true>
                <code>{li}</code>:Last Initial<br />
            </MudStack>
            <MudStack Row=true>
                <code>{username}</code>:Username<br />
            </MudStack>
            <MudStack Row=true>
                <code>{AlphaNum[:u/l]}</code>:Random letter or number (optional force uppercase/lowercase)<br />
            </MudStack>
            <MudStack Row=true>
                <code>{Alpha[:u/l]}</code>:Random letter (optional force uppercase/lowercase)<br />
            </MudStack>
            <MudStack Row=true>
                <code>{Num}</code>:Random number<br />

            </MudStack>
            </MudCard>
            <Section Title="Account and Name">



            <MudElement Class="d-flex flex-wrap gap-5">


                @{
                        var usernameFromTemplate = GetParentOfValue(DirectoryTemplate.EffectiveUsernameFormula, template => template.UsernameFormula); ;
                    }
                    <TemplateOverride SourceTemplate="@usernameFromTemplate">
                        <MudTextField Label="Username Format"
                                  @bind-Value=DirectoryTemplate.EffectiveUsernameFormula />
                    </TemplateOverride>

                    @{
                        var displayNameFromTemplateName = GetParentOfValue(DirectoryTemplate.EffectiveDisplayNameFormula, template => template.DisplayNameFormula);
                    }
                    <TemplateOverride SourceTemplate="@displayNameFromTemplateName">
                        <MudTextField Label="Display Name Format"
                                  @bind-Value=DirectoryTemplate.EffectiveDisplayNameFormula />
                    </TemplateOverride>

                    @{
                        var passwordFromTemplateName = GetParentOfValue(DirectoryTemplate.EffectivePasswordFormula, template => template.PasswordFormula); ;
                    }
                    <TemplateOverride SourceTemplate="@usernameFromTemplate">
                        <MudTextField Label="Password"
                                  Placeholder="{AlphaNum}{Alpha:U}{Alpha:L}{Num}{Num}{Num}"
                                  @bind-Value=DirectoryTemplate.EffectivePasswordFormula />
                    </TemplateOverride>





                </MudElement>

            </Section>
            <Section Title="Fields">
                <MudCard>
                    Variables:
                    <MudStack Row=true>
                        All above in addition to
                    </MudStack>

                    <MudStack Row=true>
                        <code>{username}</code>:Username<br />
                    </MudStack>

                </MudCard>

                <MudDrawerContainer Class="mud-height-full" Style="min-height:200px">
                    <MudDrawer @bind-Open="@open" Elevation="0" Variant="@DrawerVariant.Persistent">
                        <MudStack Class="my-0 py-0">
                            @foreach (var field in fields.OrderBy(f => f.DisplayName))
                            {
                                @if (field.FieldName != "samaccountname" &&
                               field.FieldName != "userPrincipalName" &&

                               field.FieldName != "sn" &&
                               field.FieldName != "givenname" &&
                               field.FieldName != "middleName" &&
                               field.FieldName != "displayName" &&
                               field.FieldName != "cn" &&
                               field.FieldName != "site" &&
                               field.FieldName != "distinguishedName" &&
                               field.FieldName != "memberOf" &&
                               field.FieldName != "objectSID" &&
                               !DirectoryTemplate.InheritedFieldValues.Any(f => f.Field?.Equals(field) == true) &&
                               !DirectoryTemplate.InheritedFieldValues.Any(f => f.CustomField?.Equals(field) == true) &&
                               field.IsActionAppropriateForObject(DirectoryTemplate.ObjectType))
                                {
                                    <MudButton Class=" my-0" OnClick=@(()=>{
                                   if(field is ActiveDirectoryField adField){
                                   DirectoryTemplate.FieldValues.Add(new(){ Field=adField});
                                   }else if(field is CustomActiveDirectoryField customField){
                                   DirectoryTemplate.FieldValues.Add(new(){ CustomField=customField});
                                   }
                                   })> <MudText Color="Color.Tertiary">@field.DisplayName</MudText></MudButton>

                                }

                            }
                        </MudStack>
                    </MudDrawer>



                    <div class="d-flex justify-center align-center mud-height-full">
                        <MudStack>
                            <MudDataGrid Items="@DirectoryTemplate.InheritedFieldValues.OrderBy(fv => fv.FieldDisplayName)"
                                     Dense=true
                                     Striped=true
                                     Bordered=true
                                     Hover=true>

                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Fields</MudText>
                                    <MudSpacer />
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>{open=!open;})">Toggle Fields</MudButton>

                                </ToolBarContent>
                                <Columns>
                                    <TemplateColumn Title="Name">
                                        <CellTemplate Context="cellContext">
                                            @{
                                                var fromTemplateName = otherTemplates.Where(ot => ot.FieldValues.Contains(cellContext.Item)).FirstOrDefault();
                                            }
                                            <TemplateOverride SourceTemplate="@fromTemplateName">
                                                <MudText>@cellContext.Item.FieldDisplayName</MudText>

                                            </TemplateOverride>


                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn Title="Value">
                                        <CellTemplate Context="cellContext">
                                            <MudTextField T=string Value=cellContext.Item.Value
                                                      ValueChanged=@((newValue)=>{ValueChanged(newValue,cellContext.Item);}) />

                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn Title="Editable">
                                        <CellTemplate Context="cellContext">
                                            <MudCheckBox T=bool
                                                     Label="Editable"
                                                     Checked=cellContext.Item.Editable
                                                     CheckedChanged="@((newValue)=>{EditableChanged(newValue,cellContext.Item);})" />

                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn Title="Required">
                                        <CellTemplate Context="cellContext">
                                            <MudCheckBox T=bool
                                                     Label="Required"
                                                     Checked=cellContext.Item.Required
                                                     CheckedChanged="@((newValue)=>{RequiredChanged(newValue,cellContext.Item);})"
                                                     Disabled=@(!cellContext.Item.Editable) />

                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn>
                                        <CellTemplate Context="cellContext">
                                            @if (DirectoryTemplate.IsValueOverriden(cellContext.Item))
                                            {
                                                <MudIconButton DisableElevation=true
                                                       Color="Color.Dark"
                                                       Icon="@Icons.Material.Filled.Undo"
                                                       OnClick=@(async()=>{await RemoveField(cellContext.Item);}) />
                                            }
                                            else
                                            {
                                                <AppCloseButton Disabled=@(!DirectoryTemplate.FieldValues.Contains(cellContext.Item))
                                                        OnClick=@(async()=>{await RemoveField(cellContext.Item);}) />

                                            }

                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                            </MudDataGrid>

                        </MudStack>
                    </div>
                </MudDrawerContainer>

            </Section>

            <Section Title="Organizational Unit">
                @{
                    var ouTemplateSourceName = GetParentOfValue(DirectoryTemplate.EffectiveParentOU, template => template.ParentOU);
                }
                <TemplateOverride SourceTemplate="@ouTemplateSourceName">
                    <OUTreeView Label=@(AppLocalization["OU"]+": "+ SelectedOU?.CanonicalName)
                            StartRootExpanded=false
                            @bind-SelectedOU=@SelectedOU
                            @bind-StartingSelectedOU=@SelectedOU />
                    @if (!DirectoryTemplate.ParentOU.IsNullOrEmpty())
                    {
                        <MudIconButton DisableElevation=true
                               Class="d-inline-flex pa-0"
                               Style="vertical-align:top;"
                               Color="Color.Dark"
                               Icon="@Icons.Material.Filled.Undo"
                               OnClick=@(async()=>{DirectoryTemplate.ParentOU=null;}) />
                    }
                </TemplateOverride>





            </Section>
            <Section Title="Assigned Groups">


                @foreach (var group in DirectoryTemplate.InheritedAssignedGroupSids)
                {
                    
                        var groupFromTemplate = otherTemplates.Where(ot => ot.AssignedGroupSids.Contains(group)).FirstOrDefault();
                    <TemplateOverride SourceTemplate="@groupFromTemplate">
                        <AssignedTemplateGroup Group="group" />
                    </TemplateOverride>
                   
                }
                <MudStack Row=true>
                    <ADAutoComplete Label="@AppLocalization["Groups"]"
                                Multiple=true
                                @bind-SelectedResult="@SelectedGroup" />
                    <MudFab Size="Size.Small" StartIcon=@Icons.Material.Filled.Add
                        Color="Color.Primary"
                        OnClick="@(()=>{if(SelectedGroup!=null) AssignGroup(SelectedGroup as IADGroup);})" />
                </MudStack>

            </Section>

        </MudStack>

        @{
            string buttonText = "";
            @if (DirectoryTemplate.Id == 0)
            {
                buttonText = "Add this template";
            }
            else
            {
                buttonText = "Save this template";
            }
        }
        <MudButton Disabled=SaveDisabled Color="Color.Success" ButtonType="ButtonType.Submit">@buttonText</MudButton>
        @if (DirectoryTemplate.Id == 0)
        {
            <MudButton Color="Color.Warning" OnClick="@(()=>{ DirectoryTemplate=new();})">Cancel</MudButton>

        }
        @{
            var test = "test";
        }
    </EditForm>
}
@code {
    protected string groupText;
    protected bool open;
    protected bool _usernamePopoverOpen;
    protected bool _displayNamePopoverOpen;
    protected bool _passwordPopoverOpen;
    protected bool _ouPopoverOpen;
#nullable disable warnings
    protected bool ouCollapseVisible = true;
    //Validations? validations;
    protected List<IActiveDirectoryField> fields = new();
    protected List<TemplateVariable> usernameVariables = new List<TemplateVariable>()
        {
            new TemplateVariable()
            {
                DisplayName = "First Name",
                Value = "{fn}"
            },
            new TemplateVariable()
            {
                DisplayName = "First Initial",
                Value = "{fi}"
            },
            new TemplateVariable()
            {
                DisplayName = "Middle Name",
                Value = "{mn}"
            },
            new TemplateVariable()
            {
                DisplayName = "Middle Initial",
                Value = "{mi}"
            },
            new TemplateVariable()
            {
                DisplayName = "Last Name",
                Value = "{ln}"
            },
            new TemplateVariable()
            {
                DisplayName = "Last Initial",
                Value = "{li}"
            },
        };
    protected List<string> selectedUsernameFormatValues { get; set; } = new();
    public DirectoryTemplate _template;
    public List<DirectoryTemplate> otherTemplates = new();
    [Parameter]
    public DirectoryTemplate DirectoryTemplate
    {
        get => _template;
        set
        {
            if (_template == value)
                return;
            _template = value;
            LoadData();
            DirectoryTemplateChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<DirectoryTemplate> DirectoryTemplateChanged { get; set; }
    protected async Task AssignGroup(IADGroup? group)
    {
        var existing = await Context.DirectoryTemplateGroups.Where(g => g.GroupSid == group.SID.ToSidString()).FirstOrDefaultAsync();
        if (existing == null)
            existing = new DirectoryTemplateGroup()
                {
                    GroupSid = group.SID.ToSidString()
                };
        DirectoryTemplate.AssignedGroupSids.Add(existing);
    }
    protected async Task LoadData()
    {
        if (Context == null)
            await OnInitializedAsync();
        otherTemplates = await Context.DirectoryTemplates.Where(t => !t.Equals(DirectoryTemplate)).ToListAsync();
        otherTemplates.Prepend(null);
        var matching = await Context.DirectoryTemplates.Where(dt => dt.Id == DirectoryTemplate.Id).FirstOrDefaultAsync();
        if (matching != null)
            _template = matching;
        if (!DirectoryTemplate.ParentOU.IsNullOrEmpty())
            SelectedOU = (await Directory.OUs.FindOuByStringAsync(DirectoryTemplate.ParentOU)).FirstOrDefault();
        //if (SelectedOU == null)
        //{
        //    SelectedOU = await Directory.OUs.GetApplicationRootOU();
        //}
        fields = await Context.ActiveDirectoryFields.Cast<IActiveDirectoryField>().ToListAsync();
        fields.AddRange(await Context.CustomActiveDirectoryFields.Where(cf => cf.DeletedAt == null).Cast<IActiveDirectoryField>().ToListAsync());
        RefreshGroups();
        await InvokeAsync(StateHasChanged);
    }

    protected void ValueChanged(string? newValue, DirectoryTemplateFieldValue fieldValue)
    {
        var fieldToModify = GetFieldToEdit(fieldValue);
        fieldToModify.Value = newValue;
    }

    private DirectoryTemplateFieldValue GetFieldToEdit(DirectoryTemplateFieldValue fieldValue)
    {
        if (!DirectoryTemplate.FieldValues.Contains(fieldValue))
        {
            DirectoryTemplate.FieldValues.Add((DirectoryTemplateFieldValue)fieldValue.Clone());
        }

        var fieldToModify = DirectoryTemplate.FieldValues.Where(fv => (fv.Field != null && fv.Field.Equals(fieldValue.Field))
        || (fv.CustomField != null && fv.CustomField.Equals(fieldValue.CustomField))).FirstOrDefault();
        return fieldToModify;
    }

    protected void EditableChanged(bool newValue, DirectoryTemplateFieldValue fieldValue)
    {
        var fieldToModify = GetFieldToEdit(fieldValue);
        fieldToModify.Editable = newValue;
    }

    protected void RequiredChanged(bool newValue, DirectoryTemplateFieldValue fieldValue)
    {
        var fieldToModify = GetFieldToEdit(fieldValue);
        fieldToModify.Required = newValue;
    }

    protected void ParentTemplateChanged(DirectoryTemplate parent)
    {
        var templateCursor = parent;
        while (templateCursor.ParentTemplate != null)
        {
            templateCursor = templateCursor.ParentTemplate;
            if (templateCursor.Equals(DirectoryTemplate))
            {
                SnackBarService.Warning("Circular inheritance detected!");
                return;
            }

        }
        DirectoryTemplate.ParentTemplate = parent;
        DirectoryTemplate.ParentTemplateId = parent.Id;
    }

    protected IADOrganizationalUnit SelectedOU;
    protected IDirectoryEntryAdapter SelectedGroup;
    protected List<IDirectoryEntryAdapter> TemplateGroups = new();
    protected async Task<IEnumerable<string?>> SearchCategories(string? searchTerm)
    {
        var categories = await Context.DirectoryTemplates.Select(t => t.Category).Distinct().ToListAsync();
        if (searchTerm.IsNullOrEmpty())
            return categories;
        return categories.Where(s => s.Contains(searchTerm) || s.Equals(searchTerm));
    }

    protected async Task RemoveField(DirectoryTemplateFieldValue field)
    {
        DirectoryTemplate.FieldValues.Remove(field);
        await InvokeAsync(StateHasChanged);
    }

    protected void RefreshGroups()
    {
        TemplateGroups.Clear();
        if (DirectoryTemplate != null)
        {
            foreach (var sid in DirectoryTemplate.AssignedGroupSids)
            {
                var temp = Directory.Groups.FindGroupBySID(sid.GroupSid);
                if (temp != null)
                    TemplateGroups.Add(temp);
            }
        }
    }

    protected async Task SaveTemplate()
    {
        if (Context == null)
            throw new ApplicationException("Database not available");
        DirectoryTemplate.ParentOU = SelectedOU.DN;


        if (DirectoryTemplate.Id == 0)
        {
            try
            {
                await Context.DirectoryTemplates.AddAsync(DirectoryTemplate);
                var result = await Context.SaveChangesAsync();
                if (result > 0)
                {
                    SnackBarService.Success("", DirectoryTemplate.Name + " was added.");
                    // DirectoryTemplate = new();
                }
            }
            catch (DbUpdateException ex)
            {
                switch (ex.InnerException?.HResult)
                {
                    case -2146232060:
                        SnackBarService.Error("Each template must be uniquely named.", "Duplicate Template Name");
                        break;
                }
            }
            catch (SqlException ex)
            {
                Loggers.DatabaseLogger.Error("Error attempting to save creation template " + _template.Name);
                Loggers.DatabaseLogger.Error(ex.Message, ex);
            }
        }
        else
        {
            var result = await Context.SaveChangesAsync();
            if (result > 0)
            {
                SnackBarService.Success("Template changes saved");
            }
            else
            {
                SnackBarService.Warning("No changes");
            }
        }
    }

    private DirectoryTemplate GetParentOfValue(string value, Func<DirectoryTemplate, string?> valueSelector)
    {
        var templateCursor = DirectoryTemplate;
        while (templateCursor.ParentTemplate != null)
        {
            templateCursor = templateCursor.ParentTemplate;
            if (valueSelector.Invoke(templateCursor) != null && valueSelector.Invoke(templateCursor).Equals(value))
                return templateCursor;
        }
        return null;
    }

    public class TemplateVariable
    {
        public string? DisplayName { get; set; }

        public string? Value { get; set; }
    }
}

