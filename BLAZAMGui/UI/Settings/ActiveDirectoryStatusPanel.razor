@using System.DirectoryServices;
@inherits AppComponentBase
<MudCard Class="ma-5 mx-auto pa-3">
    <MudCardHeader>
        <MudText Class="w-100" Align="Align.Center" Typo="@Typo.h6">
            @AppLocalization["Active Directory Connection Status"]
        </MudText>
    </MudCardHeader>

    <MudGrid Spacing="0" Class="mx-auto mud-container-maxwidth-xs">
        <MudItem xs="8">
            @AppLocalization["Server Port Open"]
        </MudItem>
        <MudItem xs="4">
            <StatusCheck Status="_portStatus" />
        </MudItem>

        <MudItem xs="8">
            @AppLocalization["Credentials OK"]

        </MudItem>
        <MudItem xs="4">
            <StatusCheck Status="_credStatus" />
        </MudItem>

        <MudItem xs="8">
            @AppLocalization["Connected"]
        </MudItem>
        <MudItem xs="4">
            <StatusCheck Status="Directory.Status==DirectoryConnectionStatus.OK" />
        </MudItem>


        <MudItem xs="8">
            @AppLocalization["Connection Type"]
        </MudItem>
        <MudItem xs="4">
            <StatusCheck Status=@GetConnectionTypeStatus()
                         Text="@GetConnectionType()" />
        </MudItem>
    </MudGrid>
    @if (showProgress)
    {
        <MudStack Row=true>
            <MudProgressLinear Indeterminate=true />

        </MudStack>
    }

</MudCard>

@code {
    #nullable disable warnings

    [Parameter]
    public EventCallback DirectoryConnected { get; set; }

    bool _monitoring = false;
    bool _portStatus;
    bool _credStatus;
    bool showProgress = true;
    System.DirectoryServices.ActiveDirectory.Domain _domain;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ResetStatus();
        Directory.OnStatusChanged += ((state) => { UpdateStatus(state); });
        UpdateStatus(null);

    }
    public override void Dispose()
    {
        base.Dispose();
        _monitoring = false;
    }

    public void ResetStatus()
    {
        //Directory = DirectoryFactory.CreateActiveDirectoryContext();
        Directory.ConnectAsync();
        _portStatus = false;
        _credStatus = false;
        showProgress = true;
        StateHasChanged();
    }


    public async void UpdateStatus(object? state)
    {
        await Task.Run(async () =>
        {
            if (_monitoring == false)
            {
                _monitoring = true;
                while (_monitoring == true)
                {

                    if (Directory.Status == DirectoryConnectionStatus.Connecting)
                    {
                        showProgress = true;
                        await InvokeAsync(StateHasChanged);

                    }

                    if (Directory.PortOpen)
                    {
                        _portStatus = true;
                        await InvokeAsync(StateHasChanged);
                        if (Directory.Status == DirectoryConnectionStatus.OK)
                        {
                            _credStatus = true;

                            showProgress = false;
                            // Directory.DomainControllers.ForEach(async dc =>
                            // {
                            //     try
                            //     {
                            //         if (dc.Domain != null)
                            //         {
                            //             if (dc.Domain.DomainMode != null)
                            //             {
                            //                 _domain = dc.Domain;
                            //             }
                            //         }
                            //     }catch(Exception ex)
                            //     {
                            //         Loggers.ActiveDirectryLogger.Information("Unable to contact domain from domain controller. {@Error}", ex);
                            //     }
                            // });

                            await InvokeAsync(DirectoryConnected.InvokeAsync);

                        }
                        else
                        {
                            _credStatus = false;
                        }
                    }
                    else
                    {
                        _portStatus = false;
                    }


                    if (Directory.Status == DirectoryConnectionStatus.Connecting)
                    {
                        showProgress = true;

                    }
                    else
                    {

                        showProgress = false;
                    }

                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(10000);
                }
            }

        });

    }
    private bool? GetConnectionTypeStatus()
    {
        if (Directory.Status != DirectoryConnectionStatus.OK) return false;
        return Directory.AppRootDirectoryEntry != null && (
                         Directory.AppRootDirectoryEntry.AuthenticationType.Equals(AuthenticationTypes.Encryption) ||
                         Directory.AppRootDirectoryEntry.AuthenticationType.Equals(AuthenticationTypes.SecureSocketsLayer) ||
                         Directory.AppRootDirectoryEntry.AuthenticationType.Equals(AuthenticationTypes.Secure));
    }
    private string? GetConnectionType()
    {

        if (Directory.Status != DirectoryConnectionStatus.OK) return null;
        return Directory.AppRootDirectoryEntry?.AuthenticationType.ToString();
    }
}
