@using System.DirectoryServices;
@inherits AppComponentBase
<MudCard>
    <MudCardHeader>
        Active Directory Connection Status
    </MudCardHeader>

        <MudStack Row=true>
                Server Port Open
                <StatusCheck Status="_portStatus" />

        </MudStack>
             <MudStack Row=true>

                Credentials OK
                <StatusCheck Status="_credStatus" />

        </MudStack>
             <MudStack Row=true>
                Encrypted Connection
                @if (!_encryptedStatus)
                {
                    <br />
                    <Help>You may need to install the Active Directry CA</Help>
                }
                <StatusCheck Status="_encryptedStatus" />

  
        </MudStack>
    @if (_credStatus)
    {
        <MudStack>
            <MudStack Row=true>
                <MudText>Domain</MudText>
                <MudText>@Directory.DomainControllers.First().Domain.Name</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Domain Mode</MudText>
                <MudText>@Directory.DomainControllers.First().Domain.DomainMode</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Domain Level</MudText>
                <MudText>@Directory.DomainControllers.First().Domain.DomainModeLevel</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Primary Domain Controller</MudText>
                <MudText>@Directory.DomainControllers.First().Domain.PdcRoleOwner</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Domain</MudText>
                <MudText>@Directory.DomainControllers.First().Domain.Forest.RootDomain.Name</MudText>
            </MudStack>
        </MudStack>
    }
    </MudCard>

@code {
#nullable disable warnings

    [Parameter]
    public EventCallback DirectoryConnected { get; set; }

    bool _monitoring = false;
    bool _encryptedStatus;
    bool _portStatus;
    bool _credStatus;
    bool showProgress = true;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Monitor.OnDirectoryConnectionChanged += ((state) => { UpdateStatus(state); });
        UpdateStatus(null);

    }




    private async void UpdateStatus(object? state)
    {
        await Task.Run(async () =>
        {
            if (_monitoring == false)
            {
                _monitoring = true;
                while (_monitoring == true)
                {
                    if (Directory.Status == DirectoryConnectionStatus.Connecting)
                    {
                        showProgress = true;
                        await InvokeAsync(StateHasChanged);

                    }

                    if (Directory.PortOpen)
                    {
                        _portStatus = true;
                        if (Directory.Status == DirectoryConnectionStatus.OK)
                        {
                            _credStatus = true;
                            if ((Directory.AppRootDirectoryEntry?.AuthenticationType & AuthenticationTypes.Signing) == AuthenticationTypes.Signing ||
                        (Directory.AppRootDirectoryEntry?.AuthenticationType | AuthenticationTypes.Encryption) == AuthenticationTypes.Encryption)
                            {
                                _encryptedStatus = true;
                            }
                            showProgress = false;

                            await InvokeAsync(DirectoryConnected.InvokeAsync);

                        }
                        else
                        {
                            _credStatus = false;
                        }
                    }
                    else
                    {
                        _portStatus = false;
                    }


                    if (Directory.Status == DirectoryConnectionStatus.Connecting)
                    {
                        showProgress = true;

                    }
                    else
                    {

                        showProgress =false;
                    }

                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(1000);
                }
            }

        });

    }


}
