@using System.DirectoryServices;
@inherits AppComponentBase
<MudCard>
    <MudCardHeader>
        Active Directory Connection Status
    </MudCardHeader>
    @if (showProgress)
    {
        <MudStack Row=true>
            <MudProgressLinear Indeterminate=true />

        </MudStack>
    }
   
        <MudStack Row=true>
                Server Port Open
                <StatusCheck Status="_portStatus" />

        </MudStack>
             <MudStack Row=true>

                Credentials OK
                <StatusCheck Status="_credStatus" />

        </MudStack>
             <MudStack Row=true>
                Connected

                <StatusCheck Status="Directory.Status==DirectoryConnectionStatus.OK" />

  
        </MudStack>
    @*
    @if (_credStatus)
    {
       var firstDC = Directory.DomainControllers.FirstOrDefault();
        if(firstDC!=null){
            <MudStack>
            <MudStack Row=true>
                <MudText>Domain</MudText>
                <MudText>@firstDC.Domain.Name</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Domain Mode</MudText>
                <MudText>@firstDC.Domain.DomainMode</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Domain Level</MudText>
                <MudText>@firstDC.Domain.DomainModeLevel</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Primary Domain Controller</MudText>
                <MudText>@firstDC.Domain.PdcRoleOwner</MudText>
            </MudStack>

            <MudStack Row=true>
                <MudText>Domain</MudText>
                <MudText>@Directory.DomainControllers.FirstOrDefault()?.Domain.Forest.RootDomain.Name</MudText>
            </MudStack>
            </MudStack> 
        }
        else
        {
            <MudText>Could not reach Domain Controllers directly from application server. Please check DNS.</MudText>
        }

    }
    *@
    </MudCard>

@code {
    #nullable disable warnings

    [Parameter]
    public EventCallback DirectoryConnected { get; set; }

    bool _monitoring = false;
    bool _encryptedStatus;
    bool _portStatus;
    bool _credStatus;
    bool showProgress = true;
    System.DirectoryServices.ActiveDirectory.Domain _domain;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ResetStatus();
        Directory.OnStatusChanged += ((state) => { UpdateStatus(state); });
        UpdateStatus(null);

    }
    public override void Dispose()
    {
        base.Dispose();
        _monitoring = false;
    }

    public void ResetStatus()
    {
        //Directory = DirectoryFactory.CreateActiveDirectoryContext();
        //Directory.ConnectAsync();
        _portStatus = false;
        _credStatus = false;
        showProgress = true;
        StateHasChanged();
    }


    public async void UpdateStatus(object? state)
    {
        await Task.Run(async () =>
        {
            if (_monitoring == false)
            {
                _monitoring = true;
                while (_monitoring == true)
                {

                    if (Directory.Status == DirectoryConnectionStatus.Connecting)
                    {
                        showProgress = true;
                        await InvokeAsync(StateHasChanged);

                    }

                    if (Directory.PortOpen)
                    {
                        _portStatus = true;
                        await InvokeAsync(StateHasChanged);
                        if (Directory.Status == DirectoryConnectionStatus.OK)
                        {
                            _credStatus = true;

                            showProgress = false;
                            // Directory.DomainControllers.ForEach(async dc =>
                            // {
                            //     try
                            //     {
                            //         if (dc.Domain != null)
                            //         {
                            //             if (dc.Domain.DomainMode != null)
                            //             {
                            //                 _domain = dc.Domain;
                            //             }
                            //         }
                            //     }catch(Exception ex)
                            //     {
                            //         Loggers.ActiveDirectryLogger.Information("Unable to contact domain from domain controller. {@Error}", ex);
                            //     }
                            // });

                            await InvokeAsync(DirectoryConnected.InvokeAsync);

                        }
                        else
                        {
                            _credStatus = false;
                        }
                    }
                    else
                    {
                        _portStatus = false;
                    }


                    if (Directory.Status == DirectoryConnectionStatus.Connecting)
                    {
                        showProgress = true;

                    }
                    else
                    {

                        showProgress =false;
                    }

                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(10000);
                }
            }

        });

    }


}
