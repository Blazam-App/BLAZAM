@inherits MudSelect<T>
@typeparam T
<MudMenu Dense=true
         Style="@(Style+" min-width:100px;")"
         FullWidth=true
         @ref=_selectMenu
         Class=@(Class+" mud-width-full")
         ListClass="minw-max"
         PopoverClass="minw-max">
    <ActivatorContent>
        <MudField Label="@Label">
            <MudStack Row=true>
                @if (SelectedValues.Count() > 0)
                {
                    <MudElement>
                        @Text
                    </MudElement>
                }
                else
                {
                    <MudElement Class="grey-text">
                        @Placeholder
                    </MudElement>
                }
                <MudSpacer />
                <MudIcon Class="align-end" Icon="@(_selectMenu?.IsOpen==true?Icons.Material.Filled.ArrowDropUp:Icons.Material.Filled.ArrowDropDown)" />
            </MudStack>
        </MudField>
    </ActivatorContent>
    <ChildContent>
        @if (Values != null && Values.Count() > 0)
        {
            @foreach (var val in Values)
            {
                <MudMenuItem Style="min-width:max-content;"
                             Class="py-0 px-3 ma-0"
                             OnClick="@(()=>{ToggleSelected(val);})"
                             AutoClose=@(!MultiSelection)>
                    <MudStack Class="pa-0 ma-0"
                              Row=true
                              Style="min-width:max-content;">
                        @if (MultiSelection)
                        {
                            <MudCheckBox T=bool
                                         Value="SelectedValues.Contains(val)" />
                        }
                        @if (ToStringFunc != null)
                        {
                            <MudText Class="align-middle" Style="min-width:max-content;min-height:24px;">
                                @ToStringFunc.Invoke(val)
                            </MudText>
                        }
                        else
                        {
                            <MudText Class="align-middle" Style="min-width:max-content;min-height:24px;">
                                @val?.ToString()
                            </MudText>
                        }
                    </MudStack>
                </MudMenuItem>
            }

        }
    </ChildContent>
</MudMenu>


@code {
    private MudMenu? _selectMenu;
    [Parameter]
    public Color Color { get; set; }
    private IEnumerable<T> _values;
    [Parameter]
    public IEnumerable<T> Values
    {
        get => _values; set
        {
            _values = value;
            Text = "";
            if (_values != null && _values.Count() > 0)
            {
                foreach (var item in _values)
                {
                    if (item != null)
                    {
                        Text += ToStringFunc.Invoke(item) + ", ";
                    }
                }
                Text = Text.Substring(0, Text.Length - 2);
            }

        }
    }

    private void ToggleSelected(T item)
    {
        if (SelectedValues.Contains(item))
        {
            @if (MultiSelection)
            {
                SelectedValues = SelectedValues.Where(x => !x.Equals(item));
                SelectedValuesChanged.InvokeAsync(SelectedValues);

            }

        }
        else
        {
            @if (MultiSelection)
            {
                SelectedValues = SelectedValues.Append(item);
                SelectedValuesChanged.InvokeAsync(SelectedValues);

            }
            else
            {
                SelectedValues = new List<T>() { item };
                Value = item;
                ValueChanged.InvokeAsync(item);

            }
        }





    }
}

