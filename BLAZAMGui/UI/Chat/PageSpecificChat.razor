@inherits AppComponentBase

<Audio Src="/audio/messagePop.mp3" @bind-Playing=@playingPop />
<Audio Src="/audio/bell.wav" @bind-Playing=@playingBell />
@if (AlwaysShowChatButton || ChatMessages[ChatUri].Count > 0)
{
    <ChatButton ChatMessages=ChatMessages[ChatUri] OnClick="@(()=>{_chatOpen=!_chatOpen;})" />
}
@if (AlwaysShowPageViewersButton || (ShowPageViewersButton && Viewers.ContainsKey(ChatUri) && Viewers[ChatUri].Count > 1))
{
    var otherViewers = Viewers[ChatUri].Where(us => !us.Equals(currentUserState));
    <OtherViewersButton ChatMessages=ChatMessages[ChatUri]
                    OnClick=@(()=>{_chatOpen=true;})
                    OtherViewers="otherViewers" />

}

<MudPopover Style="width:300px" Open="@_chatOpen" Fixed="true" Class="px-1 pt-4">
    <MudContainer class="d-flex flex-column">
        <MudText Typo="Typo.h6">Chat</MudText>

        <MudStack Style="height:300px;" Class="overflow-y-auto">
            @foreach (var message in ChatMessages[ChatUri])
            {
                if (!message.SeenBy.Contains(currentUserState.Preferences))
                    message.SeenBy.Add(currentUserState.Preferences);
                if (message.User.Username != currentUserState.Username)
                {
                    <MudStack Class="w-100">
                        <MudStack Row="true">
                            <MudChip Size=Size.Small Color="Color.Secondary">@message.User.Username</MudChip>
                            <MudText Class="align-middle">@message.Message</MudText>
                        </MudStack>
                        <MudText Class=@("w-max") Typo="Typo.caption">@message.Timestamp.ToLocalTime().ToString()</MudText>

                    </MudStack>
                }
                else
                {
                    <MudStack Justify="Justify.FlexEnd" Class="w-100">
                        <MudStack Justify="Justify.FlexEnd" Row="true">
                            <MudText Class="align-middle">@message.Message</MudText>

                            <MudChip Size=Size.Small
                             Color="Color.Tertiary">
                                @message.User.Username
                            </MudChip>

                        </MudStack>
                        <MudText Class=@("w-max align-end") Typo="Typo.caption">@message.Timestamp.ToLocalTime().ToString()</MudText>

                    </MudStack>

                }

            }
        </MudStack>
        <MudStack Row=true>

            <MudTextField @ref=messageTextField
                          AutoFocus=true
                          autocomplete="off"
                          Adornment=Adornment.Start
                          AdornmentIcon="@Icons.Material.Filled.Message"
                          Immediate="true"
                          OnKeyUp=@(async(args)=>{if(args.Key.ToLower()=="enter") await PostMessage();})
                          T="string"
                          @bind-Text=@draftMessage />

            <MudIconButton OnClick=@PostMessage
                           Icon="@Icons.Material.Filled.Send"
                           ButtonType="ButtonType.Submit" Class="align-middle" />

        </MudStack>
        <MudButton OnClick="@(()=>{_chatOpen=!_chatOpen;})"
                   Class="ml-auto mr-n3 mb-1"
                   Color="Color.Error">
            Close
        </MudButton>

    </MudContainer>
</MudPopover>

@code {

    bool _chatOpen;

    [Parameter]
    public bool ShowPageViewersButton { get; set; } = true;
    [Parameter]
    public bool AlwaysShowChatButton { get; set; }
    [Parameter]
    public bool AlwaysShowPageViewersButton { get; set; }
    /// <summary>
    /// Set's predefined page for this chat display
    /// </summary>

    [Parameter]
    public string ChatUri { get; set; }
    IApplicationUserState currentUserState;

    /// <summary>
    /// A single system wide singleton static dictionary of every
    /// viewer on every page this component is placed
    /// </summary>
    static Dictionary<string, List<IApplicationUserState>> Viewers = new Dictionary<string, List<IApplicationUserState>>();

    delegate void CallbackEvent();
    static CallbackEvent ViewersChanged;

    MudTextField<string>? messageTextField;
    string? draftMessage;
    bool playingPop;
    bool playingBell;
    /// <summary>
    /// A single system wide singleton static dictionary of every
    /// viewer on every page this component is placed
    /// </summary>
    static Dictionary<string, List<ChatMessage>> ChatMessages = new Dictionary<string, List<ChatMessage>>();
    delegate void ChatMessageCallbackEvent(ChatMessage message);
    static ChatMessageCallbackEvent OnMessagePosted;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ChatUri.IsNullOrEmpty())
        {


            ChatUri = Nav.ToBaseRelativePath(Nav.Uri);
            Nav.LocationChanged += ((state, args) =>
          {
              if (Nav.ToBaseRelativePath(args.Location) != ChatUri)
              {
                  RemoveThisViewer();
              }
          });
        }
        else
        {

        }
        //Setup other viewers button listeners
        ViewersChanged += (() =>
       {
           InvokeAsync(StateHasChanged);

       });
        currentUserState = CurrentUser.State;
        AddThisViewer();




        //Setup chat message listeners

        OnMessagePosted += ((ChatMessage message) =>
       {
           if (message.User != currentUserState.Preferences)
           {
               if (_chatOpen && !playingPop)
               {
                   playingPop = true;

               }
               else if (!_chatOpen && !playingBell)
               {
                   playingBell = true;
               }

               InvokeAsync(StateHasChanged);
           }
       });
        if (!ChatMessages.ContainsKey(ChatUri))
        {

            ChatMessages.Add(ChatUri, new());
        }

    }



    private void AddThisViewer()
    {
        if (!Viewers.ContainsKey(ChatUri))
            Viewers.Add(ChatUri, new());

        if (!Viewers[ChatUri].Contains(currentUserState))
        {
            Viewers[ChatUri].Add(currentUserState);
            ViewersChanged?.Invoke();
        }
    }


    private void RemoveThisViewer()
    {
        if (!Viewers.ContainsKey(ChatUri))
            return;

        if (Viewers[ChatUri].Contains(currentUserState))
        {
            Viewers[ChatUri].Remove(currentUserState);
            ViewersChanged.Invoke();

        }
    }
    private async Task PostMessage()
    {
        if (!draftMessage.IsNullOrEmpty())
        {
            await Task.Delay(5);
            var message = new ChatMessage() { User = currentUserState.Preferences, Message = draftMessage };
            ChatMessages[ChatUri].Add(message);

            OnMessagePosted?.Invoke(message);
            draftMessage = "";
            //messageTextField.Value = "";
            await messageTextField?.Clear();
            await InvokeAsync(StateHasChanged);

        }
    }
}