@using Microsoft.AspNetCore.Components.Routing;
@inherits ChatComponentBase

<Audio Src="/audio/messagePop.mp3" @bind-Playing=@playingPop />
<Audio Src="/audio/bell.wav" @bind-Playing=@playingBell />

<ChatButton ChatRoom=AppChatRoom OnClick="@(()=>{_chatOpen=!_chatOpen;})" />

@if (Viewers.ContainsKey(ChatUri))
{
    var otherViewers = Viewers[ChatUri].Where(us => !us.Equals(currentUserState));
}

<MudPopover Style="width:356px;"
            Open="@_chatOpen"
            Fixed="true"
            Square=true
            AnchorOrigin="Origin.TopRight"
            TransformOrigin="Origin.BottomRight"
            Class="overflow-hidden"
            >
            <MudToolBar Class="mud-theme-dark"> 
                <MudText>
                    App Chat
                </MudText>
            </MudToolBar>
    <MudDrawer @bind-Open="@_drawerOpen"
               Anchor="Anchor.End"
               Elevation="1"
               ClipMode="DrawerClipMode.Docked"
               Fixed=true
               Variant="@DrawerVariant.Mini">
   
        <MudNavMenu>
            <MudNavLink Icon="@Icons.Material.Filled.AllInclusive">App Chat</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.FileOpen">Page Chat</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.EnhancedEncryption">Private Chats</MudNavLink>
            <MudNavGroup Icon="@Icons.Material.Filled.Group" Title="Users">
                <MudText>Online</MudText>
                <MudDivider/>
                @{
                    var onlineUsers = UserStateService.UserStates.Where(u => u.Ticket?.Properties.ExpiresUtc > DateTime.UtcNow).ToList();
                }
                @foreach (var user in onlineUsers)
                {
                    <MudNavLink>@user.Username</MudNavLink>
                }
                <MudText>Offline</MudText>
                <MudDivider />
                @foreach (var user in Context.UserSettings.Where(u => !onlineUsers.Select(us=>us.Preferences).Contains(u)))
                {
                    <MudNavLink>@user.Username</MudNavLink>
                }
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>
    <AppChatRoom ChatUri="@ChatUri"
                 Class="pr-16"
                 OnCloseClicked=@(()=>{_chatOpen=!_chatOpen;})
                 ChatRoom="AppChatRoom" />
    <MudButton Variant="Variant.Text" OnClick="@(() => _drawerOpen=!_drawerOpen)">Chats</MudButton>

</MudPopover>

@code {

    bool _chatOpen;
    bool _drawerOpen;

    [Parameter]
    public bool ShowPageViewersButton { get; set; } = true;
    [Parameter]
    public bool AlwaysShowChatButton { get; set; }
    [Parameter]
    public bool AlwaysShowPageViewersButton { get; set; }
    IApplicationUserState currentUserState;

    /// <summary>
    /// A single system wide singleton static dictionary of every
    /// viewer on every page this component is placed
    /// </summary>
    static Dictionary<string, List<IApplicationUserState>> Viewers = new Dictionary<string, List<IApplicationUserState>>();

    delegate void CallbackEvent();
    static CallbackEvent ViewersChanged;


    bool playingPop;
    bool playingBell;


    delegate void ChatMessageCallbackEvent(ChatMessage message);

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();


        if (ChatUri.IsNullOrEmpty())
        {


            ChatUri = Nav.ToBaseRelativePath(Nav.Uri);
            Nav.LocationChanged += ((state, args) =>
          {
              if (Nav.ToBaseRelativePath(args.Location) != ChatUri)
              {
                  RemoveThisViewer();
              }
          });
        }


        await RefreshChatRooms();

        //Setup other viewers button listeners
        ViewersChanged += (async () =>
       {
           await RefreshChatRooms();

           await InvokeAsync(StateHasChanged);

       });
        currentUserState = CurrentUser.State;
        AddThisViewer();




        //Setup chat message listeners

        Chat.OnMessagePosted += ((ChatMessage message) =>
       {
           if (message.User != currentUserState.Preferences)
           {
               if (_chatOpen && !playingPop)
               {
                   playingPop = true;

               }
               else if (!_chatOpen && !playingBell)
               {
                   playingBell = true;
               }

               InvokeAsync(StateHasChanged);
           }
       });


    }



    private void AddThisViewer()
    {
        if (!Viewers.ContainsKey(ChatUri))
            Viewers.Add(ChatUri, new());

        if (!Viewers[ChatUri].Contains(currentUserState))
        {
            Viewers[ChatUri].Add(currentUserState);
            ViewersChanged?.Invoke();
        }
    }


    private void RemoveThisViewer()
    {
        if (!Viewers.ContainsKey(ChatUri))
            return;

        if (Viewers[ChatUri].Contains(currentUserState))
        {
            Viewers[ChatUri].Remove(currentUserState);
            ViewersChanged.Invoke();

        }
    }

}