@inherits AppComponentBase

<UserNotificationPopover UserState="@UserState" @bind-Open="@NotificationsOpen" />

<MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="py-0">
    <ActivatorContent>
        @{
            
            var avatarBgColor = GenerateAvatarColor(UserState?.Username);
        }
        @if (UserState?.Notifications?.Count > 0)
        {
            <MudBadge Color=Color.Error Overlap=true Content="@UserState?.Notifications.Count">
                <CurrentUserAvatarIcon UserState="@UserState" />
            </MudBadge>
        }
        else
        {
            <CurrentUserAvatarIcon UserState="@UserState" />
        }

    </ActivatorContent>
    <ChildContent>
        <MudText Typo=Typo.body2 Color="Color.Info" Align=Align.Center Class="py-3 w-100 " Style="text-align:center;    background-color: var(--mud-palette-drawer-background);">
            @CurrentUser.Username
        </MudText>
        <MudDivider/>
        @if (UserState?.Notifications?.Count > 0)
        {
            <MudMenuItem OnClick="@(()=>{NotificationsOpen=!NotificationsOpen;})">Notifications</MudMenuItem>
        }


        <MudMenuItem OnClick="@(()=>{profileModal?.ShowAsync();})" Icon="@Icons.Material.Filled.Settings">
            @AppLocalization["Profile Settings"]
        </MudMenuItem>
        <MudMenuItem OnClick="@(()=>{notificationsModal?.ShowAsync();})" Icon="@Icons.Material.Filled.Notifications">
            @AppLocalization["Notification Settings"]
        </MudMenuItem>
        <MudMenuItem Href="https://docs.blazam.org" Target="_blank" Icon="@Icons.Material.Filled.Book">
            @AppLocalization["Documentation"]
        </MudMenuItem>

        @if (UserState?.Impersonator == null)
        {
            <MudMenuItem OnClick="@(()=>{Nav.NavigateTo("/logout",true);})" Icon="@Icons.Material.Filled.Logout">
                @AppLocalization["Sign Out"]
            </MudMenuItem>
        }
        else
        {
            <MudMenuItem OnClick="@(()=>{Nav.NavigateTo("/unimpersonate",true);})" Icon="@Icons.Material.Filled.PersonOff">

                @AppLocalization["Stop It"]
            </MudMenuItem>
        }
    </ChildContent>
</MudMenu>
<AppModal @ref=profileModal Title="Profile Settings">
    <CascadingValue Value="mainLayout">
        <AppUserProfileModalContent />
    </CascadingValue>
</AppModal>
<AppModal @ref=notificationsModal Title="Notification Settings" Options="new(){ CloseButton=true, MaxWidth=MaxWidth.ExtraLarge,FullWidth=true}">
    <CascadingValue Value="mainLayout">
        <NotificaionSubscriptionEditor User="UserState.Preferences"/>
    </CascadingValue>
</AppModal>
@code {
    AppModal? profileModal;
    AppModal? notificationsModal;
    /// <summary>
    /// Indicates whether the notification panel is open
    /// </summary>
    bool NotificationsOpen;

    [CascadingParameter]
    public MainLayout mainLayout { get; set; }

    private IApplicationUserState UserState;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        NotificationPublisher.OnNotificationPublished += ((notifications) =>
        {
            if (notifications.Select(n => n.User).Contains(UserState.Preferences))
                InvokeAsync(StateHasChanged);
        });
        UserState = CurrentUser.State;
        if (UserState != null)
            UserState.OnSettingsChanged += (settings) =>
            {
                InvokeAsync(StateHasChanged);
            };
    }


    /// <summary>
    /// Generate a repeatable hex color based on the given username
    /// </summary>
    /// <param name="username"></param>
    /// <returns>A background-color style string</returns>
    string GenerateAvatarColor(string? username)
    {
        if (username is null || username.IsNullOrEmpty()) return "background-color:#0c13a7";
        int usernameHash = username.GetAppHashCode();
        byte[] usernameHashBytes = Helpers.ByteHelpers.ToByteArray(usernameHash, (int?)3);
        for(int x = 0; x < usernameHashBytes.Length; x++)
        {
            if (usernameHashBytes[x] > 200)
                usernameHashBytes[x] = 200;
        }
        string hexColor = "background-color:#";
        hexColor += Convert.ToHexString(usernameHashBytes.Take(3).ToArray());
        return hexColor;
    }

}