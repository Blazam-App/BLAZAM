@inherits DatabaseComponentBase

@if (messages.Count > 0)
{
    <MudPopover Open=@Open
                TransformOrigin="Origin.TopRight"
                AnchorOrigin="Origin.BottomRight">
        <MudStack Class="mud-theme-dark" Row=true>
            <MudListSubheader Class="align-middle">Notifications</MudListSubheader>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.ClearAll" OnClick="MarkAllRead" />
            <AppCloseButton Class="align-middle" OnClick=@(()=>{Open=false;}) />

        </MudStack>
        <MudStack Style="max-height:80vh;" Class="overflow-auto">
            @foreach (var notification in messages.Where(m => !m.IsRead))
            {

                <MudAlert OnClick=@(()=>{
                  if(notification.Notification.Link!=null)
                  Nav.NavigateTo(notification.Notification.Link.ToString());
                  }) ShowCloseIcon=notification.Notification.Dismissable
                          CloseIconClicked="@(async()=>{
                  await UserState.MarkRead(notification);
                  await InvokeAsync(StateHasChanged);
              })">
                    @if (!notification.Notification.Title.IsNullOrEmpty())
                    {
                        <MudText Typo="Typo.subtitle2">@notification.Notification.Title</MudText>
                    }
                    <MudText Typo="Typo.caption">
                        @((MarkupString)notification.Notification.Message)
                    </MudText>
                </MudAlert>
            }
        </MudStack>

    </MudPopover>
}

@code {
    private bool _open;
    private IList<UserNotification> messages = new List<UserNotification>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        messages = await Context.UserNotifications.Where(un => un.User.Id == UserState.Id && !un.IsRead).ToListAsync();
        //messages = UserState.Notifications;

        NotificationPublisher.OnNotificationPublished += async (notification) =>
        {
            messages = await Context.UserNotifications.Where(un => un.User.Id == UserState.Id && !un.IsRead).ToListAsync();

            InvokeAsync(StateHasChanged);
        };
    }

    [Parameter]
    public bool Open
    {
        get => _open; set
        {
            if (_open == value) return;
            _open = value;
            OpenChanged.InvokeAsync(value);

        }
    }
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public IApplicationUserState UserState { get; set; }

    async Task MarkAllRead()
    {
        messages = await Context.UserNotifications.Where(un => un.User.Id == UserState.Id && !un.IsRead).ToListAsync();

        foreach (var message in messages)
        {
            message.IsRead = true;

            await UserState.MarkRead(message);
        }
        Open = false;
        await InvokeAsync(StateHasChanged);
    }



}