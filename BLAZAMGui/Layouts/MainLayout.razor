@using BLAZAM.Gui.Navs
@using System.Security.Claims;
@inherits LayoutComponentBase

@inject NavigationManager Nav
@inject IActiveDirectoryContext directory
@inject IApplicationUserStateService UserStateService
@inject IAppDatabaseFactory DbFactory
@inject AppSnackBarService SnackBarService
@inject ApplicationInfo ApplicationInfo
@inject ConnMonitor monitor
@inject IStringLocalizer<AppLocalization> AppLocalization
@{
    string topMarginForContent = "";
}
<PageTitle>@DatabaseCache.ApplicationSettings.AppAbbreviation</PageTitle>
<CascadingValue Value="this">
    <MudLayout Style="min-height:98vh;">
        <AuthorizeView Context="authContext">
            <Authorized>
                <CascadingValue Value="this">
                    <MainAppBar />
                </CascadingValue>

                @if (ApplicationInfo.inDebugMode)
                {

                    <AuthorizeView Context="authorizedContext" Roles=@UserRoles.SuperAdmin>
                        <MudDrawer Width="450px" @bind-Open=@_devDrawerOpen Anchor=Anchor.End Elevation="2" Class="mud-theme-dark">
                            <MudDrawerContainer>
                                <DevTools />
                            </MudDrawerContainer>
                        </MudDrawer>

                    </AuthorizeView>
                }

                <MudBreakpointProvider @ref=_mudBreakPoint>

                    <MudDrawer Width=@(BrowseExpanded==false?"185px":"385px")
                               @bind-Open=@DrawerOpen
                               Class="animate-width"
                               Variant=@navDrawerVariant
                               Elevation="3"
                               ClipMode="DrawerClipMode.Docked">
                        <NavMenu SelectedEntryChanged=GotoEntry BrowseExpandedChanged="@(async(value)=>{
BrowseExpanded=value;
await Task.Delay(100);
await InvokeAsync(StateHasChanged);
})" />
                        @if (ApplicationInfo.InDebugMode)
                        {
                            <AuthorizeView Roles="@UserRoles.SuperAdmin">
                                <MudButton StartIcon="@Icons.Material.Filled.DeveloperMode" Color="Color.Primary"
                                           OnClick="@(()=>{_devDrawerOpen=!_devDrawerOpen;InvokeAsync(StateHasChanged);})">Dev Panel</MudButton>

                                <MudButton StartIcon="@Icons.Material.Filled.DeveloperMode" Color="Color.Primary"
                                           OnClick="@(()=>{dataBrowser?.Show();})">Data Browser</MudButton>
                                <AppModal @ref=dataBrowser>
                                    <DatabaseBrowserModalContent />
                                </AppModal>
                            </AuthorizeView>
                        }
                        <MudSpacer />
                        <AppFooter Class="ps-2 align-middle" />

                    </MudDrawer>
                </MudBreakpointProvider>


                <MudMainContent Class=" mud-height-full">


                    @{
                        // if (SubHeader != null)
                        // {
                        //     topMarginForContent = "margin-top:64px;";

                        // }
                        var maxWidth = MaxWidth.Large;
                        if (Nav.Uri.Contains("/home"))
                        {
                            maxWidth = MaxWidth.False;
                        }
                    }
                    <MudContainer Style="@topMarginForContent"
                                  MaxWidth="MaxWidth.ExtraExtraLarge"
                                  Class="px-0 pb-10 mud-height-full">






                        @if (SubHeader != null)
                        {
                            <MudAppBar Fixed=false Dense=true Elevation="1" Class="mb-5 sticky" Style="position: fixed !important;">
                                @SubHeader?.ChildContent

                            </MudAppBar>

                            <MudElement Class="d-block" Style="height:50px">&nbsp;</MudElement>
                        }

                        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
                            @Body

                        </MudContainer>

                        <AppUserPageTracker />
                        <DirectoryConnectingIndicator />

                    </MudContainer>

                </MudMainContent>
                @*   <MudAppBar Color=Color.Secondary Style="height:35px;"
                DisableGutters=true
                Bottom=true
                Dense=true
                Elevation="1">
                <MudStack Class="mud-width-full pa-0 ma-0 ps-3" Row=true>
                TODO Either break down chat to only page chat, or rebuild appchat
                <AppChat />
                </MudStack>
                </MudAppBar> *@
                <NotificationBroadcastListener />
            </Authorized>
            <NotAuthorized>
                <MudMainContent Style="height: 100vh;overflow: auto;">
                    <CascadingValue Value="this">
                        @Body

                    </CascadingValue>
                </MudMainContent>
            </NotAuthorized>
        </AuthorizeView>

    </MudLayout>
</CascadingValue>



@inject IJSRuntime JSRuntime
@inject ICurrentUserStateService CurrentUser


@{
    try
    {
        if (CurrentUser.State.IsAuthenticated && CurrentUser.State.User.FindFirst(ClaimTypes.Sid) != null && !Nav.Uri.Contains("/logout"))
        {
            JSRuntime.InvokeVoidAsync("updateCookieExpiration");

        }
    }
    catch
    {

    }
}

@code {
    MudBreakpointProvider? _mudBreakPoint;
    AppModal? dataBrowser;
    bool _drawerOpen = true;
    bool _devDrawerOpen = false;
    public bool BrowseExpanded = false;

    public bool DrawerOpen
    {
        get => _drawerOpen; set
        {
            if (_drawerOpen == value) return;
            _drawerOpen = value;
            //TODO Add drawer open preference to user settings

            InvokeAsync(StateHasChanged);
        }
    }

    public SetHeader? Header;
    public void SetHeader(SetHeader? setHeader)
    {
        Header = (setHeader);
        if (Header != null)

            Header.OnRefreshRequested += (async () => { await InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }
    SetSubHeader? SubHeader;
    public void SetSubHeader(SetSubHeader? setSubHeader)
    {
        SubHeader = (setSubHeader);
        if (SubHeader != null)
            SubHeader.OnRefreshRequested += (async () => { await InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }

    public void Update() => StateHasChanged();

    /// <summary>
    /// Changes the current users theme, and refeshes the current page.
    /// </summary>
    /// <param name="theme"></param>
    public void SetUserTheme(ApplicationTheme theme)
    {
        try
        {
            CurrentUser.State.Preferences.Theme = theme.Name;
            CurrentUser.State.SaveUserSettings();
            Nav.NavigateTo(Nav.Uri, true);
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
    }
    /// <summary>
    /// Changes the current users theme, and refeshes the current page.
    /// </summary>
    /// <param name="theme"></param>
    public void SetDarkMode(bool darkMode)
    {
        try
        {
            CurrentUser.State.Preferences.DarkMode = darkMode;
            CurrentUser.State.SaveUserSettings();
            Nav.NavigateTo(Nav.Uri, true);
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
    }
    public async void GotoEntry(IDirectoryEntryAdapter entry)
    {
        DrawerOpen = false;
        Nav.NavigateTo(entry.SearchUri);
    }

    private DrawerVariant navDrawerVariant
    {
        get

        {
            if(BrowseExpanded == false)
            {
                if (_mudBreakPoint?.Breakpoint == Breakpoint.Sm ||
                _mudBreakPoint?.Breakpoint == Breakpoint.Xs)
                {
                    return DrawerVariant.Responsive;
                }
                else
                {
                    return DrawerVariant.Responsive;
                }
            }else{
                return DrawerVariant.Temporary;
            } 

        }
    }
} 