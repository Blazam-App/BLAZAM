@using BLAZAM.Gui.Navs
@using System.Security.Claims;
@inherits LayoutComponentBase

@inject NavigationManager Nav
@inject IActiveDirectoryContext directory
@inject IApplicationUserStateService UserStateService
@inject IAppDatabaseFactory DbFactory
@inject AppSnackBarService SnackBarService
@inject ConnMonitor monitor
@inject IStringLocalizer<AppLocalization> AppLocalization
@{
    string topMarginForContent = "";
}
<PageTitle>@DatabaseCache.ApplicationSettings.AppAbbreviation</PageTitle>
<CascadingValue Value="this">
    <MudLayout Style="min-height:98vh;">
        <AuthorizeView Context="authContext">
            <Authorized>
                <CascadingValue Value="this">
                    <MainAppBar />
                </CascadingValue>

                @if (ApplicationInfo.inDebugMode)
                {

                    <AuthorizeView Context="authorizedContext" Roles=@UserRoles.SuperAdmin>
                        <MudDrawer Width="450px" @bind-Open=@_devDrawerOpen Anchor=Anchor.End Elevation="2" Class="mud-theme-dark">
                            <MudDrawerContainer>
                                <DevTools />
                            </MudDrawerContainer>
                        </MudDrawer>

                    </AuthorizeView>
                }


                <MudDrawer Width="185px" @bind-Open=@DrawerOpen Elevation="3">
                    <MudDrawerContainer Style="width:100%;height:100%;">
                        <NavMenu />
                        <AuthorizeView Roles="@UserRoles.SuperAdmin">
                            <MudButton StartIcon="@Icons.Material.Filled.DeveloperMode" Color="Color.Primary"
                                       OnClick="@(()=>{_devDrawerOpen=!_devDrawerOpen;InvokeAsync(StateHasChanged);})">Dev Panel</MudButton>

                            <MudButton StartIcon="@Icons.Material.Filled.DeveloperMode" Color="Color.Primary"
                                       OnClick="@(()=>{dataBrowser?.Show();})">Data Browser</MudButton>
                        </AuthorizeView>
                    </MudDrawerContainer>
                </MudDrawer>



                <MudMainContent Class="mud-height-full">
                    @if (SubHeader != null)
                    {
                        <MudAppBar Color=Color.Primary Class="app-subheader" Elevation="1">
                            @SubHeader?.ChildContent
                        </MudAppBar>
                        topMarginForContent = "margin-top:64px;";
                    }


                    <MudContainer Style="@topMarginForContent"
                                  MaxWidth="MaxWidth.Large"
                                  Class="pt-5 pb-10 mud-height-full">


                        @Body

                        <AppUserPageTracker />
                        <DirectoryConnectingIndicator />

                    </MudContainer>

                </MudMainContent>
                <MudAppBar Style="height:30px;" DisableGutters=true Bottom=true Dense=true Color=Color.Dark Elevation="1">
                    <MudStack Class="mud-width-full pa-0 ma-0 ps-3" Row=true>
                        <AppFooter Class="align-middle"/>
                        
                        @*<AppChat/>*@
                    </MudStack>
                </MudAppBar>
                <NotificationBroadcastListener />
            </Authorized>
            <NotAuthorized>
                <MudMainContent Style="height: 100vh;overflow: auto;">
                    <CascadingValue Value="this">
                        @Body

                    </CascadingValue>
                </MudMainContent>
            </NotAuthorized>
        </AuthorizeView>

    </MudLayout>
</CascadingValue>



@inject IJSRuntime JSRuntime
@inject ICurrentUserStateService CurrentUser


@{
    if (CurrentUser.State.IsAuthenticated && CurrentUser.State.User.FindFirst(ClaimTypes.Sid) != null && !Nav.Uri.Contains("/logout"))
    {
        JSRuntime.InvokeVoidAsync("updateCookieExpiration");

    }
}

@code {
    AppModal? dataBrowser;
    bool _drawerOpen = true;
    bool _devDrawerOpen = false;

    public bool DrawerOpen
    {
        get => _drawerOpen; set
        {
            if (_drawerOpen == value) return;
            _drawerOpen = value;
            //TODO Add drawer open preference to user settings

            InvokeAsync(StateHasChanged);
        }
    }

    public SetHeader? Header;
    public void SetHeader(SetHeader? setHeader)
    {
        Header = (setHeader);
        if (setHeader != null)

            Header.OnRefreshRequested += (async () => { await InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }
    SetSubHeader? SubHeader;
    public void SetSubHeader(SetSubHeader? setSubHeader)
    {
        SubHeader = (setSubHeader);
        if (setSubHeader != null)
            SubHeader.OnRefreshRequested += (async () => { await InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }

    public void Update() => StateHasChanged();

    /// <summary>
    /// Changes the current users theme, and refeshes the current page.
    /// </summary>
    /// <param name="theme"></param>
    public void SetUserTheme(ApplicationTheme theme)
    {
        try
        {
            CurrentUser.State.Preferences.Theme = theme.Name;
            CurrentUser.State.SaveUserSettings();
            Nav.NavigateTo(Nav.Uri, true);
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
    }
    /// <summary>
    /// Changes the current users theme, and refeshes the current page.
    /// </summary>
    /// <param name="theme"></param>
    public void SetDarkMode(bool darkMode)
    {
        try
        {
            CurrentUser.State.Preferences.DarkMode = darkMode;
            CurrentUser.State.SaveUserSettings();
            Nav.NavigateTo(Nav.Uri, true);
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
    }

} 