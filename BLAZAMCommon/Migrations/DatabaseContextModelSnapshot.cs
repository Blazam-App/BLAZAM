// <auto-generated />
using System;
using BLAZAM.Common.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BLAZAM.Common.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccessLevelActionAccessMapping", b =>
                {
                    b.Property<int>("AccessLevelsAccessLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ActionMapActionAccessMappingId")
                        .HasColumnType("int");

                    b.HasKey("AccessLevelsAccessLevelId", "ActionMapActionAccessMappingId");

                    b.HasIndex("ActionMapActionAccessMappingId");

                    b.ToTable("AccessLevelActionAccessMapping");
                });

            modelBuilder.Entity("AccessLevelFieldAccessMapping", b =>
                {
                    b.Property<int>("AccessLevelsAccessLevelId")
                        .HasColumnType("int");

                    b.Property<int>("FieldMapFieldAccessMappingId")
                        .HasColumnType("int");

                    b.HasKey("AccessLevelsAccessLevelId", "FieldMapFieldAccessMappingId");

                    b.HasIndex("FieldMapFieldAccessMappingId");

                    b.ToTable("AccessLevelFieldAccessMapping");
                });

            modelBuilder.Entity("AccessLevelObjectAccessMapping", b =>
                {
                    b.Property<int>("AccessLevelsAccessLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectMapObjectAccessMappingId")
                        .HasColumnType("int");

                    b.HasKey("AccessLevelsAccessLevelId", "ObjectMapObjectAccessMappingId");

                    b.HasIndex("ObjectMapObjectAccessMappingId");

                    b.ToTable("AccessLevelObjectAccessMapping");
                });

            modelBuilder.Entity("AccessLevelPermissionMap", b =>
                {
                    b.Property<int>("AccessLevelsAccessLevelId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionMapsPermissionMapId")
                        .HasColumnType("int");

                    b.HasKey("AccessLevelsAccessLevelId", "PermissionMapsPermissionMapId");

                    b.HasIndex("PermissionMapsPermissionMapId");

                    b.ToTable("AccessLevelPermissionMap");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.ADSettings", b =>
                {
                    b.Property<int>("ADSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationBaseDN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FQDN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ServerPort")
                        .HasColumnType("int");

                    b.Property<bool>("UseTLS")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ADSettingsId");

                    b.ToTable("ActiveDirectorySettings", t =>
                        {
                            t.HasCheckConstraint("CK_Table_Column", "[ADSettingsId] = 1");
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.ActiveDirectoryField", b =>
                {
                    b.Property<int>("ActiveDirectoryFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ActiveDirectoryFieldId");

                    b.ToTable("ActiveDirectoryFields");

                    b.HasData(
                        new
                        {
                            ActiveDirectoryFieldId = 1,
                            DisplayName = "Last Name",
                            FieldName = "sn"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 2,
                            DisplayName = "First Name",
                            FieldName = "givenname"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 3,
                            DisplayName = "Office",
                            FieldName = "physicalDeliveryOfficeName"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 4,
                            DisplayName = "Employee ID",
                            FieldName = "employeeId"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 5,
                            DisplayName = "Home Directory",
                            FieldName = "homeDirectory"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 6,
                            DisplayName = "Logon Script Path",
                            FieldName = "scriptPath"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 7,
                            DisplayName = "Profile Path",
                            FieldName = "profilePath"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 8,
                            DisplayName = "Home Phone Number",
                            FieldName = "homePhone"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 9,
                            DisplayName = "Street Address",
                            FieldName = "streetAddress"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 10,
                            DisplayName = "City",
                            FieldName = "city"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 11,
                            DisplayName = "State",
                            FieldName = "st"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 12,
                            DisplayName = "Zip Code",
                            FieldName = "postalCode"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 13,
                            DisplayName = "Site",
                            FieldName = "site"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 14,
                            DisplayName = "Name",
                            FieldName = "name"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 15,
                            DisplayName = "Username",
                            FieldName = "samaccountname"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 16,
                            DisplayName = "SID",
                            FieldName = "objectSID"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 17,
                            DisplayName = "E-Mail Address",
                            FieldName = "mail"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 18,
                            DisplayName = "Description",
                            FieldName = "description"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 19,
                            DisplayName = "Display Name",
                            FieldName = "displayName"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 20,
                            DisplayName = "Distinguished Name",
                            FieldName = "distinguishedName"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 21,
                            DisplayName = "Member Of",
                            FieldName = "memberOf"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 22,
                            DisplayName = "Company",
                            FieldName = "company"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 23,
                            DisplayName = "Title",
                            FieldName = "title"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 24,
                            DisplayName = "User Principal Name",
                            FieldName = "userPrincipalName"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 25,
                            DisplayName = "Telephone Number",
                            FieldName = "telephoneNumber"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 26,
                            DisplayName = "Street",
                            FieldName = "street"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 27,
                            DisplayName = "Canonical Name",
                            FieldName = "cn"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 28,
                            DisplayName = "Home Drive",
                            FieldName = "homeDrive"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 29,
                            DisplayName = "Department",
                            FieldName = "department"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 30,
                            DisplayName = "Middle Name",
                            FieldName = "middleName"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 31,
                            DisplayName = "Pager",
                            FieldName = "pager"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 32,
                            DisplayName = "OS",
                            FieldName = "operatingSystemVersion"
                        },
                        new
                        {
                            ActiveDirectoryFieldId = 33,
                            DisplayName = "Account Expiration",
                            FieldName = "accountExpires"
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.AppSettings", b =>
                {
                    b.Property<int>("AppSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnalyticsId")
                        .HasColumnType("longtext");

                    b.Property<string>("AppFQDN")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("AppIcon")
                        .HasColumnType("longblob");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("AutoUpdate")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("AutoUpdateTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("ForceHTTPS")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("HttpsPort")
                        .HasColumnType("int");

                    b.Property<bool>("InstallationCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdateCheck")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MOTD")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdateBranch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserHelpdeskURL")
                        .HasColumnType("longtext");

                    b.HasKey("AppSettingsId");

                    b.ToTable("AppSettings", t =>
                        {
                            t.HasCheckConstraint("CK_Table_Column", "[AppSettingsId] = 1")
                                .HasName("CK_Table_Column1");
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.ComputerAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ComputerAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.GroupAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GroupAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.LogonAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LogonAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.OUAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OUAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.PermissionsAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PermissionsAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.RequestAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RequestAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.SettingsAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SettingsAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.SystemAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SystemAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Audit.UserAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AfterAction")
                        .HasColumnType("longtext");

                    b.Property<string>("BeforeAction")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserAuditLog");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.AuthenticationSettings", b =>
                {
                    b.Property<int?>("AuthenticationSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdminPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("DuoApiHost")
                        .HasColumnType("longtext");

                    b.Property<string>("DuoClientId")
                        .HasColumnType("longtext");

                    b.Property<string>("DuoClientSecret")
                        .HasColumnType("longtext");

                    b.Property<int?>("SessionTimeout")
                        .HasColumnType("int");

                    b.HasKey("AuthenticationSettingsId");

                    b.ToTable("AuthenticationSettings", t =>
                        {
                            t.HasCheckConstraint("CK_Table_Column", "[AuthenticationSettingsId] = 1")
                                .HasName("CK_Table_Column2");
                        });

                    b.HasData(
                        new
                        {
                            AuthenticationSettingsId = 1,
                            AdminPassword = "password",
                            SessionTimeout = 900000
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.EmailSettings", b =>
                {
                    b.Property<int>("EmailSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdminBcc")
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FromAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("FromName")
                        .HasColumnType("longtext");

                    b.Property<string>("ReplyToAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("ReplyToName")
                        .HasColumnType("longtext");

                    b.Property<string>("SMTPPassword")
                        .HasColumnType("longtext");

                    b.Property<int>("SMTPPort")
                        .HasColumnType("int");

                    b.Property<string>("SMTPServer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SMTPUsername")
                        .HasColumnType("longtext");

                    b.Property<bool>("UseSMTPAuth")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseTLS")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("EmailSettingsId");

                    b.ToTable("EmailSettings", t =>
                        {
                            t.HasCheckConstraint("CK_Table_Column", "[EmailSettingsId] = 1")
                                .HasName("CK_Table_Column3");
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BCC")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CC")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.AccessLevel", b =>
                {
                    b.Property<int>("AccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AccessLevelId");

                    b.ToTable("AccessLevels");

                    b.HasData(
                        new
                        {
                            AccessLevelId = 1,
                            Name = "Deny All"
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.ActionAccessFlag", b =>
                {
                    b.Property<int>("ActionAccessFlagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ActionAccessFlagId");

                    b.ToTable("ObjectActionFlag");

                    b.HasData(
                        new
                        {
                            ActionAccessFlagId = 1,
                            Name = "Assign"
                        },
                        new
                        {
                            ActionAccessFlagId = 2,
                            Name = "UnAssign"
                        },
                        new
                        {
                            ActionAccessFlagId = 3,
                            Name = "Unlock"
                        },
                        new
                        {
                            ActionAccessFlagId = 4,
                            Name = "Enable"
                        },
                        new
                        {
                            ActionAccessFlagId = 5,
                            Name = "Disable"
                        },
                        new
                        {
                            ActionAccessFlagId = 6,
                            Name = "Rename"
                        },
                        new
                        {
                            ActionAccessFlagId = 7,
                            Name = "Move"
                        },
                        new
                        {
                            ActionAccessFlagId = 8,
                            Name = "Create"
                        },
                        new
                        {
                            ActionAccessFlagId = 9,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.ActionAccessMapping", b =>
                {
                    b.Property<int>("ActionAccessMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowOrDeny")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectActionActionAccessFlagId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.HasKey("ActionAccessMappingId");

                    b.HasIndex("ObjectActionActionAccessFlagId");

                    b.ToTable("ActionAccessMapping");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.FieldAccessLevel", b =>
                {
                    b.Property<int>("FieldAccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FieldAccessLevelId");

                    b.ToTable("FieldAccessLevel");

                    b.HasData(
                        new
                        {
                            FieldAccessLevelId = 1,
                            Level = 10,
                            Name = "Deny"
                        },
                        new
                        {
                            FieldAccessLevelId = 2,
                            Level = 100,
                            Name = "Read"
                        },
                        new
                        {
                            FieldAccessLevelId = 3,
                            Level = 1000,
                            Name = "Edit"
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.FieldAccessMapping", b =>
                {
                    b.Property<int>("FieldAccessMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActiveDirectoryFieldId")
                        .HasColumnType("int");

                    b.Property<int>("FieldAccessLevelId")
                        .HasColumnType("int");

                    b.HasKey("FieldAccessMappingId");

                    b.HasIndex("ActiveDirectoryFieldId");

                    b.HasIndex("FieldAccessLevelId");

                    b.ToTable("AccessLevelFieldMapping");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.ObjectAccessLevel", b =>
                {
                    b.Property<int>("ObjectAccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ObjectAccessLevelId");

                    b.ToTable("ObjectAccessLevel");

                    b.HasData(
                        new
                        {
                            ObjectAccessLevelId = 1,
                            Level = 10,
                            Name = "Deny"
                        },
                        new
                        {
                            ObjectAccessLevelId = 2,
                            Level = 1000,
                            Name = "Read"
                        });
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.ObjectAccessMapping", b =>
                {
                    b.Property<int>("ObjectAccessMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ObjectAccessLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.HasKey("ObjectAccessMappingId");

                    b.HasIndex("ObjectAccessLevelId");

                    b.ToTable("AccessLevelObjectMapping");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.PermissionDelegate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("DelegateSid")
                        .IsRequired()
                        .HasColumnType("varbinary(3072)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DelegateSid")
                        .IsUnique();

                    b.ToTable("PermissionDelegate");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.PermissionMap", b =>
                {
                    b.Property<int>("PermissionMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OU")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PermissionMapId");

                    b.ToTable("PermissionMap");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Templates.DirectoryTemplate", b =>
                {
                    b.Property<int>("DirectoryTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayNameFormula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.Property<string>("ParentOU")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordFormula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsernameFormula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DirectoryTemplateId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DirectoryTemplates");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Templates.DirectoryTemplateFieldValue", b =>
                {
                    b.Property<int>("DirectoryTemplateFieldValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DirectoryTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("FieldActiveDirectoryFieldId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DirectoryTemplateFieldValueId");

                    b.HasIndex("DirectoryTemplateId");

                    b.HasIndex("FieldActiveDirectoryFieldId");

                    b.ToTable("DirectoryTemplateFieldValues");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Templates.DirectoryTemplateGroup", b =>
                {
                    b.Property<int>("DirectoryTemplateGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DirectoryTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("GroupSid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DirectoryTemplateGroupId");

                    b.HasIndex("DirectoryTemplateId");

                    b.ToTable("DirectoryTemplateGroups");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.User.UserSettings", b =>
                {
                    b.Property<int>("UserSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("APIToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("SearchDisabledComputers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SearchDisabledUsers")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Theme")
                        .HasColumnType("longtext");

                    b.Property<string>("UserGUID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("UserSettingsId");

                    b.HasIndex("UserGUID")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("PermissionDelegatePermissionMap", b =>
                {
                    b.Property<int>("PermissionDelegatesId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionsMapsPermissionMapId")
                        .HasColumnType("int");

                    b.HasKey("PermissionDelegatesId", "PermissionsMapsPermissionMapId");

                    b.HasIndex("PermissionsMapsPermissionMapId");

                    b.ToTable("PermissionDelegatePermissionMap");
                });

            modelBuilder.Entity("AccessLevelActionAccessMapping", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.AccessLevel", null)
                        .WithMany()
                        .HasForeignKey("AccessLevelsAccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.ActionAccessMapping", null)
                        .WithMany()
                        .HasForeignKey("ActionMapActionAccessMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccessLevelFieldAccessMapping", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.AccessLevel", null)
                        .WithMany()
                        .HasForeignKey("AccessLevelsAccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.FieldAccessMapping", null)
                        .WithMany()
                        .HasForeignKey("FieldMapFieldAccessMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccessLevelObjectAccessMapping", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.AccessLevel", null)
                        .WithMany()
                        .HasForeignKey("AccessLevelsAccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.ObjectAccessMapping", null)
                        .WithMany()
                        .HasForeignKey("ObjectMapObjectAccessMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccessLevelPermissionMap", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.AccessLevel", null)
                        .WithMany()
                        .HasForeignKey("AccessLevelsAccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.PermissionMap", null)
                        .WithMany()
                        .HasForeignKey("PermissionMapsPermissionMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.ActionAccessMapping", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.ActionAccessFlag", "ObjectAction")
                        .WithMany()
                        .HasForeignKey("ObjectActionActionAccessFlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectAction");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.FieldAccessMapping", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.ActiveDirectoryField", "Field")
                        .WithMany("FieldAccessMappings")
                        .HasForeignKey("ActiveDirectoryFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.FieldAccessLevel", "FieldAccessLevel")
                        .WithMany("FieldAccessMappings")
                        .HasForeignKey("FieldAccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("FieldAccessLevel");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.ObjectAccessMapping", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.ObjectAccessLevel", "ObjectAccessLevel")
                        .WithMany("ObjectAccessMappings")
                        .HasForeignKey("ObjectAccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectAccessLevel");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Templates.DirectoryTemplateFieldValue", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Templates.DirectoryTemplate", null)
                        .WithMany("FieldValues")
                        .HasForeignKey("DirectoryTemplateId");

                    b.HasOne("BLAZAM.Common.Models.Database.ActiveDirectoryField", "Field")
                        .WithMany()
                        .HasForeignKey("FieldActiveDirectoryFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Templates.DirectoryTemplateGroup", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Templates.DirectoryTemplate", null)
                        .WithMany("AssignedGroupSids")
                        .HasForeignKey("DirectoryTemplateId");
                });

            modelBuilder.Entity("PermissionDelegatePermissionMap", b =>
                {
                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.PermissionDelegate", null)
                        .WithMany()
                        .HasForeignKey("PermissionDelegatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLAZAM.Common.Models.Database.Permissions.PermissionMap", null)
                        .WithMany()
                        .HasForeignKey("PermissionsMapsPermissionMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.ActiveDirectoryField", b =>
                {
                    b.Navigation("FieldAccessMappings");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.FieldAccessLevel", b =>
                {
                    b.Navigation("FieldAccessMappings");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Permissions.ObjectAccessLevel", b =>
                {
                    b.Navigation("ObjectAccessMappings");
                });

            modelBuilder.Entity("BLAZAM.Common.Models.Database.Templates.DirectoryTemplate", b =>
                {
                    b.Navigation("AssignedGroupSids");

                    b.Navigation("FieldValues");
                });
#pragma warning restore 612, 618
        }
    }
}
