@inject IHttpContextAccessor context
@inject IApplicationUserStateService userStateService
@inject ICurrentUserStateService currentUser
<CascadingAuthenticationState>



    <ErrorBoundary>

        <ChildContent>
            <Router AppAssembly="@typeof(App).Assembly">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <Authorizing>
                            Authorizing...
                        </Authorizing>
                        <NotAuthorized>
                            @if (context.User.Identity?.IsAuthenticated != true)
                            {
                                <PageTitle>Login</PageTitle>
                                <LayoutView Layout="@typeof(LoginLayout)">
                                    <Login />
                                </LayoutView>
                            }
                            else
                            {
                                @if (context != null)
                                {

                                }
                                <p>You are not authorized to access this resource.</p>
                            }
                        </NotAuthorized>

                    </AuthorizeRouteView>
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                </Found>
                <NotFound>
                    <AppPageTitle>Not found</AppPageTitle>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <_404 />
                    </LayoutView>
                </NotFound>
            </Router>
        </ChildContent>
        <ErrorContent>
            <LayoutView Layout="@typeof(MinLayout)">
                <UnhandledExceptionPage Error="@context" />

            </LayoutView>
        </ErrorContent>
    </ErrorBoundary>





</CascadingAuthenticationState>

<MudThemeProvider IsDarkMode="@darkMode" Theme="@activeTheme.Theme" />
<MudDialogProvider />
<MudPopoverProvider />
<MudSnackbarProvider />

<SessionExpirationWarningProvider />

@code {
    bool darkMode = false;
    ApplicationTheme activeTheme = new BlueTheme();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            var userTheme = currentUser.State?.Preferences?.Theme;
            if (userTheme != null)
            {
                var matchingTheme = ApplicationTheme.Themes.FirstOrDefault(at => at.Name == userTheme);
                if (matchingTheme != null)
                {
                    activeTheme = matchingTheme;
                }
                else
                {
                    activeTheme = new BlueTheme();

                }
              
            }
            darkMode = currentUser.State?.Preferences?.DarkMode == true;
        }
        catch (Exception ex)
        {
            Loggers.SystemLogger.Error("Error while fetching user theme: {@Error}", ex);
        }
    }

}