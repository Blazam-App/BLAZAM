@using BLAZAM.Server.Shared.Layouts;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@using System.Diagnostics;
@using BLAZAM.Server.Shared.UI.Themes;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.Extensions.Options;
@inject IHttpContextAccessor context
@inject IApplicationUserStateService userStateService
@inject ICurrentUserStateService  currentUser
@*<Blazorise.ThemeProvider Theme="@activeTheme.Theme">*@
<CascadingAuthenticationState>



    <ErrorBoundary>
    
        <ChildContent>
            <Router AppAssembly="@typeof(App).Assembly">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <Authorizing>
                            Authorizing...
                        </Authorizing>
                        <NotAuthorized>
                            @if (!context.User.Identity?.IsAuthenticated == true)
                            {
                                <PageTitle>Login</PageTitle>
                                <LayoutView Layout="@typeof(LoginLayout)">
                                    <BLAZAM.Server.Pages.Login />
                                </LayoutView>
                                @*<RedirectToLogin />*@
                            }
                            else
                            {
                                @if (context != null)
                                {

                                }
                                <p>You are not authorized to access this resource.</p>
                            }
                        </NotAuthorized>

                    </AuthorizeRouteView>
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                </Found>
                <NotFound>
                    <AppPageTitle>Not found</AppPageTitle>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <_404 />
                    </LayoutView>
                </NotFound>
            </Router>
        </ChildContent>
        <ErrorContent>
            <LayoutView Layout="@typeof(MinLayout)">

                <UnhandledExceptionPage Error="@context" />

            </LayoutView>
        </ErrorContent>
    </ErrorBoundary>





</CascadingAuthenticationState>

<MudThemeProvider IsDarkMode="@darkMode" Theme="@activeTheme.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<SessionExpirationWarningProvider />

@code {
    bool darkMode = false;
    ApplicationTheme activeTheme = new BlueTheme();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var userTheme = currentUser.State.UserSettings?.Theme;
        switch (userTheme)
        {
            case "Blue":
            default:
                activeTheme = new BlueTheme();
                break;
            case "Red":
                activeTheme = new RedTheme();
                break;


        }
        darkMode = currentUser.State.UserSettings?.DarkMode==true;
    }

}