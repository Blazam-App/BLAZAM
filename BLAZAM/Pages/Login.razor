@page "/login"
@using BLAZAM.Common.Data;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@inherits ValidatedForm
@layout LoginLayout
@{
    var redirectUrl = Nav.Uri;
}
<Heading Padding="Padding.Is4.FromBottom">


    @DatabaseCache.ApplicationSettings?.AppName

</Heading>



<Div class="brand-icon">
    <Image Source="@StaticAssets.ApplicationIconUri" />

</Div>

@if (!Program.InDemoMode || DemoCustomLogin)
{
    <Form Class="login-form" method="post" action="/signin" TextAlignment="TextAlignment.Center" >

        <Field>
            <FieldBody>
                <TextEdit Autofocus TextAlignment="TextAlignment.Center" Placeholder="Username" name="username" @bind-Text=LoginRequest.Username>
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
        <Field>
            <FieldBody>
                <TextEdit TextAlignment="TextAlignment.Center" Placeholder="Password" name="password" Role="TextRole.Password" @bind-Text=LoginRequest.Password>
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
                </Field>        
                <TextEdit Visibility=Visibility.Invisible name="ReturnUrl" Text="@redirectUrl" />


        <Button Margin=Margin.IsAuto.OnX.Is2.FromTop Type=ButtonType.Submit Color="Color.Primary">@AppLocalization["Log In"]</Button><br />
    </Form>

}
@if (Program.InDemoMode)
{
    <Form Class="login-form" method="post" action="/signin" TextAlignment="TextAlignment.Center">

        <TextEdit Autofocus TextAlignment="TextAlignment.Center" name="username" Text="demo" Display="Display.None" />
        <TextEdit TextAlignment="TextAlignment.Center" name="password" Role="TextRole.Password" Text="demo" Display="Display.None" />
        <TextEdit Visibility=Visibility.Invisible name="ReturnUrl" Text="@redirectUrl" />

        <Dropdown Margin=Margin.IsAuto.OnX.Is2.FromTop>
        <Button Type=ButtonType.Submit Color="Color.Primary">@AppLocalization["Log In To Demo"]</Button>
        <DropdownToggle Color="Color.Primary" Split />
            <DropdownMenu>
                <DropdownItem Clicked=@(()=>{ DemoCustomLogin=true;InvokeAsync(StateHasChanged); })>@AppLocalization["Custom Login"]</DropdownItem>
            </DropdownMenu>
        </Dropdown>

    </Form>

}
<Copyright Margin=Margin.IsAuto.OnX Padding="Padding.Is5.FromTop" />
<style>
    .brand-icon {
        position: fixed;
        left: 5px;
        top: 5px;
    }

        .brand-icon img {
            max-width: 65px;
            max-height: 65px;
        }

    .login-form input {
        max-width: 300px;
        margin-left: auto;
        margin-right: auto;
    }
</style>

@code {
    bool DemoCustomLogin = false;
    LoginRequest LoginRequest = new();
    AppSettings AppSettings;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Monitor.AppReady != ConnectionState.Up)
            Monitor.OnAppReadyChanged += AppReadyChanged;
        Monitor.OnDirectoryConnectionChanged += ((state) => { InvokeAsync(StateHasChanged); });
    }

    async void AppReadyChanged(ConnectionState state)
    {
        if (state == ConnectionState.Up)
            await InvokeAsync(StateHasChanged);


    }


}
