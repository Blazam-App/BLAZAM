@page "/login"
@using BLAZAM.Common.Data;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@inherits ValidatedForm
@layout LoginLayout
@{
    var redirectUrl = Nav.Uri;
}

<MudText Typo ="Typo.h1">


    @DatabaseCache.ApplicationSettings?.AppName

</MudText>



<div class="brand-icon">
    <MudImage Src="@StaticAssets.ApplicationIconUri" />

</div>

@if (!Program.InDemoMode || DemoCustomLogin)
{
    <form class="login-form" method="post" action="/signin">

        <MudField>

            <MudTextField Placeholder="Username" name="username" @bind-Value=LoginRequest.Username>



            </MudTextField>

        </MudField>
        <MudField>

            <MudTextField Placeholder="Password" name="password" InputType="InputType.Password" @bind-Value=LoginRequest.Password>



            </MudTextField>

        </MudField>
        <MudTextField hidden name="ReturnUrl" Value="@redirectUrl" />


        <MudButton ButtonType=ButtonType.Submit Color="Color.Primary">@AppLocalization["Log In"]</MudButton><br />
    </form>

}
@if (Program.InDemoMode)
{
    <form Class="login-form" method="post" action="/signin">

        <MudTextField name="username" Value=@("demo") hidden />
        <MudTextField name="password" InputType="InputType.Password" Value=@("demo") hidden />
        <MudTextField hidden name="ReturnUrl" Value="@redirectUrl" />

        <MudButtonGroup>
            <MudButton Type=ButtonType.Submit Color="Color.Primary">@AppLocalization["Log In To Demo"]</MudButton>
            <MudMenu Color="Color.Primary">
                <MudMenuItem Clicked=@(()=>{ DemoCustomLogin=true;InvokeAsync(StateHasChanged); })>@AppLocalization["Custom Login"]</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>

    </form>

}
<Copyright/>
<style>
    .brand-icon {
        position: fixed;
        left: 5px;
        top: 5px;
    }

        .brand-icon img {
            max-width: 65px;
            max-height: 65px;
        }

    .login-form input {
        max-width: 300px;
        margin-left: auto;
        margin-right: auto;
    }
</style>

@code {
    bool DemoCustomLogin = false;
    LoginRequest LoginRequest = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Monitor.AppReady != ServiceConnectionState.Up)
            Monitor.OnAppReadyChanged += AppReadyChanged;
        Monitor.OnDirectoryConnectionChanged += ((state) => { InvokeAsync(StateHasChanged); });
    }

    async void AppReadyChanged(ServiceConnectionState state)
    {
        if (state == ServiceConnectionState.Up)
            await InvokeAsync(StateHasChanged);


    }


}
