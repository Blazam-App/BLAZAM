@page "/login"
@using BLAZAM.Static;

@inherits ValidatedForm
@inject IJSRuntime JSRuntime
@layout LoginLayout
@if (attemptingSignIn)
{
    <MudProgressLinear Color="Color.Info" Indeterminate=true />
}

<MudElement Class="brand-icon">
    <MudImage Src="@StaticAssets.ApplicationIconUri" />

</MudElement>


<MudContainer Class="py-5">
    <FullAppName />



    <form onsubmit="@(()=>{AttemptSignIn();})"
          class="login-form"
          method="post"
          action="/signin"
          id="login-form">
        <MudContainer Style="max-width:300px;"
                      Class="py-4">
            @if (!ApplicationInfo.InDemoMode || DemoCustomLogin)
            {



                <MudTextField @ref=_usernameTextField
                              Disabled=@attemptingSignIn
                              Class="justify-center"
                              AutoFocus=true
                              Label=@AppLocalization["Username"]
                              name="Username"
                              @bind-Value=LoginRequest.Username />

                <MudTextField @ref=_passwordTextField
                              Disabled=@attemptingSignIn
                              Class="justify-center"
                              Label=@AppLocalization["Password"]
                              name="Password"
                              InputType="InputType.Password"
                              @bind-Value=LoginRequest.Password />

                <MudTextField Class="d-none"
                              name="ReturnUrl"
                              Value="@redirectUrl" />

                <MudButton OnClick=@(()=>{attemptingSignIn=true;})
                           Class="my-5"
                           ButtonType=ButtonType.Submit
                           Color="Color.Primary">
                    @AppLocalization["Log In"]
                </MudButton>



            }
            else if (ApplicationInfo.InDemoMode)
            {
                <MudContainer Class="d-none">

                    <MudTextField name="username" Value=@("demo") hidden />
                    <MudTextField name="password" InputType="InputType.Password" Value=@("demo") hidden />
                    <MudTextField name="ReturnUrl" Value="@redirectUrl" />
                </MudContainer>
                <LoginConnectionWarnings />
                <MudButtonGroup Color=Color.Primary Variant="Variant.Outlined">


                    <MudButton Disabled=@attemptingSignIn Class="my-6" ButtonType=ButtonType.Submit Color="Color.Primary">@AppLocalization["Log In To Demo"]</MudButton>

                    <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                        <MudMenuItem OnClick=@(()=>{ DemoCustomLogin=true;InvokeAsync(StateHasChanged); })>@AppLocalization["Custom Login"]</MudMenuItem>
                    </MudMenu>
                </MudButtonGroup>

            }

        </MudContainer>

        <MudOverlay Visible="attemptingSignIn"
                    DarkBackground="true"
                    Absolute="true">
            @*<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />*@
        </MudOverlay>
    </form>
    <MudElement Class="d-flex mud-width-full justify-end">
        <Copyright Style="font-size:0.8em;" />

    </MudElement>
</MudContainer>

<style>
    .brand-icon {
        position: fixed;
        left: 5px;
        top: 5px;
    }

        .brand-icon img {
            max-width: 65px;
            max-height: 65px;
        }

    .login-form input {
        max-width: 300px;
        margin-left: auto;
        margin-right: auto;
    }
</style>

@code {
    MudTextField<string>? _usernameTextField;
    MudTextField<string>? _passwordTextField;

    bool attemptingSignIn = false;
    string redirectUrl;

    bool DemoCustomLogin = false;
    LoginRequest LoginRequest = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        redirectUrl = Nav.Uri;
        if (Monitor.AppReady != ServiceConnectionState.Up)
            Monitor.OnAppReadyChanged += AppReadyChanged;
    }

    async void AppReadyChanged(ServiceConnectionState state)
    {
        if (state == ServiceConnectionState.Up)
            await InvokeAsync(StateHasChanged);


    }
    async void AttemptSignIn()
    {
        attemptingSignIn = true;
        await InvokeAsync(StateHasChanged);
        string? authenticationResult;
        if (ValidateInput(out authenticationResult))
            try
            {
                authenticationResult = await JSRuntime.InvokeAsync<string>("attemptSignIn", null);
            }
            catch (Exception ex)
            {

                SnackBarService.Info(ex.Message);
            }

        attemptingSignIn = false;

        if (!authenticationResult.IsNullOrEmpty())
        {
            int resultCode = int.Parse(authenticationResult);

            switch ((LoginResultStatus)resultCode)
            {

                case LoginResultStatus.NoUsername:
                    SnackBarService.Info("Username is missing");
                    break;
                case LoginResultStatus.NoPassword:
                    SnackBarService.Info("Password is missing");
                    break;
                case LoginResultStatus.NoData:
                    SnackBarService.Warning("Login request is missing");

                    break;
                case LoginResultStatus.BadCredentials:
                    SnackBarService.Warning("Username or password not correct");
                    break;
                case LoginResultStatus.UnauthorizedImpersonation:
                    SnackBarService.Error("Unauthorized Impersonation Attempt");

                    break;
                case LoginResultStatus.DeniedLogin:
                    SnackBarService.Error("You are not authorized to login");

                    break;
                case LoginResultStatus.UnknownFailure:
                    SnackBarService.Error("Unknown error while attempting to log in");

                    break;
                case LoginResultStatus.OK:
                    attemptingSignIn = true;
                    Nav.NavigateTo(redirectUrl, true);
                    break;
            }

        }

        await InvokeAsync(StateHasChanged);
    }
    bool ValidateInput(out string? validationResult)
    {
        validationResult = null;
        if (LoginRequest.Valid || (ApplicationInfo.InDemoMode && !DemoCustomLogin)) return true;


        if (LoginRequest.Password.IsNullOrEmpty())
            validationResult = ((int)LoginResultStatus.NoPassword).ToString();
        if (LoginRequest.Username.IsNullOrEmpty())
            validationResult = ((int)LoginResultStatus.NoUsername).ToString();
        return false;
    }

}
