@page "/search"
@page "/search/{SearchTermParameter}"

@inherits AppComponentBase
@attribute [Authorize]
<AuthorizeView Roles="@(UserRoles.SearchUsers+","+UserRoles.SuperAdmin)">


    @if (ApplicationInfo.InDemoMode)
    {
        <MudAlert>
            Try searching Moore, Howard, Evans, Manny...
        </MudAlert>
    }



    @if (Searcher.Results.Count > 1)
    {
        <Row Width="Width.Is100">
                Results found: @Searcher.Results.Count
                Time elapsed: @Searcher.SearchTime
        </Row>

        <Virtualize Items="results" TItem="IDirectoryEntryAdapter" Context="u" OverscanCount="30">
            <ItemContent>
                @if (u.CanRead)
                {


                    <div Class="cursor-pointer" @onclick=@(()=>{Searcher.Results.Clear();Searcher.Results.Add(u);})>
                        <MudText Typo="Typo.h1">@u.ObjectType</MudText>
                        <MudText Typo="Typo.h1">@u.CanonicalName</MudText>
                        <small>@u.SamAccountName</small>
                    </div>


                }
            </ItemContent>
            <Placeholder>
                <div>
                    <MudText Typo="Typo.h1">Loading...</MudText>
                    <small>Loading...</small>
                </div>

            </Placeholder>
        </Virtualize>
    }
    else if (Searcher.Results.Count == 1)
    {

        var result = Searcher.Results[0];
        if (result.CanRead)
        {
            result.OnModelDeleted = (() => { InvokeAsync(StateHasChanged); });

            @if (result.IsDeleted)
            {
                <MudText>Deleted</MudText>
            }
            else
            {
                @switch (result.ObjectType)
                {
                    case ActiveDirectoryObjectType.User:
                        <ViewUser DirectoryEntry="result" />
                        break;
                    case ActiveDirectoryObjectType.Group:
                        <ViewGroup DirectoryEntry="result" />
                        break;
                    case ActiveDirectoryObjectType.Computer:
                        <ViewComputer DirectoryEntry="result" />
                        break;
                    case ActiveDirectoryObjectType.OU:
                        <ViewOU  DirectoryEntry="result" />
                        break;
                }
            }
        }
        @*        else
    {
    <SearchIcon Icon="@SearchIcon" Text="@ModelsTypeName" />

    }
    *@
    }

    else if (LoadingData)
    {
        <SearchIcon Icon="@SearchIcon" Text="@ModelsTypeName" />
    }
    else if (Searcher.Results.Count == 0)
    {
        <MudAlert Class="mud-alert-filled-info">
            No results were found.
        </MudAlert>
    }
  
</AuthorizeView>
@code {

    [CascadingParameter]
    public SearchService SearchParameters { get; set; }

    string ModelsTypeName = "Search";
    protected string SearchIcon { get; set; } = "";
    string? _searchTermParameter;
    /// <summary>
    /// The search term that comes from the URI
    /// </summary>
    [Parameter]
    public virtual string? SearchTermParameter
    {
        get => _searchTermParameter; set
        {
            if (_searchTermParameter == value) return;
            LoadingData = true;
            Searcher?.Cancel();
            _searchTermParameter = value;
            PerformSearch();
            if (_searchTermParameter.IsNullOrEmpty())
                LoadingData = false;

        }
    }


    public ADSearch Searcher { get; set; } = new ADSearch();


    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    /// <summary>
    /// The search term that comes from the search text box
    /// </summary>
    [CascadingParameter]
    public string? SearchTerm { get; set; }

    /// <summary>
    /// Standard search page initializer that copies the url search term to the
    /// text search term if it is set.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Searcher = new ADSearch();
        SearchService.SearchTerm = SearchTermParameter;
        Searcher.GeneralSearchTerm = SearchTermParameter;

        await base.OnInitializedAsync();



        Searcher.OnSearchStarted += (() =>
       {
           InvokeAsync(StateHasChanged);
       });
        Searcher.OnSearchCompleted += (() =>
       {
           InvokeAsync(StateHasChanged);
       });
        Searcher.ResultsCollected += ((batch) =>
             {
                 results.AddRange(batch);
             });
    }
    /// <summary>
    /// Filter for searching objects of only this type
    /// </summary>
    [CascadingParameter]
    public ActiveDirectoryObjectType? SearchObjectType { get; set; }

    protected virtual List<IDirectoryEntryAdapter> results { get; set; } = new List<IDirectoryEntryAdapter>();
    /// <summary>
    /// Public search invokation.
    /// </summary>
    public void SubmitSearch() => SubmitSearch(null);
    /// <summary>
    /// Public search invokation.
    /// </summary>
    /// <param name="searchTerm"></param>
    public void SubmitSearch(string? searchTerm = null)
    {
        if (searchTerm != null)
            SearchService.SearchTerm = searchTerm;
        Nav.NavigateTo("/search/" + SearchService.SearchTerm);


    }


    /// <summary>
    /// Called internally to start a search
    /// </summary>
    /// <remarks>
    /// This method in turn calls <see cref="InvokeSearch"/>
    /// if the <see cref="SearchTermParameter"/> is not
    /// null or empty.
    /// </remarks>
    /// <returns></returns>
    protected async Task PerformSearch()
    {
        results.Clear();

        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        if (!SearchTermParameter.IsNullOrEmpty() && SearchTermParameter?.Length > 0)
            await InvokeSearch();
        else
            Searcher.Results.Clear();
        LoadingData = false;

        await InvokeAsync(StateHasChanged);



    }

    /// <summary>
    /// Invokes the actual search function
    /// that processes the current <see cref="SearchService"/>
    /// settings.
    /// </summary>
    /// <returns></returns>
    protected async Task InvokeSearch()
    {
        if (Searcher == null)
            Searcher = new ADSearch();
        else
            Searcher.Cancel();
        SearchService.SearchTerm = SearchTermParameter;
        Searcher.EnabledOnly = !SearchService.IncludeDisabled;
        Searcher.GeneralSearchTerm = SearchService.SearchTerm;
        Searcher.ObjectTypeFilter = SearchService.SeachObjectType;
        Searcher.ExactMatch = true;

        //Try exact  match search first
        await Searcher.SearchAsync<DirectoryEntryAdapter, IDirectoryEntryAdapter>();
        if (Searcher.Results.Count < 1)
        {
            Searcher.ExactMatch = false;
            results = await Searcher.SearchAsync<DirectoryEntryAdapter, IDirectoryEntryAdapter>();

        }
    }

}
