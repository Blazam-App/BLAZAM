@page "/search"
@page "/search/{SearchTermParameter}"
@inherits AppComponentBase
<h1>Search</h1>
<AuthorizeView Roles="@(UserRoles.SearchUsers+","+UserRoles.SuperAdmin)">

    <SetSubHeader>
        <CascadingValue Value="Searcher">

            <SearchPageHeader OnSubmit=SubmitSearch Text="Search">
                <ADAutoComplete @bind-SearchTerm="@SearchTerm" @bind-SearchDisabled=@SearchDisabledObjects />
            </SearchPageHeader>
        </CascadingValue>
    </SetSubHeader>




    @if (Searcher.Results.Count > 1)
    {
        <Row Width="Width.Is100">
            <Column ColumnSize="ColumnSize.Is6">
                Results found: @Searcher.Results.Count
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                Time elapsed: @Searcher.SearchTime
            </Column>
        </Row>

        <Virtualize Items="results" TItem="IDirectoryModel" Context="u" OverscanCount="30">
            <ItemContent>
                @if (u.CanRead)
                {


                    <Div Class="cursor-pointer" @onclick=@(()=>{ SubmitSearch(u.CanonicalName);}) Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                        <Heading Margin="Margin.Is2.FromBottom">@u.ObjectType</Heading>
                        <Heading Margin="Margin.Is2.FromBottom">@u.CanonicalName</Heading>
                        <Small>@u.SamAccountName</Small>
                    </Div>


                }
            </ItemContent>
            <Placeholder>
                <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                    <Heading Margin="Margin.Is2.FromBottom">Loading...</Heading>
                    <Small>Loading...</Small>
                </Div>

            </Placeholder>
        </Virtualize>
    }

</AuthorizeView>
@code {
    string _searchTermParameter;
    /// <summary>
    /// The search term that comes from the URI
    /// </summary>
    [Parameter]
    public virtual string? SearchTermParameter
    {
        get => _searchTermParameter; set
        {
            if (_searchTermParameter == value) return;
            LoadingData = true;
            Searcher?.Results.Clear();
            _searchTermParameter = value;
            SearchTerm = value;
            PerformSearch();
            //Searcher.GeneralSearchTerm = value;
            if (_searchTermParameter.IsNullOrEmpty())
                LoadingData = false;
            InvokeAsync(StateHasChanged);

        }
    }


    public ADSearch Searcher { get; set; }



    bool _searchDisabledObjects;
    /// <summary>
    /// Indicates whether to search for disabled
    /// Active Diretory Entries
    /// </summary>
    protected bool SearchDisabledObjects
    {
        get => _searchDisabledObjects; set
        {
            if (_searchDisabledObjects == value) return;
            _searchDisabledObjects = value;
            InvokeAsync(StateHasChanged);

        }
    }

    /// <summary>
    /// The search term that comes from the search text box
    /// </summary>
    public string? SearchTerm { get; set; }

    /// <summary>
    /// Standard search page initializer that copies the url search term to the
    /// text search term if it is set.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

        Searcher = new ADSearch();
        Searcher.GeneralSearchTerm = SearchTermParameter;

        base.OnInitializedAsync();
        SearchDisabledObjects = UserStateService?.CurrentUserState?.UserSettings?.SearchDisabledUsers == true;



        Searcher.OnSearchStarted += (() =>
       {
           InvokeAsync(StateHasChanged);
       });
        Searcher.OnSearchCompleted += (() =>
       {
           InvokeAsync(StateHasChanged);
       });
        Searcher.ResultsCollected += ((batch) =>
             {
                 results.AddRange(batch);
                 InvokeAsync(StateHasChanged);
             });

        PerformSearch();
        await InvokeAsync(StateHasChanged);

    }

    protected virtual List<IDirectoryModel> results { get; set; } = new List<IDirectoryModel>();


    protected async Task SubmitSearch() => await SubmitSearch(null);
    protected async Task SubmitSearch(string? searchTerm = null)
    {
        if (searchTerm != null)
            SearchTerm = searchTerm;


        SearchTermParameter = SearchTerm;
        Nav.NavigateTo("/search/" + SearchTerm);


        //Search();

        InvokeAsync(StateHasChanged);
    }

    protected async Task PerformSearch()
    {
        results.Clear();

        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        if (!SearchTermParameter.IsNullOrEmpty() && SearchTermParameter.Length > 2)
        {
            await InvokeSearch();

        }
        else
        {
            Searcher.Results.Clear();
        }

        LoadingData = false;

        InvokeAsync(StateHasChanged);



    }


    public async Task InvokeSearch()
    {
        Searcher.ObjectTypeFilter = ActiveDirectoryObjectType.User;

        Searcher.EnabledOnly = !SearchDisabledObjects;
        Searcher.GeneralSearchTerm = SearchTermParameter;
        Searcher.ObjectTypeFilter = null;
        Searcher.ExactMatch = true;

        await Searcher.SearchAsync<ADUser, IADUser>();
        if (Searcher.Results.Count < 1)
        {
            Searcher.ExactMatch = false;
            await Searcher.SearchAsync<ADUser, IADUser>();

        }
    }

}
