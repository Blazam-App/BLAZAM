@inject IStringLocalizer<AppLocalization> Loc
@inject IStringLocalizer<UserLocalization> ULoc
@inherits DirectoryModelComponent


<AppPageTitle>@Group?.CanonicalName</AppPageTitle>

<LoadingIndicator Height="Height.Is100" Visible=LoadingData>


    <div Padding="Padding.Is3">

        <EditForm Model="Group">
            <SetSubHeader>

                <MudGrid>
                    <MudItem md="10" sm="11">

                        <MudGrid>
                            <MudItem md="4">
                                @Group.CanonicalName


                            </MudItem>
                            <MudItem md="8">
                                <small>@DirectoryTools.PrettifyOu(Group.OU) </small>

                            </MudItem>
                        </MudGrid>
                    </MudItem>


                    <MudItem sm="1" md="2">

                        <MudMenu StartIcon="@Icons.Material.Filled.Settings">


                            @if (Group.CanEdit)
                            {
                                <MudMenuItem OnClick="ToggleEditMode">Edit...</MudMenuItem>
                            }
                            <MudMenuItem OnClick="@(()=>{AssignMemberModal?.Show();})">Add Group Member...</MudMenuItem>
                            @if (Group.CanAssign)
                            {
                                RefreshGroupGroupsAsync();
                                <MudMenuItem OnClick="@(()=>{AssignToModal?.Show();})">Assign To...</MudMenuItem>
                            }

                            @if (Group.CanRename)
                            {
                                <MudMenuItem OnClick="@(()=>{RenameModal?.Show();})">Rename...</MudMenuItem>

                            }
                            @if (Group.CanMove)
                            {
                                <MudMenuItem OnClick="@(()=>{MoveToModal?.Show();})">Move To...</MudMenuItem>
                            }
                            @if (Group.CanDelete)
                            {
                                <MudMenuItem OnClick="@DeleteGroup">Delete...</MudMenuItem>
                            }
                        </MudMenu>
                    </MudItem>
                </MudGrid>



            </SetSubHeader>



            <AppModal  Title="Assign To" @ref=@AssignToModal>
                <AssignToModalContent OnGroupMembershipChange=@((change)=>{AssignToModal?.Hide(); InvokeAsync(StateHasChanged);}) DirectoryModel="Group" />
            </AppModal>
            <AppModal Title="Assign To" @ref=@AssignMemberModal>
                <AddMemberModalContent ModelChanged=@((change)=>{AssignMemberModal?.Hide();InvokeAsync(StateHasChanged);}) Group="Group" />
            </AppModal>
            <AppModal Title="Move To" @ref=@MoveToModal>
                @if (MoveToModal?.IsShown == true)
                {
                    <MoveToOUModalContent DirectoryModel="Group" />
                }
            </AppModal>

            <AppModal Title="Rename Group" @ref=@RenameModal>
                @if (RenameModal?.IsShown == true)
                {
                    <RenameGroupModalContent Group="Group" />
                }
            </AppModal>







            
                <MudTextField Label="@ULoc["Group Name"]" @bind-Value="@Group.CanonicalName" Disabled />


            




            
                <MudTextField Label="@ULoc["Account Name"]" @bind-Value="@Group.SamAccountName" Disabled />


            

            
                        <MudTextField Label="@ULoc["Email Address"]" @bind-Value="@Group.Email" Disabled=@(!EditMode || !Group.CanEditField(ActiveDirectoryFields.Mail)) />


            
@*
            @if (Group.HasMembers)
            {
                <Section Title="Members">
                    <div>
                        <ListGroup Margin=Margin.Is3.OnX Background="Background.Light" Color="Color.Dark">
                            @if (Group.UserMembers.Count > 0)
                            {
                                <ListGroupItem Background="Background.Dark">
                                    Users
                                </ListGroupItem>
                            }
                            @foreach (var user in Group.UserMembers)
                            {
                                var linkAdd = "/users/search/" + user.SamAccountName;
                                <ListGroupItem Background="Background.Light" Color="Color.Dark" Padding="Padding.Is0.OnY.Is3.OnX" Style="height:1.5em">
                                    <GroupMember Member=user Group="Group" To="@linkAdd" OnGroupMembershipChange="@((change)=>{
InvokeAsync(StateHasChanged);
})" />
                                </ListGroupItem>
                            }
                            @if (Group.GroupMembers.Count > 0)
                            {
                                <ListGroupItem Background="Background.Dark">
                                    Groups
                                </ListGroupItem>
                            }
                            @foreach (var group in Group.GroupMembers)
                            {
                                string linkAdd = "/groups/search/" + group.SamAccountName;
                                <ListGroupItem Background="Background.Light" Color="Color.Dark" Padding="Padding.Is0.OnY.Is3.OnX" Style="height:1.5em">
                                    <GroupMember Member=group Group=Group To=@linkAdd OnGroupMembershipChange="@((change)=>{InvokeAsync(StateHasChanged);})" />
                                </ListGroupItem>
                            }
                        </ListGroup>
                    </div>
                </Section>
            }

            @if (Group.CanReadField(ActiveDirectoryFields.MemberOf))
            {

                

                    <MudFieldBody ColumnSize="ColumnSize.Is12">
                        <Row>
                            @if (Group.IsAGroupMember)
                            {
                                var deniedRead = false;
                                @foreach (ADGroup g in Group.MemberOf.Where(g => g.CanRead))
                                {
                                    if (g.CanRead)
                                    {
                                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                                            <AssignedGroup Group=g Member="Group" OnGroupMembershipChange="@((change)=>{InvokeAsync(StateHasChanged);})" />
                                        </Column>
                                    }
                                    else
                                    {
                                        deniedRead = true;
                                    }
                                }

                                if (deniedRead)
                                {
                                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                                        The user is in more groups you don't have access to
                                    </Column>
                                }

                            }
                            else
                            {
                                <PageProgress Visible />
                            }
                        </Row>

                
            }
*@

            @if (Group.HasUnsavedChanges)
            {
                <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
            }


        </EditForm>

    </div>


</LoadingIndicator>



@code {
    AppModal? AssignMemberModal;


    List<IGroupableDirectoryAdapter> Members = new();



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!Group.NewEntry)
            await AuditLogger.Group.Searched(Group);
    }

    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            Group.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }

    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            var changes = Group.Changes;

            Group.CommitChanges();
            await AuditLogger.Group.Changed(Group, changes);

            EditMode = false;
            SnackBarService.Success("The changes made to this group have been saved.", "Changes Saved");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteGroup()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Group.CanonicalName + "?", "Delete Group"))
        {
            try
            {
                Group.Delete();
                SnackBarService.Success(Group.CanonicalName + " has been deleted.", "Group Deleted");

                Group = null;
                Nav.NavigateTo("/groups/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}
