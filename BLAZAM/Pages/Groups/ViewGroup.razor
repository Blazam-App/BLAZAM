@inherits DirectoryEntryViewBase


<AppPageTitle>@Group?.CanonicalName</AppPageTitle>



<EditForm Model="Group">


    <SetSubHeader>
        <DirectoryEntryViewHeader DirectoryEntry="@Group"
                                  OnAssignTo="@(()=>{AssignToModal?.Show();})"
                                  OnChangeThumbnail="@(()=>{UploadThumbnailModal?.Show();})"
                                  OnDelete="@DeleteGroup"
                                  OnMove="@(()=>{MoveToModal?.Show();})"
                                  OnRename="@(()=>{RenameModal?.Show();})"
                                  OnResetPassword="@(()=>{ChangePasswordModal?.Show();})"
                                  OnShowHistory="@(()=>{ChangeHistoryModal?.Show();})"
                                  OnToggleEditMode="ToggleEditMode" />
        <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true" />
    </SetSubHeader>

    <CascadingValue Value="EditMode">


        <AppModal Title=@AppLocalization["Assign To"] @ref=@AssignToModal>
            <AssignToModalContent OnGroupMembershipChange=@((change)=>{AssignToModal?.Hide(); InvokeAsync(StateHasChanged);}) DirectoryModel="Group" />
        </AppModal>
        <AppModal Title=@AppLocalization["Add Members"] @ref=@AssignMemberModal>
            <AddMemberModalContent ModelChanged=@((change)=>{AssignMemberModal?.Hide();InvokeAsync(StateHasChanged);}) Group="Group" />
        </AppModal>
        <AppModal Title=@AppLocalization["Move To"] @ref=@MoveToModal>
            @if (MoveToModal?.IsShown == true)
            {
                <MoveToOUModalContent DirectoryModel="Group" />
            }
        </AppModal>

        <AppModal Title=@AppLocalization["Rename Group"] @ref=@RenameModal>
            @if (RenameModal?.IsShown == true)
            {
                <RenameGroupModalContent Group="Group" />
            }
        </AppModal>

        <MudGrid>
            <MudItem xs="12" md="6">
                <Section Style="min-height:200px;" Title="Group Details">
                    <MudTextField Label="@AppLocalization["Group Name"]" @bind-Value="@Group.CanonicalName" Disabled />

                    <MudTextField Label="@AppLocalization["Account Name"]" @bind-Value="@Group.SamAccountName" Disabled />


                    <MudTextField Label="@AppLocalization["Email Address"]" @bind-Value="@Group.Email" Disabled=@(!EditMode || !Group.CanEditField(ActiveDirectoryFields.Mail)) />
                </Section>
            </MudItem>
            <MudItem xs="12" md="6">
                <Section Style="min-height:200px;" Title=@AppLocalization["Member Of"]>
                    <MemberOfList Model="Group" />

                </Section>
            </MudItem>
            <MudItem xs="12" md="12">
                <Section Style="min-height:200px;" Title=@AppLocalization["Members"]>
                    <GroupMembersDataGrid Group="Group" />

                </Section>
            </MudItem>
        </MudGrid>













        @if (Group.HasUnsavedChanges)
        {
            <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
        }

    </CascadingValue>
</EditForm>


@code {
    AppModal? AssignMemberModal;



    IADGroup Group => DirectoryEntry as IADGroup;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        AuditLogger.Searched(Group);

        LoadingData = false;
        await RefreshEntryComponents();
    }

    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes to " + Group.CanonicalName + "?", "Save Changes"))
        {
            var changes = Group.Changes;

            var dcr = await Group.CommitChangesAsync();
            if (dcr.FailedSteps.Count > 0)
            {
                foreach(var failedStep in dcr.FailedSteps)
                {

                    SnackBarService.Error(failedStep.Name+": "+ failedStep.Exception.Message + " " + failedStep.Exception.InnerException.Message);
                }
            }
            await AuditLogger.Group.Changed(Group, changes);

            EditMode = false;
            SnackBarService.Success("The changes made to this group have been saved.");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteGroup()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Group.CanonicalName + "?", "Delete Group"))
        {
            try
            {
                Group.Delete();
                SnackBarService.Success(Group.CanonicalName + " has been deleted.");

                //Group = null;
                Nav.NavigateTo("/groups/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}
