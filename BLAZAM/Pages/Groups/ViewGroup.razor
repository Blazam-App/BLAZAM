@inherits DirectoryEntryViewBase


<AppPageTitle>@Group?.CanonicalName</AppPageTitle>



<EditForm Model="Group">
    <SetSubHeader>
        <DirectoryEntryViewHeader DirectoryEntry="@Group"
                                  OnAssignTo="@(()=>{AssignToModal?.Show();})"
                                  OnChangeThumbnail="@(()=>{UploadThumbnailModal?.Show();})"
                                  OnDelete="@DeleteGroup"
                                  OnMove="@(()=>{MoveToModal?.Show();})"
                                  OnRename="@(()=>{RenameModal?.Show();})"
                                  OnResetPassword="@(()=>{ChangePasswordModal?.Show();})"
                                  OnToggleEditMode="ToggleEditMode" />
        <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true"/>
    </SetSubHeader>
    
    <CascadingValue Value="EditMode">


    <AppModal Title="Assign To" @ref=@AssignToModal>
        <AssignToModalContent OnGroupMembershipChange=@((change)=>{AssignToModal?.Hide(); InvokeAsync(StateHasChanged);}) DirectoryModel="Group" />
    </AppModal>
    <AppModal Title="Assign To" @ref=@AssignMemberModal>
        <AddMemberModalContent ModelChanged=@((change)=>{AssignMemberModal?.Hide();InvokeAsync(StateHasChanged);}) Group="Group" />
    </AppModal>
    <AppModal Title="Move To" @ref=@MoveToModal>
        @if (MoveToModal?.IsShown == true)
        {
            <MoveToOUModalContent DirectoryModel="Group" />
        }
    </AppModal>

    <AppModal Title="Rename Group" @ref=@RenameModal>
        @if (RenameModal?.IsShown == true)
        {
            <RenameGroupModalContent Group="Group" />
        }
    </AppModal>



    <Section Style="min-height:200px;" Title="Group Details">
        <MudTextField Label="@AppLocalization["Group Name"]" @bind-Value="@Group.CanonicalName" Disabled />

        <MudTextField Label="@AppLocalization["Account Name"]" @bind-Value="@Group.SamAccountName" Disabled />


        <MudTextField Label="@AppLocalization["Email Address"]" @bind-Value="@Group.Email" Disabled=@(!EditMode || !Group.CanEditField(ActiveDirectoryFields.Mail)) />
    </Section>


   <Section Style="min-height:200px;" Title="Member Of">
                                    <MemberOfList Model="Group" />

    </Section>

    <Section Style="min-height:200px;" Title="Members">
        @*<GroupMembersDataGrid Group="Group"/>*@
            
    </Section>
       
   




    @if (Group.HasUnsavedChanges)
    {
        <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
    }

    </CascadingValue>
</EditForm>


@code {
    AppModal? AssignMemberModal;



    IADGroup Group => DirectoryEntry as IADGroup;

  

    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            var changes = Group.Changes;

            Group.CommitChanges();
            await AuditLogger.Group.Changed(Group, changes);

            EditMode = false;
            SnackBarService.Success("The changes made to this group have been saved.", "Changes Saved");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteGroup()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Group.CanonicalName + "?", "Delete Group"))
        {
            try
            {
                Group.Delete();
                SnackBarService.Success(Group.CanonicalName + " has been deleted.", "Group Deleted");

                //Group = null;
                Nav.NavigateTo("/groups/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}
