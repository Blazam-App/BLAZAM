@inherits DirectoryEntryViewBase


<AppPageTitle>@Group?.CanonicalName</AppPageTitle>



<EditForm Model="Group">


    <SetSubHeader>
        <DirectoryEntryViewHeader EditMode="@EditMode"
                                  DirectoryEntry="@Group"
                                  OnAssignTo="@(()=>{AssignToModal?.ShowAsync();})"
                                  OnChangeThumbnail="@(()=>{UploadThumbnailModal?.ShowAsync();})"
                                  OnDelete="@DeleteGroup"
                                  OnMove="@(()=>{MoveToModal?.ShowAsync();})"
                                  OnRename="@(()=>{RenameModal?.ShowAsync();})"
                                  OnResetPassword="@(()=>{ChangePasswordModal?.ShowAsync();})"
                                  OnShowHistory="@(()=>{ChangeHistoryModal?.ShowAsync();})"
                                  OnToggleEditMode="@ToggleEditMode" />
        <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true" />
    </SetSubHeader>

    <CascadingValue Value="EditMode">


        <AppModal Title=@AppLocalization["Assign To"] @ref=@AssignToModal>
            <AssignToModalContent OnGroupMembershipChange=@((change)=>{AssignToModal?.Close(); InvokeAsync(StateHasChanged);}) DirectoryModel="Group" />
        </AppModal>
        <AppModal Title=@AppLocalization["Add Members"] @ref=@AssignMemberModal>
            <AddMemberModalContent ModelChanged=@((change)=>{AssignMemberModal?.Close();InvokeAsync(StateHasChanged);}) Group="Group" />
        </AppModal>
        <AppModal Title=@AppLocalization["Move To"] @ref=@MoveToModal>
            @if (MoveToModal?.IsShown == true)
            {
                <MoveToOUModalContent DirectoryModel="Group" />
            }
        </AppModal>

        <AppModal Title=@AppLocalization["Rename Group"] @ref=@RenameModal>
            @if (RenameModal?.IsShown == true)
            {
                <RenameGroupModalContent Group="Group" />
            }
        </AppModal>





        <MudGrid>
            <MudItem xs="12" md="6">
                <Section Style="min-height:200px;" Title="Group Details">
                    <MudTextField Label="@AppLocalization["Group Name"]" @bind-Value="@Group.CanonicalName" Disabled />

                    <MudTextField Label="@AppLocalization["Account Name"]" @bind-Value="@Group.SamAccountName" Disabled />

                    <MudTextField Label="@AppLocalization["Description"]" @bind-Value="@Group.Description" Disabled=@(!EditMode || !Group.CanEdit) />


                    <MudTextField Label="@AppLocalization["Email Address"]" @bind-Value="@Group.Email" Disabled=@(!EditMode || !Group.CanEditField(ActiveDirectoryFields.Mail)) />

                    <MudStack Row=true>
                        <MudText Typo="Typo.subtitle2">@AppLocalization["Created"]:</MudText>
                        <MudSpacer />
                        <DateWithTimeTooltip DateTime="Group?.Created" />

                    </MudStack>

                    <MudStack Row=true>

                        <MudText Typo="Typo.subtitle2">@AppLocalization["Last Change"]:</MudText>
                        <MudSpacer />

                        <DateWithTimeTooltip DateTime="Group?.LastChanged" />

                    </MudStack>


                    <MudStack Row=true>
                        <MudText Typo="Typo.subtitle2">@AppLocalization["OU"]:</MudText>
                        <MudSpacer />

                        <MudText Style="text-align:end;" Typo="Typo.caption">@Group.OU.ToPrettyOu()</MudText>
                    </MudStack>


                </Section>
            </MudItem>
            <MudItem xs="12" md="6">
                <Section Style="min-height:200px;" Title=@AppLocalization["Parent Groups"]>
                    <MemberOfList Model="Group" />

                </Section>
            </MudItem>


            @if (Group.CanReadField(ActiveDirectoryFields.MemberOf))
            {
                <MudItem xs="12" md="12">
                    <Section Style="min-height:200px;" Title=@AppLocalization["Members"]>
                        <GroupMembersDataGrid Group="Group" />

                    </Section>
                </MudItem>
            }
        </MudGrid>













        @if ((Group.CanEdit || Group.CanUnassign || Group.CanAssign) && Group.HasUnsavedChanges)
        {
            <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
        }

    </CascadingValue>
</EditForm>


@code {
    AppModal? AssignMemberModal;



    IADGroup Group => DirectoryEntry as IADGroup;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        await AuditLogger.Searched(Group);

        LoadingData = false;
        await RefreshEntryComponents();
    }

    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes to " + Group.CanonicalName + "?", "Save Changes"))
        {


            var changes = Group.Changes;
            var assignTo = Group.MembersToAdd;
            var unassignFrom = Group.MembersToRemove;
            var jobResults = await Group.CommitChangesAsync();
            if (jobResults.Result == JobResult.Passed)
            {
                foreach (var assignment in assignTo)
                {
                    await AuditLogger.User.Assigned(assignment.Member, assignment.Group);
                    await AuditLogger.Group.MemberAdded(assignment.Group, assignment.Member);
                }

                foreach (var assignment in unassignFrom)
                {
                    await AuditLogger.User.Unassigned(assignment.Member, assignment.Group);
                    await AuditLogger.Group.MemberRemoved(assignment.Group, assignment.Member);
                }
                if (changes.Any(c => c.Field != "member"))
                {
                    _ = OUNotificationService.PostAsync(Group, NotificationType.Modify);
                    await AuditLogger.Group.Changed(Group, changes.Where(c => c.Field != ActiveDirectoryFields.MemberOf.FieldName).ToList());
                }
                //await AuditLogger.Group.Changed(Group, Group.Changes);

                //_ = OUNotificationService.PostAsync(Group, NotificationType.Modify);

                EditMode = false;
                Nav.WarnOnNavigation = false;
                SnackBarService.Success("The changes made to this group have been saved.");
            }
            else
            {
                await jobResults.ShowJobDetailsDialogAsync(MessageService);
            }


            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteGroup()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Group.CanonicalName + "?", "Delete Group"))
        {
            try
            {
                Group.Delete();
                SnackBarService.Success(Group.CanonicalName + " has been deleted.");
                await AuditLogger.Group.Deleted(Group);
                _ = OUNotificationService.PostAsync(Group, NotificationType.Delete);

                //Group = null;
                Nav.NavigateTo("/groups/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}
