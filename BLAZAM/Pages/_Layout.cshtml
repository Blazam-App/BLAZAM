@using BLAZAM.Common.Data.Database;
@using BLAZAM.Common.Data;
@using BLAZAM.Database.Context;
@using Microsoft.AspNetCore.Components.Web
@using BLAZAM.Static
@using System.Diagnostics
@namespace BLAZAM.Server.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject ApplicationInfo ApplicationInfo

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />

    <link rel="icon" type="image/x-icon" href=@StaticAssets.FaviconUri>
    <link href="css/site.css" rel="stylesheet" />
    <link href="BLAZAM.styles.css" rel="stylesheet" />


    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/MudBlazor.Markdown/MudBlazor.Markdown.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css">

    <link rel="manifest" href="manifest.json" />

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>

<body>
    @RenderBody()

    <div id="blazor-error-ui">
        @if (!ApplicationInfo.inDebugMode)
        {
            <strong>An error has occurred. This application may no longer respond until reloaded.</strong>
        }
        else
        {
            <strong>An unhandled exception has occurred.See browser dev tools for details.</strong>

        }
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <script src="_framework/blazor.server.js"></script>
    @if (!!ApplicationInfo.InDemoMode && !ApplicationInfo.InDebugMode && !Debugger.IsAttached && DatabaseCache.ApplicationSettings?.SendDeveloperAnalytics == true)
    {
        <!-- BLAZAM Dev Google tag (gtag.js) -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=G-415DR9ZVBH"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag() { dataLayer.push(arguments); }
            gtag('js', new Date());

            gtag('config', 'G-415DR9ZVBH');
            gtag('set', 'user_properties', {
                app_version: '@ApplicationInfo.runningVersion'
            });
        </script>
    }
    @if (DatabaseCache.ApplicationSettings?.AnalyticsId.IsNullOrEmpty() == false)
    {
        <!-- Blazam Installation Google tag (gtag.js) -->

        <script async src=@("https://www.googletagmanager.com/gtag/js?id="+@DatabaseCache.ApplicationSettings.AnalyticsId)></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag() { dataLayer.push(arguments); }
            gtag('js', new Date());

            gtag('config', '@DatabaseCache.ApplicationSettings.AnalyticsId');
            gtag('set', 'user_properties', {
                app_version: '@ApplicationInfo.runningVersion'
            });
        </script>
    }

    <script src="~/js/blazam.js"></script>
    <script src="~/lib/svg-gauge/dist/gauge.min.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_content/MudBlazor.Markdown/MudBlazor.Markdown.min.js"></script>

    <script>
        // Wait until a 'reload' button appears
        new MutationObserver((mutations, observer) => {
            if (document.querySelector('#components-reconnect-modal h5 a')) {
                // Now every 10 seconds, see if the server appears to be back, and if so, reload
                async function attemptReload() {
                    await fetch(''); // Check the server really is back
                    location.reload();
                }
                observer.disconnect();
                attemptReload();
                setInterval(attemptReload, 10000);
            }
        }).observe(document.body, { childList: true, subtree: true });
    </script>
    <script>
        if('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js', {scope: '/'})
        .then((reg) => {
           // registration worked
               console.log('Registration succeeded. Scope is ' + reg.scope);
        });
        }

    </script>

</body>
</html>
