@using System.Text.Json
@using System.Net
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@layout InstallLayout
@inherits ValidatedForm

<MudText Typo="Typo.h3" Size="HeadingSize.Is3">Authentication</MudText>
<MudText Typo="Typo.h6">
    Please set a secure admin password.

</MudText>
<MudText Typo="Typo.h6">

    This account will have total application access.
</MudText>
<EditForm Model=settings OnValidSubmit="SubmitForm">
    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["Username"]
        </FieldLabel>
        <ChildContent>
            <MudTextField Label="Username" Text="admin" T=string Disabled />
        </ChildContent>
    </SettingsField>
    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["Password"]
        </FieldLabel>
        <ChildContent>
            <MudTextField Label="Password"
                AutoFocus=true
                          HelperText="Must be 6 characters or longer containing at least one letter,numer and special character."
                          InputType="InputType.Password"
                          @bind-Value=settings.AdminPassword />
        </ChildContent>

    </SettingsField>
    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["Password"]
        </FieldLabel>
        <ChildContent>
            <MudTextField @bind-Value=confirmedPassword Label="Confirm Password" Validation=@AppValidationRule.IsEqual(confirmedPassword,settings.AdminPassword) InputType="InputType.Password" T="string" />
        </ChildContent>

    </SettingsField>


    <MudButton Disabled=SaveDisabled Color="Color.Primary" ButtonType="ButtonType.Submit">Save Password</MudButton>
</EditForm>


@code {
    [Parameter]
    public EventCallback StepCompleted { get; set; }

    public string adminPassword = "";
    string confirmedPassword;
    AuthenticationSettings settings=new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        settings = await Context.AuthenticationSettings.FirstOrDefaultAsync();
        await InvokeAsync(StateHasChanged);

    }

    public async void SubmitForm()
    {
        try
        {

            if (settings.Id == 0)
                Context.AuthenticationSettings.Add(settings);

                settings.AdminPassword = EncryptionService.EncryptObject(confirmedPassword);
            await Context.SaveChangesAsync();
            StepCompleted.InvokeAsync();

        }
        catch (Exception ex)
        {
            MessageService.Error(ex.Message + " " + ex.InnerException?.Message);
            

        }
        await InvokeAsync(StateHasChanged);
    }
    //async void Matches(ValidatorEventArgs e)
    //{
    //    e.Status = ((adminPassword.Equals(e.Value as string)) ? ValidationStatus.Success : ValidationStatus.Error);
    //}
}
