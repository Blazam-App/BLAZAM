@using System.Text.Json
@using System.Net
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@layout InstallLayout
@inherits ValidatedForm

<MudText Typo="Typo.h1" Size="HeadingSize.Is3">Authentication</MudText>
<div>
    <MudText Typo="Typo.h1" Size="HeadingSize.Is6">
        Please set a secure admin password.

    </MudText>
    <MudText Typo="Typo.h1" Size="HeadingSize.Is6">

        This account will have total application access.
    </MudText>
    <MudForm @onsubmit="SubmitForm">
        <SettingsField>

            <MudTextField Label="Username" Text="admin" T=string Disabled />

        </SettingsField>
        <SettingsField>

            <MudTextField Label="Password"
                          HelperText="=Must be 6 characters or longer containing at least one letter,numer and special character."
                          InputType="InputType.Password"
                          @bind-Value=adminPassword>



            </MudTextField>

        </SettingsField>
        <SettingsField>

            <MudTextField Label="Confirm Password" InputType="InputType.Password" T="string">

            </MudTextField>

        </SettingsField>


        <MudButton Disabled=saveDisabled Color="Color.Primary" Type="ButtonType.Submit">Save Password</MudButton>
    </MudForm>

</div>


@code {
    [Parameter]
    public EventCallback StepCompleted { get; set; }

    private string errorText = "";
    private string showError = "d-none";
    public string adminPassword = "";
    public async void SubmitForm()
    {
        IDatabaseContext context = DbFactory.CreateDbContext();
        try
        {
            context.AuthenticationSettings.FirstOrDefault().AdminPassword = adminPassword;

            await context.SaveChangesAsync();
            StepCompleted.InvokeAsync();

        }
        catch (Exception ex)
        {
            errorText = ex.Message + " " + ex.InnerException?.Message;
            showError = "";

        }
        await InvokeAsync(StateHasChanged);
    }
    //async void Matches(ValidatorEventArgs e)
    //{
    //    e.Status = ((adminPassword.Equals(e.Value as string)) ? ValidationStatus.Success : ValidationStatus.Error);
    //}
}
