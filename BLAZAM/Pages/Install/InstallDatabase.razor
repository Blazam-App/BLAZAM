@using Microsoft.EntityFrameworkCore
@layout InstallLayout
@inherits AppComponentBase
@{
    string connString;

    using (var context = DbFactory.CreateDbContext())
    {
        connString = context.Database.GetConnectionString();

        // Censor Password
        string[] keyValuePairs = connString.Split(';');

        // Remove the key-value pair for the Password parameter
        keyValuePairs = keyValuePairs.Where(x => !x.StartsWith("Password=")).ToArray();

        // Join the list back into a single connection string
        connString = string.Join(";", keyValuePairs);

    }

}
<Heading Size="HeadingSize.Is3">Database</Heading>
@if (!Completed && Monitor.DatabaseUpdatePending)
{
    <Div>
    <Heading Size="HeadingSize.Is5">The database is ready to install.</Heading>
        <Heading Size="HeadingSize.Is5">Type</Heading><Text>@DatabaseContext.ConnectionString.DatabaseType</Text>
        <Heading Size="HeadingSize.Is5">Server</Heading><Text>@DatabaseContext.ConnectionString.ServerAddress</Text>
        <Heading Size="HeadingSize.Is5">Port</Heading><Text>@DatabaseContext.ConnectionString.ServerPort</Text>
        <Heading Size="HeadingSize.Is5">Database</Heading><Text>@DatabaseContext.ConnectionString.Database</Text>
<Divider/>
    <Help>Make sure the settings above are as intended. The application should be provided a
        dedicated database. If you are using SQLite as your database option you don't need to worry about this.
    </Help>
        <Progress Max="100" Value="@progressValue" Animated Striped/>
        <br />
        <Button Color="Color.Primary" @onclick="InstallDB">Install</Button>
    </Div>
}

else
{
    <Div>
    <Heading Size="HeadingSize.Is6">Installed</Heading>
    </Div>
}

@code {
    [Parameter]
    public bool Completed { get; set; }
    [Parameter]
    public EventCallback StepCompleted { get; set; }
    int? progressValue = 0;
    protected void InstallDB()
    {
        Task.Run(async () =>
        {

            progressValue = 100;
            await InvokeAsync(StateHasChanged);
            if (await Program.ApplyDatabaseMigrations(true))
            {
                Completed = true;
                InvokeAsync(StepCompleted.InvokeAsync);

            }
            progressValue = 0;

            await InvokeAsync(StateHasChanged);

        });
    }
}
