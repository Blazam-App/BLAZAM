@using Microsoft.EntityFrameworkCore
@layout InstallLayout
@inherits AppComponentBase
@{
    string? connString;

    using (var context = DbFactory.CreateDbContext())
    {
        connString = context.Database.GetConnectionString();
        if (connString != null && connString.Contains(";"))
        {
            // Censor Password
            string[] keyValuePairs = connString.Split(';');

            // Remove the key-value pair for the Password parameter
            keyValuePairs = keyValuePairs.Where(x => !x.StartsWith("Password=")).ToArray();

            // Join the list back into a single connection string
            connString = string.Join(";", keyValuePairs);
        }

    }

}
<MudText Typo ="Typo.h1" Size="HeadingSize.Is3">Database</MudText>
@if (!Completed && Monitor.DatabaseUpdatePending)
{
    <div>
        <MudText Typo ="Typo.h1" Size="HeadingSize.Is5">The database is ready to install.</MudText>
        <MudText Typo ="Typo.h1" Size="HeadingSize.Is5">Type</MudText><MudText>@Context.ConnectionString?.DatabaseType</MudText>
        <MudText Typo ="Typo.h1" Size="HeadingSize.Is5">Server</MudText><MudText>@Context.ConnectionString?.ServerAddress</MudText>
        <MudText Typo ="Typo.h1" Size="HeadingSize.Is5">Port</MudText><MudText>@Context.ConnectionString?.ServerPort</MudText>
        <MudText Typo ="Typo.h1" Size="HeadingSize.Is5">Database</MudText><MudText>@Context.ConnectionString?.Database</MudText>
        <divider />
        <Help>
            Make sure the settings above are as intended. The application should be provided a
            dedicated database. If you are using SQLite as your database option you don't need to worry about this.
        </Help>
        <Progress Max="100" Value="@progressValue" Animated Striped />
        <br />
        <MudButton Color="Color.Primary" @onclick="InstallDB">Install</MudButton>
    </div>
}

else
{
    <div>
        <MudText Typo ="Typo.h1" Size="HeadingSize.Is6">Installed</MudText>
    </div>
}

@code {
    [Parameter]
    public bool Completed { get; set; }
    [Parameter]
    public EventCallback StepCompleted { get; set; }
    int? progressValue = 0;
    protected void InstallDB()
    {
        Task.Run(async () =>
        {

            progressValue = 100;
            await InvokeAsync(StateHasChanged);
            try
            {
                if (await Program.ApplyDatabaseMigrations(true))
                {
                    Completed = true;
                    await InvokeAsync(StepCompleted.InvokeAsync);

                }
                progressValue = 0;
            }
            catch(Exception  ex)
            {
                MessageService.Error(ex.Message, ex.GetType().FullName);
            }
            await InvokeAsync(StateHasChanged);

        });
    }
}
