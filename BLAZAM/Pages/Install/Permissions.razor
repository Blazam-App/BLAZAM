@page "/install/permissions"

@layout InstallLayout
@inherits ValidatedForm
@{


}

<h3>Permissions</h3>


<h5>Please configure at least one super admin Active Directory group.</h5>
<label>Admin Group Name</label>
<br />
<ADAutoComplete SearchObjectType="ActiveDirectoryObjectType.Group" @bind-SelectedResult="adminGroupName"/>


<br />
<div>
    @foreach (PermissionDelegate adminGroup in adminGroups)
    {
        <div>
            @ActiveDirectoryContext.Instance.Groups.FindGroupBySID(adminGroup.DelegateSid)?.GroupName
            
            <button tpye="button" @onclick="(() => Remove(adminGroup))">-</button>
        </div>
    }
</div>


<button @onclick="Add" type="button" class="btn btn-primary">+</button><br/>
<Button Color="Color.Success" @onclick=@(()=>StepCompleted.InvokeAsync()) Disabled="@disableNext">Proceed</Button>

    



@code {
    bool disableNext = true;
    [Parameter]
    public EventCallback StepCompleted { get; set; }
    List<PermissionDelegate> adminGroups { get; set; } = new List<PermissionDelegate>();
    public bool Loading { get; set; }
    public IDirectoryEntryAdapter adminGroupName { get; set; }

    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();
        try
        {
            adminGroups = Context.PermissionDelegate.Where(e => e.IsSuperAdmin == true).ToList();
            if (adminGroups.Any() != null)
            {
                disableNext = false;
            }
        }
        catch (Exception)
        {

        }

    }
    private async void Add()
    {
        
        if (adminGroupName != null)
        {
            await Context.PermissionDelegate.AddAsync(new PermissionDelegate
                {
                    DelegateSid = adminGroupName.SID,
                    IsSuperAdmin = true,
                });
            Context.SaveChanges();
            adminGroups = await Context.PermissionDelegate.Where(e => e.IsSuperAdmin == true).ToListAsync();
            if (adminGroups.Any() != null)
            {
                disableNext = false;
            }
            await InvokeAsync(StateHasChanged);

        }
    }
    private async void Remove(PermissionDelegate level)
    {
        Context.PermissionDelegate.Remove(level);
        await Context.SaveChangesAsync();
        adminGroups = await Context.PermissionDelegate.Where(e => e.IsSuperAdmin == true).ToListAsync(); 
        if (adminGroups.Any() != null)
        {
            disableNext = false;
        }
        await InvokeAsync(StateHasChanged);

    }


}
