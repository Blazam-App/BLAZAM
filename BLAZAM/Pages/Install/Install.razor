@page "/install"
@page "/install/{selectedStep}"
@layout MinLayout
@inherits AppComponentBase


<PageTitle>Install - Blazam</PageTitle>
<Steps SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged" NavigationAllowed="NavigationAllowed">
    <Items>
        <Step Completed=@(_step>1) Name="1">@SettingsLocalization["Database"]</Step>
        <Step Completed=@(_step>2) Name="2">@SettingsLocalization["Authentication"]</Step>
        <Step Completed=@(_step>3) Name="3">@SettingsLocalization["Directory"]</Step>
        @*<Step Completed=@(_step>4) Name="4">@SettingsLocalization["Permissions"]</Step>*@
        <Step Name="step4">
            <Marker>
                <Icon Name="IconName.Flag" />
            </Marker>
            <Caption>
                Finish
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name="0">

            <Card>
                <CardHeader>
                    Checking Installation
                </CardHeader>
                <CardBody>
                    Please wait while the installation status of the application is checked...
                </CardBody>
            </Card>

        </StepPanel>
        <StepPanel Name="1">
            @if (_step > 0)
            {
                <InstallDatabase Completed=@(_step>1) StepCompleted="UpdateStatuses" />
            }
        </StepPanel>
        <StepPanel Name="2">
            @if (_step > 1)
            {
                <Authentication StepCompleted="UpdateStatuses" />
            }

        </StepPanel>

        <StepPanel Name="3">
            @if (_step > 2)
            {
                <ADirectory StepCompleted="UpdateStatuses" />
            }
        </StepPanel>
        @*
        <StepPanel Name="4">

        @if (_step > 3)
        {
        <Permissions StepCompleted="ShowLastStep" />
        }

        </StepPanel>
        *@
        <StepPanel Name="4">
            <h2>Installation Complete</h2>
            <Button @onclick="FinalizeInstall" Color="Color.Success">Finalize Install</Button>
        </StepPanel>
    </Content>
</Steps>








@code {
    int _step = 0;
    [Parameter]
    public string selectedStep { get; set; } = "0";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Program.InstallationCompleted)
            Nav.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //CheckDatabase
        UpdateStatuses();


    }
    private bool NavigationAllowed(StepNavigationContext context)
    {
        if (context.NextStepIndex > _step)
        {
            return false;
        }

        return true;
    }
    async void UpdateStatuses()
    {
        Context = DbFactory.CreateDbContext();
        _step = 1;
        selectedStep = "1";
        if (Context != null)
        {
            if (Context.Status == ServiceConnectionState.Up)
            {

                if (!Context.Database.GetPendingMigrations().Any())
                {
                    _step = 2;
                    selectedStep = "2";

                    await InvokeAsync(StateHasChanged);

                    try
                    {
                        if (Context.AuthenticationSettings.FirstOrDefault() != null && Context.AuthenticationSettings.FirstOrDefault()?.AdminPassword != "password")
                        {
                            _step = 3;
                            selectedStep = "3";

                            await InvokeAsync(StateHasChanged);


                            //check directory
                            if (Context.ActiveDirectorySettings.FirstOrDefault() != null)
                            {
                                if (Directory.Status == DirectoryConnectionStatus.OK)
                                {
                                    _step = 4;
                                    selectedStep = "4";

                                    await InvokeAsync(StateHasChanged);
                                    //check permissions
                                    /*
                                    PermissionDelegate currentSettings = Context.PermissionDelegate.FirstOrDefault();
                                        if (currentSettings != null)
                                        {

                                        if (Context.Status == DatabaseContext.ConnectionStatus.OK)
                                            {
                                            _step = 5;
                                            selectedStep = "5";

                                            //NavManager.NavigateTo("/");
                                }


                                }
                                */
                                }

                            }
                        }
                    }
                    catch (Exception)
                    {

                    }
                }

            }
            else
            {
                Nav.NavigateTo("/oops");
            }
        }
    }

    private Task OnSelectedStepChanged(string name)
    {
        selectedStep = name;

        return Task.CompletedTask;
    }
    private void ShowLastStep()
    {
        selectedStep = "6";
        _step = 6;
        UpdateStatuses();
    }
    private void RecheckWritable()
    {
        Program.CheckWritablePathPermissions();
        UpdateStatuses();
    }
    private async void FinalizeInstall()
    {
        try
        {
            if (Context?.AppSettings.FirstOrDefault() == null)
            {
                var settings = new AppSettings();
                settings.AppSettingsId = 1;
                Context?.AppSettings.Add(settings);
                Context?.SaveChanges();
                DatabaseCache.ApplicationSettings = settings;
            }
            (await Context.AppSettings.FirstOrDefaultAsync()).InstallationCompleted = true;
            var result = await Context.SaveChangesAsync();
            Program.InstallationCompleted = true;
            Nav.NavigateTo("/home", true);
        }
        catch
        {
            await NotificationService.Error("Sorry, ran into an error while finalizing install");

        }

    }
}
