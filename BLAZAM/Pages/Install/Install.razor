@page "/install"
@page "/install/{selectedStep}"
@layout InstallLayout
@inherits AppComponentBase
@inject ApplicationManager ApplicationManager

<PageTitle>Install - Blazam</PageTitle>

@if (completedSteps == 0)
{
    <MudCard>
        <MudCardHeader>
            Checking Installation
        </MudCardHeader>
        <MudCardContent>
            Please wait while the installation status of the application is checked...

        </MudCardContent>
    </MudCard>
}
else
{
    <MudTabs Centered Elevation="1" ActivePanelIndex="@selectedStep" ActivePanelIndexChanged="@OnSelectedStepChanged">
    <MudTabPanel Disabled=@(completedSteps<1) 
        Icon="@(completedSteps>1?Icons.Material.Filled.CheckCircle:null)" 
        ToolTip="Database" 
        Text="1">
            @if (completedSteps > 0)
            {
                <InstallDatabase Completed=@(completedSteps>1) StepCompleted="UpdateStatuses" />
            }
        </MudTabPanel>
        <MudTabPanel Disabled=@(completedSteps<2)
            Text="2" 
            ToolTip="Authentication" 
            Icon="@(completedSteps>2?Icons.Material.Filled.CheckCircle:null)">
            @if (completedSteps > 1)
            {
                <Authentication StepCompleted="UpdateStatuses" />
            }

        </MudTabPanel>
        <MudTabPanel Disabled=@(completedSteps<3) 
            Text="3"
            ToolTip="Active Directory"
            Icon="@(completedSteps>3?Icons.Material.Filled.CheckCircle:null)">
            @if (completedSteps > 2)
            {
                <ADirectory StepCompleted="UpdateStatuses" />
            }
        </MudTabPanel>
        <MudTabPanel Disabled=@(completedSteps<4) 
            Icon="@Icons.Material.Filled.FlagCircle"
            ToolTip="Finish">
            <h2>Installation Complete</h2>
            <MudButton @onclick="FinalizeInstall" Color="Color.Success">Finalize Install</MudButton>
        </MudTabPanel>

    </MudTabs>
}










@code {
    int _completedSteps = 0;
    int completedSteps
    {
        get => _completedSteps; set
        {
            _completedSteps = value;
            selectedStep = value-1;

        }
    }
    [Parameter]
    public int selectedStep { get; set; } = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ApplicationInfo.InstallationCompleted)
            Nav.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //CheckDatabase
        UpdateStatuses();


    }

    async void UpdateStatuses()
    {
        Context = DbFactory.CreateDbContext();
        completedSteps = 1;
        if (Context != null)
        {
            if (Context.Status == ServiceConnectionState.Up)
            {

                if (!Context.Database.GetPendingMigrations().Any())
                {
                    completedSteps = 2;

                    await InvokeAsync(StateHasChanged);

                    try
                    {
                        if (Context.AuthenticationSettings.FirstOrDefault() != null && Context.AuthenticationSettings.FirstOrDefault()?.AdminPassword != "password")
                        {
                            completedSteps = 3;

                            await InvokeAsync(StateHasChanged);


                            //check directory
                            if (Context.ActiveDirectorySettings.FirstOrDefault() != null)
                            {
                                if (Directory.Status == DirectoryConnectionStatus.OK)
                                {
                                    completedSteps = 4;

                                    await InvokeAsync(StateHasChanged);

                                }

                            }
                        }
                    }
                    catch (Exception)
                    {

                    }
                }

            }
            else
            {
                Nav.NavigateTo("/oops");
            }
        }
    }

    private Task OnSelectedStepChanged(int index)
    {
        selectedStep = index;

        return Task.CompletedTask;
    }
    private void ShowLastStep()
    {
        _completedSteps = 6;
        UpdateStatuses();
    }

    private async void FinalizeInstall()
    {
        try
        {
            if (Context?.AppSettings.FirstOrDefault() == null)
            {
                var settings = new AppSettings();
                settings.Id = 1;
                Context?.AppSettings.Add(settings);
                Context?.SaveChanges();
                DatabaseCache.ApplicationSettings = settings;
            }
            (await Context.AppSettings.FirstOrDefaultAsync()).InstallationCompleted = true;
            var result = await Context.SaveChangesAsync();
            ApplicationInfo.InstallationCompleted = true;
            Nav.NavigateTo("/home", true);
            ApplicationManager.Restart();
        }
        catch
        {
            SnackBarService.Error("Sorry, ran into an error while finalizing install");

        }

    }
}
