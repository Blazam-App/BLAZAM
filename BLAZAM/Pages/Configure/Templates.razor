@page "/templates"
@page "/templates/{TemplateIdParameter:int?}"
@inherits TemplateComponent
@attribute [Authorize(Roles = UserRoles.SuperAdmin)]

<AppPageTitle>@AppLocalization["Templates"]</AppPageTitle>

<SetHeader @ref=Header>


    <MudStack Row=true>
        <MudText Class="align-middle" Align="Align.Center">
            @AppLocalization["Templates"]

        </MudText>

        <MudSelectList T="string"
                       Label="Category"
                       Values="TemplateCategories"
                       @bind-Value="@SelectedCategory" />

        <MudSelectList T="DirectoryTemplate"
                       Disabled=@(Templates.Where(t=>t.DeletedAt==null).Count()<1)
                       Label="Template"
                       Values="@Templates.Where(t=>t.DeletedAt==null)"
                       Value="@SelectedTemplate"
                       ValueChanged="@((selected)=>{
                                        SelectedTemplate = selected;
                                        Nav.NavigateTo("/templates/"+selected.Id);
                                        })" />
        @if (createFirstTemplateTooltipVisible)
        {
            <MudTooltip Color=Color.Error
                        ShowOnHover=@(Templates?.Count() < 1)
                        Arrow=true
                        IsVisible=@(createFirstTemplateTooltipVisible)
                        Text="Create your first template">



                <MudIconButton Color=Color.Tertiary
                               Class="align-middle"
                               OnClick="@(NewTemplate)"
                               Icon="@Icons.Material.Filled.AddCard" />

            </MudTooltip>
        }
        else
        {
            <MudTooltip Text="@AppLocalization["New template"]">
                <MudIconButton Color=Color.Tertiary
                               Class="align-middle"
                                 OnClick="@(NewTemplate)"
                               Icon="@Icons.Material.Filled.AddCard" />

            </MudTooltip>
        }

        @if (SelectedCategory != null && SelectedCategory != "All")
        {
            <MudTooltip Text="@AppLocalization["Rename Category"]">
                <MudIconButton OnClick=@(()=>{RenameModal?.ShowAsync();})
                               Color="Color.Tertiary"
                               Class="align-middle"
                               Icon="@Icons.Material.Filled.ChangeCircle" />
            </MudTooltip>
        }
        @if (SelectedTemplate != null)
        {
            <MudTooltip Text="@AppLocalization["Copy template"]">

                <MudIconButton OnClick=@(async()=>{await DuplicateTemplate(SelectedTemplate);})
                               Color="Color.Tertiary"
                               Class="align-middle"
                               Icon="@Icons.Material.Filled.FileCopy" />
            </MudTooltip>
            <MudTooltip Text="@AppLocalization["Remove template"]">


                <MudIconButton Color=Color.Error
                               Class="align-middle"
                               OnClick="DeleteTemplate"
                               Icon="@Icons.Material.Filled.Delete" />
            </MudTooltip>
        }

        @if (Templates?.Any(t => t.DeletedAt != null)==true)
        {
            <MudTooltip Text="@AppLocalization["Restore templates"]">

                <MudIconButton OnClick=@(async()=>{RestoreModal?.ShowAsync();})
                               Color="Color.Warning"
                               Class="align-middle"
                               Icon="@Icons.Material.Filled.RestoreFromTrash" />
            </MudTooltip>
        }
        <MudSpacer/>
        <AppDocumentationButton Page="/admin/templates" />
    </MudStack>

    <AppModal @ref=RenameModal Title=@AppLocalization["Rename Category"]>


        <MudTextField Label="New Name" @bind-Value=newCategoryName />


        <MudButton Color="Color.Primary" OnClick="RenameSelectedCategory">Save</MudButton>
    </AppModal>

    <AppModal YesText="@AppLocalization["Restore"]" OnYes="RestoreSelectedTemplates" @ref=RestoreModal Title=@AppLocalization["Restore Template"]>

        <MudDataGrid @ref=restoreDataGrid Items="Templates.Where(t=>t.DeletedAt!=null)" SelectOnRowClick=true>
            <Columns>
                <SelectColumn />
                <PropertyColumn Property="t=>t.Name" />
                <PropertyColumn Property="t=>t.Category" />

            </Columns>
        </MudDataGrid>



    </AppModal>
</SetHeader>
@if (Templates.Count() > 0)
{

    <MudCard Elevation="2">
        <MudExpansionPanel Text="@AppLocalization["Inheritance Tree"]">
            <TemplateInheritanceTreeView RootTemplate="CreateTemplateHash"
                                         SelectedTemplate="SelectedTemplate"
                                         OnTemplateSelected="@((template)=>{SelectedTemplate=template; Nav.NavigateTo("/templates/"+template.Id);})" />
        </MudExpansionPanel>
    </MudCard>
}
@if (SelectedTemplate != null)
{
    <EditDirectoryTemplate Header="Header" @bind-DirectoryTemplate=@SelectedTemplate
                           ClearSelectedTemplate="()=>{SelectedTemplate = null; InvokeAsync(StateHasChanged);}" />

}



@code {
    bool createFirstTemplateTooltipVisible;
    AppModal? RenameModal;
    AppModal? RestoreModal;
    MudDataGrid<DirectoryTemplate>? restoreDataGrid;
    string? newCategoryName;



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Templates?.Count() < 1)
        {

            await Task.Delay(1000);
            createFirstTemplateTooltipVisible = true;




        }
        await RefreshComponents();
    }

    protected async Task DuplicateTemplate(DirectoryTemplate template)
    {
        SelectedTemplate = (DirectoryTemplate)template.Clone(Context);
        await RefreshComponents();


    }
    async Task RenameSelectedCategory()
    {
        var temp = Context?.DirectoryTemplates.Where(t => t.Category == SelectedCategory).ToList();
        if (temp != null)
        {
            foreach (var template in temp)
            {
                template.Category = newCategoryName;
            }
        }
        if (SelectedTemplate!=null && SelectedTemplate.Category == SelectedCategory)
            SelectedTemplate.Category = newCategoryName;
        if (Context != null && await Context.SaveChangesAsync() > 0)
        {

            SnackBarService.Success(AppLocalization["Renamed category"] + ": " + SelectedCategory + " to " + newCategoryName);
            SelectedCategory = newCategoryName;
            await FetchTemplates();
            RenameModal?.Close();
        }
        await RefreshComponents();

    }
    private void NewTemplate()
    {
        SelectedTemplate = new();
        TemplateIdParameter = null;
        SelectedTemplate = new();
        Nav.NavigateTo("/templates/0",true);
    }
    private HashSet<DirectoryTemplate> CreateTemplateHash
    {
        get

        {
            HashSet<DirectoryTemplate> rootTemplates = Templates.Where(t => t.ParentTemplate == null && t.DeletedAt == null).ToHashSet();
            rootTemplates = RecursiveFill(rootTemplates);
            return rootTemplates;

        }
    }

    private HashSet<DirectoryTemplate> RecursiveFill(HashSet<DirectoryTemplate> setToFill)
    {
        foreach (var template in setToFill)
        {
            if (Templates.Any(t => t.ParentTemplateId == template.Id))
            {
                var children = Templates.Where(t => t.ParentTemplateId == template.Id && t.DeletedAt == null).ToHashSet();
                children = RecursiveFill(children);
                template.ChildTemplates = children;
            }
        }
        return setToFill;
    }
    private async Task DeleteTemplate()
    {
        if (SelectedTemplate != null)
        {
            SelectedTemplate.DeletedAt = DateTime.Now;
            await Context.SaveChangesAsync();
            SelectedTemplate = null;
            await InvokeAsync(StateHasChanged);
        }
    }
    private async void RestoreSelectedTemplates()
    {

        foreach (var template in restoreDataGrid.SelectedItems)
        {
            template.DeletedAt = null;
            try
            {
                Templates.First(t => template.Equals(t)).DeletedAt = null;
            }
            catch
            {
                //Do nothing, it's a best attempt
            }
        }
        var result = await Context.SaveChangesAsync();
        RestoreModal?.Close();
        SnackBarService.Success(AppLocalization["Template(s) restored"]);
    }
}
