@page "/templates"
@inherits TemplateComponent
@attribute [Authorize(Roles=UserRoles.SuperAdmin)]
<h3>Templates</h3>
<SetHeader @ref=Header>

    <Bar Mode="BarMode.Horizontal"
         CollapseMode="BarCollapseMode.Small"
         Breakpoint="Breakpoint.Desktop"
         NavigationBreakpoint="Breakpoint.Tablet"
         ThemeContrast="ThemeContrast.Dark"
         Padding="Padding.Is2.OnX"
         Background="Background.Dark"
         TextColor="TextColor.Light"
         VerticalAlignment="VerticalAlignment.Middle">
        <BarBrand Padding=Padding.Is0.OnY Width="Width.Is100">
            <Row Style="font-size:0.8em;">
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is2.OnFullHD.Is2.OnDesktop.Is3.OnTablet">
                    <Div TextOverflow="TextOverflow.Wrap">
                        Templates

                    </Div>

                </Column>
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is9.OnFullHD.Is8.OnDesktop.Is7.OnTablet" Display="Display.InlineFlex">
                    <DropdownList TItem="string" TValue="string"
                                  Data="@this.TemplateCategories"
                                  TextField="@((item)=>item)"
                                  ValueField="@((item)=>item)"
                                  @bind-SelectedValue="@SelectedCategory"
                                  Color="Color.Primary"
                                  MaxMenuHeight="200px">
                        @if (SelectedCategory == null)
                        {
                            @("Choose a category")
                        }
                        else
                        {
                            @SelectedCategory
                        }
                    </DropdownList>
                    <DropdownList TItem="DirectoryTemplate" TValue="DirectoryTemplate"
                                  Data="@this.Templates"
                                  TextField="@((item)=>item.Name)"
                                  ValueField="@((item)=>item)"
                                  @bind-SelectedValue="@SelectedTemplate"
                                  Color="Color.Primary"
                                  MaxMenuHeight="200px">
                        @if (SelectedTemplate == null)
                        {
                            @("Choose a template")
                        }
                        else
                        {
                            @SelectedTemplate.Name
                        }
                    </DropdownList>

                </Column>
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is2.OnTablet">
                    <Button Float="Float.End" Color=Color.Primary TextColor="TextColor.Light" Clicked="@(()=>{SelectedTemplate = new();})"><Icon Name="IconName.PlusSquare" /></Button>
                    @if (SelectedCategory != null && SelectedCategory != "All")
                    {
                        <Button Clicked=@(()=>{RenameModal.Show();}) Color="Color.Primary"><Icon Name="@("fa-solid fa-pen-to-square")" /></Button>
                    }
                    @if (SelectedTemplate != null)
                    {
                        <Button Clicked=@(()=>{DuplicateTemplate(SelectedTemplate);}) Color="Color.Primary"><Icon Name="@("fa-solid fa-copy")" /></Button>
                    }


                </Column>
            </Row>
        </BarBrand>
    </Bar>
    <AppModal @ref=RenameModal Title="Rename Category">
        <Field>
            <FieldLabel>New Name</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text=newCategoryName />
            </FieldBody>
        </Field>
        <Button Color="Color.Primary" Clicked="RenameSelectedCategory">Save</Button>
    </AppModal>
</SetHeader>
@if (SelectedTemplate != null)
{
    <EditDirectoryTemplate DirectoryTemplate=@SelectedTemplate />
}
@*<ShowDirectoryTemplates />*@




@code {
    AppModal? RenameModal;
    string? newCategoryName;
    protected async Task DuplicateTemplate(DirectoryTemplate template)
    {
        SelectedTemplate = (DirectoryTemplate)template.Clone();
        await InvokeAsync(StateHasChanged);
        Header?.OnRefreshRequested?.Invoke();


    }
    async Task RenameSelectedCategory()
    {
        var temp = Context?.DirectoryTemplates.Where(t => t.Category == SelectedCategory).ToList();
        foreach (var template in temp)
        {
            template.Category = newCategoryName;
        }
        if (SelectedTemplate.Category == SelectedCategory)
            SelectedTemplate.Category = newCategoryName;
        Context?.SaveChanges();

        await NotificationService.Success("Renamed category " + SelectedCategory + " to " + newCategoryName);
        SelectedCategory = newCategoryName;
        await FetchTemplates();
        RenameModal?.Hide();
        await InvokeAsync(StateHasChanged);
    }
}
