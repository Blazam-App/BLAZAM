@page "/templates"
@inherits TemplateComponent
@attribute [Authorize(Roles=UserRoles.SuperAdmin)]

<AppPageTitle>Templates</AppPageTitle>
<h3>Templates</h3>
<SetHeader @ref=Header>

    
            <Row Style="font-size:0.8em;">
                <MudContainer Fixed>
                    <div TextOverflow="TextOverflow.Wrap">
                        Templates

                    </div>

                </MudContainer>
                <MudContainer Fixed>
                    <MudSelectList T="string"
                                   Values="TemplateCategories"
                                   @bind-Value="@SelectedCategory" />
                    @*<DropdownList TItem="string" TValue="string"
                                  Data="@this.TemplateCategories"
                                  TextField="@((item)=>item)"
                                  ValueField="@((item)=>item)"
                                  @bind-SelectedValue="@SelectedCategory"
                                  Color="Color.Primary"
                                  MaxMenuHeight="200px">
                        @if (SelectedCategory == null)
                        {
                            @("Choose a category")
                        }
                        else
                        {
                            @SelectedCategory
                        }
                    </DropdownList>*@

                    <MudSelectList
                        T="@DirectoryTemplate"
                        Values="Templates"
                        @bind-Value="@SelectedTemplate"
                        />
                    @*<DropdownList TItem="DirectoryTemplate" TValue="DirectoryTemplate"
                                  Data="@this.Templates"
                                  TextField="@((item)=>item.Name)"
                                  ValueField="@((item)=>item)"
                                  @bind-SelectedValue="@SelectedTemplate"
                                  Color="Color.Primary"
                                  MaxMenuHeight="200px">
                        @if (SelectedTemplate == null)
                        {
                            @("Choose a template")
                        }
                        else
                        {
                            @SelectedTemplate.Name
                        }
                    </DropdownList>*@

                </MudContainer>
                <MudContainer Fixed>
                    <MudButton Float="Float.End" Color=Color.Primary  OnClick="@(()=>{SelectedTemplate = new();})"><MudIcon Icon="IconName.PlusSquare" /></MudButton>
                    @if (SelectedCategory != null && SelectedCategory != "All")
                    {
                        <MudButton OnClick=@(()=>{RenameModal.Show();}) Color="Color.Primary"><MudIcon Icon="@("fa-solid fa-pen-to-square")" /></MudButton>
                    }
                    @if (SelectedTemplate != null)
                    {
                        <MudButton OnClick=@(()=>{DuplicateTemplate(SelectedTemplate);}) Color="Color.Primary"><MudIcon Icon="@("fa-solid fa-copy")" /></MudButton>
                    }


                </MudContainer>
            </Row>
     
    <AppModal @ref=RenameModal Title="Rename Category">
        
            
                <MudTextField Label="New Name"  @bind-Value=newCategoryName />
            
        
        <MudButton Color="Color.Primary" OnClick="RenameSelectedCategory">Save</MudButton>
    </AppModal>
</SetHeader>
@if (SelectedTemplate != null)
{
    <EditDirectoryTemplate DirectoryTemplate=@SelectedTemplate />
}
@*<ShowDirectoryTemplates />*@




@code {
    AppModal? RenameModal;
    string? newCategoryName;
    protected async Task DuplicateTemplate(DirectoryTemplate template)
    {
        SelectedTemplate = (DirectoryTemplate)template.Clone();
        await InvokeAsync(StateHasChanged);
        Header?.OnRefreshRequested?.Invoke();


    }
    async Task RenameSelectedCategory()
    {
        var temp = Context?.DirectoryTemplates.Where(t => t.Category == SelectedCategory).ToList();
        foreach (var template in temp)
        {
            template.Category = newCategoryName;
        }
        if (SelectedTemplate.Category == SelectedCategory)
            SelectedTemplate.Category = newCategoryName;
        Context?.SaveChanges();

        SnackBarService.Success("Renamed category " + SelectedCategory + " to " + newCategoryName);
        SelectedCategory = newCategoryName;
        await FetchTemplates();
        RenameModal?.Hide();
        await InvokeAsync(StateHasChanged);
    }
}
