@page "/templates"
@inherits TemplateComponent
@attribute [Authorize(Roles = UserRoles.SuperAdmin)]

<AppPageTitle>Templates</AppPageTitle>
<SetHeader>
</SetHeader>
<h3>Templates</h3>
<SetHeader @ref=Header>


    <MudStack Row=true>
        <div>
            Templates

        </div>

        <MudSelectList T="string"
                       Values="TemplateCategories"
                       @bind-Value="@SelectedCategory" />


        <MudSelectList T="DirectoryTemplate"
                       Values="@Templates"
                       @bind-Value="@SelectedTemplate" />
        @if (Templates?.Count() > 0)
        {
            <MudButton Color=Color.Secondary OnClick="@(()=>{SelectedTemplate = new();})" StartIcon="@Icons.Material.Filled.AddCard" />

        }else{
            <MudTooltip Arrow=true IsVisible=@(Templates?.Count()<1) Text="Create your first template">

                <MudButton Color=Color.Secondary OnClick="@(()=>{SelectedTemplate = new();})" StartIcon="@Icons.Material.Filled.AddCard" />

            </MudTooltip>

        }

        @if (SelectedCategory != null && SelectedCategory != "All")
        {
            <MudButton OnClick=@(()=>{RenameModal.Show();}) Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ChangeCircle" />
        }
        @if (SelectedTemplate != null)
        {
            <MudButton OnClick=@(async()=>{await DuplicateTemplate(SelectedTemplate);}) Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.FileCopy" />
        }


    </MudStack>

    <AppModal @ref=RenameModal Title="Rename Category">


        <MudTextField Label="New Name" @bind-Value=newCategoryName />


        <MudButton Color="Color.Primary" OnClick="RenameSelectedCategory">Save</MudButton>
    </AppModal>
</SetHeader>
@if (SelectedTemplate != null)
{
    <EditDirectoryTemplate DirectoryTemplate=@SelectedTemplate />
}




@code {
    AppModal? RenameModal;
    string? newCategoryName;
    protected async Task DuplicateTemplate(DirectoryTemplate template)
    {
        SelectedTemplate = (DirectoryTemplate)template.Clone();
        await InvokeAsync(StateHasChanged);
        Header?.OnRefreshRequested?.Invoke();


    }
    async Task RenameSelectedCategory()
    {
        var temp = Context?.DirectoryTemplates.Where(t => t.Category == SelectedCategory).ToList();
        foreach (var template in temp)
        {
            template.Category = newCategoryName;
        }
        if (SelectedTemplate.Category == SelectedCategory)
            SelectedTemplate.Category = newCategoryName;
        Context?.SaveChanges();

        SnackBarService.Success("Renamed category " + SelectedCategory + " to " + newCategoryName);
        SelectedCategory = newCategoryName;
        await FetchTemplates();
        RenameModal?.Hide();
        await InvokeAsync(StateHasChanged);
    }
}
