@inherits AppModalContent
<EditForm Model="newField" OnValidSubmit="Add">
<MudTextField T=string @bind-Value=newField.DisplayName Label="Display Name" />
<MudTextField T=string @bind-Value=newField.FieldName Label="Field Name" />
<FieldTypeSelect @bind-Value=newField.FieldType />

@foreach (var objectType in assignedObjectTypes)
{
    <MudCheckBox T=bool Label="@objectType.Key" @bind-bind-Value=assignedObjectTypes[objectType.Key] />

}
</EditForm>
@code{
    private CustomActiveDirectoryField newField = new();

   

    private Dictionary<string, bool> assignedObjectTypes = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Modal.SetOnYes(Add);
        Modal.SetYesText(AppLocalization["Add"]);
        foreach(var objectType in Enum.GetValues<ActiveDirectoryObjectType>().Where(ot=>ot!=ActiveDirectoryObjectType.All))
        {
            assignedObjectTypes.Add(objectType.ToString(), false);
        }
    }
    [Parameter]
    public EventCallback<CustomActiveDirectoryField> FieldCreated { get; set; }

    async void Add()
    {
        if (Context != null)
        {
            try
            {
                Context.CustomActiveDirectoryFields.Add(newField);
                await Context.SaveChangesAsync();
                Close();

                SnackBarService.Success("Field created");
                await FieldCreated.InvokeAsync(newField);
                await InvokeAsync(StateHasChanged);
            }
            catch(Exception ex)
            {
                SnackBarService.Error(ex.Message);
            }
        }
    }
}