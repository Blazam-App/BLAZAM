@page "/audit"
@page "/audit/{ActiveTab}"
@using BLAZAM.Database.Models.Audit;


@attribute [Authorize(Roles = UserRoles.SuperAdmin)]
@inherits TabbedAppComponentBase






<AppPageTitle>Audit</AppPageTitle>
<h3>Audit</h3>



<MudTabs @bind-ActivePanelIndex="@ActiveTab">
    <MudTabPanel>
        <ChildContent>
            <MudDataGrid Virtualize=true
                         Height="300px"
                         ColumnResizeMode="ResizeMode.Container"
                         FixedHeader=true
                         Hideable=true
                         Items="@auditEntries.Where(ae=>ae.Action!="Login" && ae.Action!="Logout").OrderByDescending(ae=>ae.Timestamp)"
                         Filterable="false"
                         SortMode="@SortMode.Multiple"
                         Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp.ToLocalTime()" />
                    <PropertyColumn Property="x => x.Username" />
                    <PropertyColumn Property="x => x.IpAddress" />
                    <PropertyColumn Property="x => x.Action" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudLink OnClick="@(()=>{Nav.NavigateTo("/search/"+context.Item.Target);})">@context.Item.Target</MudLink>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.BeforeAction" />
                    <PropertyColumn Property="x => x.AfterAction" />

                </Columns>
            </MudDataGrid>




        </ChildContent>
        <TabContent>
            @AppLocalization["Main"]
        </TabContent>
    </MudTabPanel>
    <MudTabPanel>
        <ChildContent>
            <AuditHistoryChart ChartSeries="LoginSeries" />
            <MudChart ChartType="ChartType.Line"
                      ChartSeries="@LoginSeries"
                      XAxisLabels="@(allDates.Select(d=>d.ToLocalTime().ToString("M/d")).ToArray())"
                      Width="100%"
                      Height="350px"
                      ChartOptions="@LoginChartOptions"></MudChart>

            <MudFab StartIcon="@Icons.Material.Filled.ShowChart" OnClick="ToggleLineMode" />
            <MudDataGrid Virtualize=true
                         Height="300px"
                         FixedHeader=true
                         ColumnResizeMode="ResizeMode.Container"
                         Hideable=true
                         Items="@logonEntries.Where(ae=>ae.Action=="Login" || ae.Action=="Logout").OrderByDescending(ae=>ae.Timestamp)"
                         Filterable="false"
                         SortMode="@SortMode.Multiple"
                         Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp.ToLocalTime()" />
                    <PropertyColumn Property="x => x.Username" />
                    <PropertyColumn Property="x => x.IpAddress" />
                    <PropertyColumn Property="x => x.Action" />

                </Columns>
            </MudDataGrid>




        </ChildContent>
        <TabContent>
            @AppLocalization["Logins"]
        </TabContent>
    </MudTabPanel>
    <MudTabPanel>
        <ChildContent>
            <MudDataGrid Virtualize=true
                         Height="300px"
                         ColumnResizeMode="ResizeMode.Container"
                         FixedHeader=true
                         Hideable=true
                         Items="@systemAuditEntries.OrderByDescending(ae=>ae.Timestamp)"
                         Filterable="false"
                         SortMode="@SortMode.Multiple"
                         Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp.ToLocalTime()" />
                    <PropertyColumn Property="x => x.Username" />
                    <PropertyColumn Property="x => x.IpAddress" />
                    <PropertyColumn Property="x => x.Target" />

                    <PropertyColumn Property="x => x.Target" />
                    <PropertyColumn Property="x => x.BeforeAction" />
                    <PropertyColumn Property="x => x.AfterAction" />

                </Columns>
            </MudDataGrid>



        </ChildContent>
        <TabContent>
            @AppLocalization["System"]
        </TabContent>


    </MudTabPanel>

</MudTabs>


            @code {
    IEnumerable<DateTime> allDates;
    List<LogonAuditLog> logonEntries = new();
    List<DirectoryEntryAuditLog> auditEntries = new();
    List<SystemAuditLog> systemAuditEntries = new();
    List<ChartSeries> LoginSeries = new();
    InterpolationOption _chartInterpolation = InterpolationOption.Straight;
    ChartOptions LoginChartOptions;
    ChartSeries loginChart = new() { Name = "Daily Logins" };
    ChartSeries uniqueUsersChart = new() { Name = "Daily Users" };
    protected override async Task OnInitializedAsync()
    {
        LoginChartOptions = new() { InterpolationOption = _chartInterpolation };

        await base.OnInitializedAsync();
        BaseUri = "/audit";
        using (var context = await DbFactory.CreateDbContextAsync())
        {
            auditEntries = await context.DirectoryEntryAuditLogs.ToListAsync();
            logonEntries = await context.LogonAuditLog.ToListAsync();

            systemAuditEntries = await context.SystemAuditLog.ToListAsync();



            var endDate = DateTime.Today;

            var startDate = endDate.AddDays(-14);
            allDates = Enumerable.Range(0, (int)(endDate - startDate).TotalDays + 1)
                                     .Select(d => startDate.AddDays(d));

            var loginCounts = from date in allDates
                              join ae in logonEntries.Where(ae => ae.Action == "Login")
                              on date equals ae.Timestamp.Date into grp
                              select (double)grp.Count();

            var uniqueLoginCounts = from date in allDates
                                    join ae in logonEntries.Where(ae => ae.Action == "Login")
                                    on date equals ae.Timestamp.Date into grp
                                    select (double)grp.DistinctBy(g => g.Username).Count();


            loginChart.Data = loginCounts.ToArray();
            uniqueUsersChart.Data = uniqueLoginCounts.ToArray();



            LoginSeries.Add(loginChart);
            LoginSeries.Add(uniqueUsersChart);
        }


    }
    public async Task ToggleLineMode(MouseEventArgs args)
    {

        if (LoginChartOptions.InterpolationOption == InterpolationOption.Straight)
            LoginChartOptions.InterpolationOption = InterpolationOption.Periodic;
        else
            LoginChartOptions.InterpolationOption = InterpolationOption.Straight;

        await InvokeAsync(StateHasChanged);
    }
}
