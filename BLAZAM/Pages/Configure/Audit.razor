@page "/audit"
@page "/audit/{ActiveTab}"

@attribute [Authorize(Roles = UserRoles.SuperAdmin)]
@inherits TabbedAppComponentBase






<AppPageTitle>Audit</AppPageTitle>
<h3>Audit</h3>



<MudTabs @bind-ActivePanelIndex="@ActiveTab">
    <MudTabPanel>
        <ChildContent>
            <MudDataGrid Virtualize
                         ColumnResizeMode="ResizeMode.Container"
                              Hideable
                         Items="@auditEntries.Where(ae=>ae.Action!="Login" && ae.Action!="Logout").OrderByDescending(ae=>ae.Timestamp)"
                         Filterable="false"
                         SortMode="@SortMode.Multiple"
                         Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp.ToLocalTime()" />
                    <PropertyColumn Property="x => x.Username" />
                    <PropertyColumn Property="x => x.IpAddress" />
                    <PropertyColumn Property="x => x.Action" />
                    <PropertyColumn Property="x => x.Target" />
                    <PropertyColumn Property="x => x.BeforeAction" />
                    <PropertyColumn Property="x => x.AfterAction" />

                </Columns>
                </MudDataGrid>




            </ChildContent>
            <TabContent>
                @SettingsLocalization["Main"]
            </TabContent>
            </MudTabPanel>
            <MudTabPanel>
            <ChildContent>

                <MudChart ChartType="ChartType.Line"
                      ChartSeries="@LoginSeries"
                      XAxisLabels="@auditEntries.Where(ae=>ae.Action=="Login" || ae.Action=="Logout").DistinctBy(ae=>ae.Timestamp.ToLocalTime().Date).Select(ae=>ae.Timestamp.ToLocalTime().ToString("M/d/yyyy")).ToArray()"
                      Width="100%"
                      Height="350px"
                      ChartOptions="@LoginChartOptions"></MudChart>

                <MudFab Icon="@Icons.Material.Filled.ShowChart" OnClick="ToggleLineMode" />
                <MudDataGrid Virtualize ColumnResizeMode="ResizeMode.Container" Hideable Items="@auditEntries.Where(ae=>ae.Action=="Login" || ae.Action=="Logout").OrderByDescending(ae=>ae.Timestamp)" Filterable="false" SortMode="@SortMode.Multiple" Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp.ToLocalTime()" />
                    <PropertyColumn Property="x => x.Username" />
                    <PropertyColumn Property="x => x.IpAddress" />
                    <PropertyColumn Property="x => x.Action" />

                </Columns>
                </MudDataGrid>




            </ChildContent>
            <TabContent>
                @SettingsLocalization["Logins"]
            </TabContent>
            </MudTabPanel>
            <MudTabPanel>
            <ChildContent>
                <MudDataGrid Virtualize ColumnResizeMode="ResizeMode.Container" Hideable Items="@systemAuditEntries.OrderByDescending(ae=>ae.Timestamp)" Filterable="false" SortMode="@SortMode.Multiple" Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp.ToLocalTime()" />
                    <PropertyColumn Property="x => x.Username" />
                    <PropertyColumn Property="x => x.IpAddress" />
                    <PropertyColumn Property="x => x.Action" />
                    <PropertyColumn Property="x => x.Target" />
                    <PropertyColumn Property="x => x.BeforeAction" />
                    <PropertyColumn Property="x => x.AfterAction" />

                </Columns>
                </MudDataGrid>



            </ChildContent>
            <TabContent>
                @SettingsLocalization["System"]
            </TabContent>


            </MudTabPanel>

            </MudTabs>


            @code {
    List<CommonAuditLog> auditEntries = new();
    List<SystemAuditLog> systemAuditEntries = new();
    List<ChartSeries> LoginSeries = new();
    InterpolationOption _chartInterpolation = InterpolationOption.Straight;
    ChartOptions LoginChartOptions;
    ChartSeries loginChart = new() { Name = "Daily Logins" };
    ChartSeries uniqueUsersChart = new() { Name = "Daily Users" };
    protected override async Task OnInitializedAsync()
    {
        LoginChartOptions = new() { InterpolationOption = _chartInterpolation };

        await base.OnInitializedAsync();
        BaseUri = "/audit";
        using (var context = await DbFactory.CreateDbContextAsync())
        {
            auditEntries = await context.LogonAuditLog.ToListAsync<CommonAuditLog>();
            auditEntries.AddRange(context.UserAuditLog.ToList<CommonAuditLog>());
            auditEntries.AddRange(context.GroupAuditLog.ToList<CommonAuditLog>());
            auditEntries.AddRange(context.OUAuditLog.ToList<CommonAuditLog>());
            auditEntries.AddRange(context.ComputerAuditLog.ToList<CommonAuditLog>());

            systemAuditEntries = await context.SystemAuditLog.ToListAsync();


            loginChart.Data = auditEntries.Where(ae => ae.Action == "Login")
            .GroupBy(ae => ae.Timestamp.Date)
            .ToList()
            .Select(g => Convert.ToDouble(g.Count()))
            .ToArray();

            uniqueUsersChart.Data = auditEntries.Where(ae => ae.Action == "Login")
            .GroupBy(ae => ae.Timestamp.Date)
            .ToList()
            .Select(g => Convert.ToDouble(g.DistinctBy(g => g.Username).Count()))
            .ToArray();
            LoginSeries.Add(loginChart);
            LoginSeries.Add(uniqueUsersChart);
        }

       
    }
    public async Task ToggleLineMode(MouseEventArgs args)
    {

        if (LoginChartOptions.InterpolationOption == InterpolationOption.Straight)
            LoginChartOptions.InterpolationOption = InterpolationOption.Periodic;
        else
            LoginChartOptions.InterpolationOption = InterpolationOption.Straight;

        await InvokeAsync(StateHasChanged);
    }
}
