@page "/ou/create"
@inherits TabbedAppComponentBase
@attribute [Authorize]
<AppPageTitle>Create OU</AppPageTitle>

<Row>
    <MudTabs Elevation="0" Outlined="true" @bind-ActivePanelIndex="selectedStep">
        <MudTabPanel>
            <ChildContent>
                <MudText>
                    

                        <OUTreeView Label="Parent Organizational Unit"
                                    SelectedOUChanged="OUSelected">
                           @* <NodeContent>
                                @context.Name
                            </NodeContent>*@
                        </OUTreeView>

                    

                    

                        <MudTextField Label="Organizational Unit Name" @bind-Value=@newOUName />


                    
                    <MudButton Disabled=@(newOU==null || newOUName.IsNullOrEmpty()) Color="Color.Primary" OnClick="CreateNewOU">Next</MudButton>
                </MudText>
            </ChildContent>
            <TabContent>
                Create
            </TabContent>
        </MudTabPanel>
        <MudTabPanel Disabled=@(newOU==null || newOUName.IsNullOrEmpty())>
            <ChildContent>
                <MudText>
                    <ConfirmNewOU OU="@newOU" Confirmed="OUCreated" />
                </MudText>
            </ChildContent>
            <TabContent>
                Confirm
            </TabContent>
        </MudTabPanel>
    </MudTabs>
    <MudText>@($"Active Index: {selectedStep}")</MudText>
   

</Row>



@code {


    int selectedStep;

   



    bool custom = false;

    string newOUName;
    bool collapseVisible = false;
    List<DirectoryTemplate> templates;
    IADOrganizationalUnit? parentOU;
    IADOrganizationalUnit? newOU;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        templates = await Context?.DirectoryTemplates.ToListAsync();
        await InvokeAsync(StateHasChanged);
    }
    /*
    bool AllowStep(StepNavigationContext context)
    {
        switch (context.NextStepName)
        {
            case "stepConfigure":
                return true;
            case "stepConfirm":

                return newOU != null;
        }
        return false;
    }
    */
    async void OUSelected(IADOrganizationalUnit ou)
    {
        if (parentOU == null)
        {
            parentOU = ou;
            return;
        }
        parentOU = ou;


        await InvokeAsync(StateHasChanged);
    }

    async void CreateNewOU()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        newOU = parentOU.CreateOU(newOUName);



        selectedStep = 1;


        LoadingData = true;

        await InvokeAsync(StateHasChanged);
    }
    async Task OUCreated(IADOrganizationalUnit ou)
    {
        await AuditLogger.OU.Created(ou);
    }
}
