@inherits DirectoryEntryViewBase
<AppPageTitle>@OU?.CanonicalName</AppPageTitle>

<SetSubHeader>

    <DirectoryEntryViewHeader DirectoryEntry="@OU"
                              OnDelete="@DeleteOU"
                              OnMove="@(()=>{MoveToModal?.Show();})"
                              OnRename="@(()=>{RenameModal?.Show();})"
                              OnToggleEditMode="ToggleEditMode"/>
    <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true">

    </MudOverlay>


</SetSubHeader>



<AppModal Color="Color.Dark" Title="Move To" @ref=@MoveToModal>
    @if (MoveToModal?.IsShown==true)
    {
        <MoveToOUModalContent DirectoryModel="OU" />
    }
</AppModal>
<AppModal Title="Rename OU" @ref=@RenameModal>
    @if (RenameModal?.IsShown == true)
    {
        <RenameOUModalContent OU="OU" />
    }
</AppModal>


@if(OU!=null){
    <MudCard>
        <MudCardHeader>
            @OU.CanonicalName
        </MudCardHeader>
       
        @foreach(var childOU in OU.SubOUs)
        {
            <MudText>@childOU.CanonicalName</MudText>
        }
    </MudCard>
}

@if (OU.HasUnsavedChanges)
{
        <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
}
@code {
    IADOrganizationalUnit OU => DirectoryEntry as IADOrganizationalUnit;

    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            OU.CommitChanges();
            EditMode = false;
            SnackBarService.Success("The changes made to this ou have been saved.", "Changes Saved");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteOU()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + OU.CanonicalName + "?", "Delete OU"))
        {
            try
            {
                OU.Delete();
                SnackBarService.Success(OU.CanonicalName + " has been deleted.", "OU Deleted");

               
                Nav.NavigateTo("/ou/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
       
            await InvokeAsync(StateHasChanged);
        }
    }
}
