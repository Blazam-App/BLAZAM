@inherits DirectoryEntryViewBase
<AppPageTitle>@OU?.CanonicalName</AppPageTitle>

    <SetSubHeader>

        <DirectoryEntryViewHeader EditMode="@EditMode"
                                  DirectoryEntry="@OU"
                                  OnDelete="@DeleteOU"
                                  OnMove="@(()=>{MoveToModal?.Show();})"
                                  OnRename="@(()=>{RenameModal?.Show();})"
                                  OnToggleEditMode="ToggleEditMode" />
        <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true">

        </MudOverlay>


    </SetSubHeader>



    <AppModal Color="Color.Dark" Title="Move To" @ref=@MoveToModal>
        @if (MoveToModal?.IsShown == true)
    {
        <MoveToOUModalContent DirectoryModel="OU" />
    }
</AppModal>
<AppModal Title="Rename OU" @ref=@RenameModal>
    @if (RenameModal?.IsShown == true)
    {
        <RenameOUModalContent OU="OU" />
    }
</AppModal>


@if (OU != null)
{


    <MudDataGrid RowClass="cursor-pointer"
                 Dense=true
                 Filterable=true
                 Virtualize=true
                 Class="py-0"
                 SortMode="SortMode.Single"
                 Items="@OU.Children.OrderBy(x=>x.CanonicalName).OrderByDescending(x=>x.ObjectType)"
                 T=IDirectoryEntryAdapter
                 RowClick="@ChildClicked">
        <ToolBarContent>
            <MudText>@AppLocalization["Current OU"]: @OU.CanonicalName</MudText>

                <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Filled.DriveFolderUpload"
                           OnClick="@(()=>{Nav.NavigateTo(parentOU.SearchUri);})">@parentOU?.CanonicalName</MudButton>

            </ToolBarContent>
            <Columns>
                <TemplateColumn Title=@AppLocalization["Type"]>
                    <CellTemplate>
                        <MudIcon Icon="@context.Item.TypeIcon()" />
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Title="@AppLocalization["Name"]" Property="x=>x.CanonicalName" />
            </Columns>
        </MudDataGrid>
}

@if (OU.HasUnsavedChanges)
{
    <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
}
@code {
    IADOrganizationalUnit OU => DirectoryEntry as IADOrganizationalUnit;
    IADOrganizationalUnit? parentOU;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        await AuditLogger.Searched(OU);
        if (OU != null)
        {
            parentOU = OU.GetParent();
        }
        LoadingData = false;
        await RefreshEntryComponents();
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            await OU.CommitChangesAsync();
            EditMode = false;
            Nav.WarnOnNavigation = false;
            SnackBarService.Success("The changes made to this ou have been saved.");
            await RefreshEntryComponents();


        }

    }
    void ChildClicked(DataGridRowClickEventArgs<IDirectoryEntryAdapter> args)
    {
        Nav.NavigateTo(args?.Item.SearchUri);
    }
    async Task DeleteOU()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + OU.CanonicalName + "?", "Delete OU"))
        {
            try
            {
                OU.Delete();
                SnackBarService.Success(OU.CanonicalName + " has been deleted.");


                Nav.NavigateTo("/ou/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }

            await InvokeAsync(StateHasChanged);
        }
    }
}
