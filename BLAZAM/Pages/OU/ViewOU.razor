@inherits DirectoryModelComponent
<AppPageTitle>@OU?.CanonicalName</AppPageTitle>

<SetSubHeader>
    <Bar Mode="BarMode.Horizontal"
         CollapseMode="BarCollapseMode.Small"
         Breakpoint="Breakpoint.Desktop"
         NavigationBreakpoint="Breakpoint.Tablet"
         ThemeContrast="ThemeContrast.Dark"
         Padding="Padding.Is2.OnX"
         Background="Background.Dark"
         
         VerticalAlignment="VerticalAlignment.Middle">
        <BarBrand Width=Width.Is100>
            <Row>
                <Column ColumnSize="ColumnSize.Is11.OnTablet.Is10">

                    <Row>
                        <Column ColumnSize="ColumnSize.Is4.OnTablet">
                            @OU.CanonicalName


                        </Column>
                        <Column ColumnSize="ColumnSize.Is8.OnTablet">
                            <Small TextWeight="TextWeight.Light">@DirectoryTools.PrettifyOu(OU.OU) </Small>

                        </Column>
                    </Row>
                </Column>

                
                <Column Float=Float.End ColumnSize="ColumnSize.Is1.OnTablet.Is2">

                    <Dropdown>
                        <DropdownToggle Color="Color.Primary">
                            <Icon Name=@("fa-gear") />
                        </DropdownToggle>
                        <DropdownMenu>
                           
                            @if (OU.CanEdit)
                            {
                                <MudMenuItem Clicked="ToggleEditMode">Edit...</MudMenuItem>
                            }
                           
                            @if (OU.CanRename)
                            {
                                <MudMenuItem Clicked="@(()=>{RenameModal?.Show();})">Rename...</MudMenuItem>

                            }
                            @if (OU.CanMove)
                            {
                                <MudMenuItem Clicked="@(()=>{MoveToModal?.Show();})">Move To...</MudMenuItem>
                            }
                            @if (OU.CanDelete)
                            {
                                <MudMenuItem Clicked="@DeleteOU">Delete...</MudMenuItem>
                            }
                        </DropdownMenu>
                    </Dropdown>
                </Column>
            </Row>

        </BarBrand>

    </Bar>

</SetSubHeader>



<AppModal TextColor="Color.Dark" Title="Move To" @ref=@MoveToModal>
    @if (MoveToModal?.IsShown==true)
    {
        <BLAZAM.Server.Shared.UI.OU.MoveToOUModalContent DirectoryModel="OU" />
    }
</AppModal>
<AppModal Title="Rename OU" @ref=@RenameModal>
    @if (RenameModal?.IsShown == true)
    {
        <RenameOUModalContent OU="OU" />
    }
</AppModal>


@if(OU!=null){
    <MudCard>
        <MudCardHeader>
            @OU.CanonicalName
        </MudCardHeader>
        <MudCardBody>
        @foreach(var childOU in OU.Children)
        {
            <ViewOU OU=childOU/>
        }
    </MudCardBody>
    </MudCard>
}

@if (OU.HasUnsavedChanges)
{
        <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
}
@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!OU.NewEntry)
            await AuditLogger.OU.Searched(OU);
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            OU.CommitChanges();
            EditMode = false;
            await NotificationService.Success("The changes made to this ou have been saved.", "Changes Saved");
            await InvokeAsync(StateHasChanged);

        }

    }
    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            OU.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteOU()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + OU.CanonicalName + "?", "Delete OU"))
        {
            try
            {
                OU.Delete();
                await NotificationService.Success(OU.CanonicalName + " has been deleted.", "OU Deleted");

                OU = null;
                Nav.NavigateTo("/ou/search");

            }
            catch (ApplicationException ex)
            {
                await NotificationService.Error(ex.Message);
            }
       
            await InvokeAsync(StateHasChanged);
        }
    }
}
