@inject AppDatabaseFactory factory
@page "/benchmark"

@inject IActiveDirectory Dir

<h3>Benchmark</h3>
<p>Number of cycles</p>
<MudNumericField HideSpinButtons="true" @bind-Value=runCount />
<br />
<p>Cycle: @cycle</p>
<MudButton Disabled=Running OnClick="Benchmark1">Benchmark One</MudButton>
<p>@elapsed</p>
<MudButton Disabled=Running OnClick="Benchmark2">Benchmark Two</MudButton>
<p>@elapsed2</p>

<p>User Bench</p>
<p>email: @userBench?.SamAccountName</p>
<PageProgress Visible="Running" />
@code {
#nullable disable warnings
    ActiveDirectoryContext ad;
    bool Running = false;
    int runCount;
    int cycle;
    double elapsed;
    double elapsed2;
    IADUser userBench;
    protected override void OnInitialized()
    {
       // ad = new ActiveDirectory(factory, true);
    }
    async Task Benchmark1()
    {

        Running = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            double[] runs = new double[runCount];
            for (cycle = 0; cycle < runCount; cycle++)
            {
                DateTime start = DateTime.Now;


                runs[cycle] = (DateTime.Now - start).TotalSeconds;
                InvokeAsync(StateHasChanged);

            }
            elapsed = runs.Average();
            Running = false;
            InvokeAsync(StateHasChanged);
        });



    }
    bool DirectoryTest(IActiveDirectory dir)
    {

        bool result = false;
        dir.Connect();
        Random r = new Random();

        userBench = dir.Users.FindUsersByString("c").First();
        if (userBench==null) result = false;
        else result = true;

        dir.Dispose();
        return result;
    }
    async Task Benchmark2()
    {
        Running = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            double[] runs = new double[runCount];
            for (cycle = 0; cycle < runCount; cycle++)
            {

                DateTime start = DateTime.Now;

                Dir.Users.FindUsersByString("cja");
                runs[cycle] = (DateTime.Now - start).TotalSeconds;
                
                InvokeAsync(StateHasChanged);

            }
            elapsed2 = runs.Average();
            Running = false;
            InvokeAsync(StateHasChanged);
        });


    }
}
