@page "/users/search"
@page "/users/search/{SearchTermParameter}"
@attribute [Authorize]

@inherits DirectorySearchPage
<AuthorizeView Roles="@(UserRoles.SearchUsers+","+UserRoles.SuperAdmin)">
    <SetHeader>

        <CascadingValue Value="Searcher">

            <SearchPageHeader OnSubmit=SubmitSearch Text="Search Users">
                <ADUserAutoComplete @bind-SearchTerm="@SearchTerm" @bind-SearchDisabled=@SearchDisabledObjects />
            </SearchPageHeader>
        </CascadingValue>

    </SetHeader>
    @if (Program.InDemoMode)
    {
        <Alert Visible Background=Background.Info>
        <AlertMessage Display="Display.InlineBlock">Try searching Moore, Howard, Evans, Manny...</AlertMessage>
        <AppCloseButton Display="Display.InlineBlock" Float="Float.End" />
        </Alert>
    }

    @if (Searcher.Results.Count > 1)
    {
        <Row Width="Width.Is100">
            <Column ColumnSize="ColumnSize.Is6">
                Results found: @Searcher.Results.Count
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                Time elapsed: @Searcher.SearchTime
            </Column>
        </Row>

        <Virtualize Items="results.Cast<IADUser>().ToArray()" TItem="IADUser" Context="u" OverscanCount="30">
            <ItemContent>
                @if (u.CanRead)
                {


                    <Div Class="cursor-pointer" @onclick=@(()=>{ SubmitSearch(u.CanonicalName);}) Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                        <Heading Margin="Margin.Is2.FromBottom">@u.DisplayName</Heading>
                        <Small>@u.SamAccountName</Small>
                    </Div>


                }
            </ItemContent>
            <Placeholder>
                <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                    <Heading Margin="Margin.Is2.FromBottom">Loading...</Heading>
                    <Small>Loading...</Small>
                </Div>

            </Placeholder>
        </Virtualize>
    }
    else if (Searcher.Results.Count == 1)
    {
    
        var user = (IADUser)Searcher.Results[0];
        if (user.CanRead)
        {

            <ViewUser User="user" />
        }
        else
        {
            <SearchIcon Name="@SearchIcon" Text="@ModelsTypeName" />

        }
    }
    else if (LoadingData)
    {
        <LoadingIndicator Height="Height.Is100" Visible=LoadingData>
            <SearchIcon Name="@SearchIcon" Text="@ModelsTypeName" />
        </LoadingIndicator>
    }
    else
    {
        <SearchIcon Name="@SearchIcon" Text="@ModelsTypeName" />

    }

</AuthorizeView>


@code {


    protected string ModelsTypeName { get; set; } = "Users";
    protected string SearchIcon { get; set; } = "fa-solid fa-user";

    public override string SearchTermParameter { get => base.SearchTermParameter; set { base.SearchTermParameter = value; InvokeAsync(StateHasChanged); } }

    protected override async Task OnInitializedAsync()
    {
        BaseSearchUri = "/users/search/";

        await base.OnInitializedAsync();
        Searcher.ResultsCollected += ((batch) =>
             {
                 results.AddRange(batch);
                 InvokeAsync(StateHasChanged);
             });
        Searcher.OnSearchStarted += (() =>
       {
           InvokeAsync(StateHasChanged);
       });
        Searcher.OnSearchCompleted += (() =>
       {
           InvokeAsync(StateHasChanged);
       });
        Search();
    }


    public override async Task InvokeSearch()
    {
        Searcher.ObjectTypeFilter = ActiveDirectoryObjectType.User;

        Searcher.EnabledOnly = !SearchDisabledObjects;
        Searcher.GeneralSearchTerm = SearchTermParameter;
        Searcher.ExactMatch = true;

        await Searcher.SearchAsync<ADUser, IADUser>();
        if (Searcher.Results.Count < 1)
        {
            Searcher.ExactMatch = false;
            await Searcher.SearchAsync<ADUser, IADUser>();

        }
    }

   

}
