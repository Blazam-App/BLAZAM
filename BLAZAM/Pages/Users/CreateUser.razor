@page "/users/create"
@inherits TemplateComponent
@attribute [Authorize]
<AppPageTitle>Create User</AppPageTitle>

    <MudTabs @ref=Tabs Elevation="0" Outlined="true" @bind-ActivePanelIndex="selectedStep">

    <MudTabPanel>
            <TabContent>
                Template
            </TabContent>
            <ChildContent>
                @if (Templates != null && Templates.Count() > 0)
            {
                <MudSelectList Values="TemplateCategories"
                               @bind-Value=SelectedCategory />

                <MudPaper Width="300px">
                    <MudList SelectedItemChanged=@SetTemplate Clickable="true">
                        @foreach (var template in Templates)
                        {
                            <MudListItem Text="@template.Name" Value="template" />
                        }
                    </MudList>
                </MudPaper>
            }
            else
            {
                <MudPaper Width="300px">
                    <MudText>There are no templates available</MudText>
                    <AuthorizeView Roles="@UserRoles.SuperAdmin">
                        <MudLink Href="/templates">Create One</MudLink>

                    </AuthorizeView>
                </MudPaper>
            }
            <MudButton Color=Color.Secondary OnClick="@(()=>{custom=true;})">Custom</MudButton>

            <MudButton Disabled=@(SelectedTemplate is null && custom!=true) Color=Color.Success OnClick="@(()=>{if(custom==true)selectedStep=3;else selectedStep=1;})">Next</MudButton>
            </ChildContent>

        </MudTabPanel>

    <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none") Disabled=@( SelectedTemplate==null)>
            <TabContent>
                Name
            </TabContent>
            <ChildContent>


                <NewUserNameEntry @bind-NewUserName=@newUserName />
                <MudButton Color=Color.Primary OnClick="@(()=>{selectedStep=0;})">Back</MudButton>
                <MudButton Color="Color.Primary" OnClick="CreateTemplateUser">Next</MudButton>



            </ChildContent>

        </MudTabPanel>

    <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none") Disabled="@(newUser==null)">
            <TabContent>
                Fields
            </TabContent>
            <ChildContent>
                <NewTemplateUser User="@newUser" DirectoryTemplate="SelectedTemplate" />
                <MudButton Disabled=LoadingData Color=Color.Primary OnClick="@(()=>{selectedStep=0;})">Back</MudButton>
                <MudButton Color=Color.Success OnClick="@(()=>{selectedStep=5;})">Next</MudButton>

            </ChildContent>

        </MudTabPanel>



    <MudTabPanel Class=@(custom==true?"":"d-none") Disabled="@(custom==false)">
            <TabContent>
                OU
            </TabContent>
            <ChildContent>
                <OUTreeView SelectedOUChanged="OUSelected" />

                <MudTextField Label="@UserLocalization["Display Name"]" @bind-Value="@customUserDisplayName" />



                <MudButton Color=Color.Primary OnClick="@(()=>{selectedStep=0;})">Back</MudButton>
            <MudButton Disabled=@(customUserDisplayName.IsNullOrEmpty()&& selectedOU!=null) Color=Color.Success OnClick="@(()=>{CreateCustomUser();selectedStep=4;})">Next</MudButton>


            </ChildContent>

        </MudTabPanel>
    <MudTabPanel Class=@(custom==true?"":"d-none") Disabled="@(customUser==null)">
            <TabContent>
                Details
            </TabContent>
            <ChildContent>
                <ViewUser User="@newUser" />
                <MudButton Color=Color.Primary OnClick="@(()=>{selectedStep=3;})">Back</MudButton>
                <MudButton Color=Color.Success OnClick="@(()=>{selectedStep=5;})">Next</MudButton>
            </ChildContent>

        </MudTabPanel>


        <MudTabPanel Disabled=@(customUser==null && newUser==null)>
            <TabContent>
                Confirm
            </TabContent>
            <ChildContent>
                <ConfirmNewUser User="@newUser" DirectoryTemplate="SelectedTemplate" Confirmed="UserCreated" />

            </ChildContent>

        </MudTabPanel>
    </MudTabs>





    @code {


    int selectedStep;

    private Task OnSelectedStepChanged(int name)
    {
        selectedStep = name;

        return Task.CompletedTask;
    }


    string? customUserDisplayName;
    bool? custom = false;

    NewUserName newUserName = new NewUserName();
    bool collapseVisible = false;
    IADOrganizationalUnit? selectedOU;
    IADUser? customUser;
    IADUser? newUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    async void OUSelected(IADOrganizationalUnit ou)
    {
        if (selectedOU == null)
        {
            selectedOU = ou;
            return;
        }
        selectedOU = ou;


        await InvokeAsync(StateHasChanged);
    }
    async Task CreateCustomUser()
    {
        if (newUser == null)
        {
            newUser = selectedOU.CreateUser(customUserDisplayName.Trim());
            newUser.DisplayName = customUserDisplayName;
        }
        else
        {
            newUser.MoveTo(selectedOU);
        }
    }
    async void CreateTemplateUser()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);

        var ou = Directory.OUs.FindOuByString(SelectedTemplate.ParentOU).FirstOrDefault();
        newUser = ou.CreateUser(SelectedTemplate.GenerateDisplayName(newUserName));
        newUser.NewEntry = true;

        newUser.SamAccountName = SelectedTemplate.GenerateUsername(newUserName);
        newUser.DisplayName = SelectedTemplate.GenerateDisplayName(newUserName);
        newUser.NewPassword = SelectedTemplate.GeneratePassword().ToSecureString();
        //newUser.CanonicalName = SelectedTemplate.GenerateDisplayName(newUserName);
        newUser.StagePasswordChange(newUser.NewPassword, true);
        if (!newUserName.GivenName.IsNullOrEmpty())
            newUser.GivenName = newUserName.GivenName;
        if (!newUserName.MiddleName.IsNullOrEmpty())
            newUser.MiddleName = newUserName.MiddleName;
        if (!newUserName.Surname.IsNullOrEmpty())
            newUser.Surname = newUserName.Surname;

        foreach (var fieldValue in SelectedTemplate.FieldValues)
        {
            if (fieldValue.Value != null && fieldValue.Value != "")
            {


                try
                {
                    newUser.NewEntryProperties[fieldValue.Field.FieldName] = SelectedTemplate.ReplaceVariables(fieldValue.Value, newUserName);
                }
                catch (Exception ex)
                {
                    Loggers.ActiveDirectryLogger.Error("Could not set value for " + fieldValue.Field.FieldName + ": " + fieldValue.Value.ToString(), ex);
                }
            }
        }
        var conflictingEntry = Directory.Users.FindUserByUsername(newUser.SamAccountName);
        if (conflictingEntry != null)
        {
            newUser = null;
            SnackBarService.Warning("An account with that name already exists! " + conflictingEntry.SamAccountName);
            return;
        }
        SelectedTemplate.AssignedGroupSids.ForEach(sid =>
        {
            var group = Directory.Groups.FindGroupBySID(sid.GroupSid);
            newUser.AssignTo(group);

        });
        if (SelectedTemplate.HasEmptyFields())
        {
            selectedStep = 2;
        }
        else
        {
            //Go to confirm step
            selectedStep = 5;

        }
        LoadingData = true;

        await InvokeAsync(StateHasChanged);
    }
    async Task UserCreated(IADUser user)
    {
        AuditLogger.User.Created(user);
    }
    async Task SetTemplate(MudListItem selectedTemplate)
    {
        SelectedTemplate = selectedTemplate.Value as DirectoryTemplate; 
        custom = false; 
        InvokeAsync(StateHasChanged); 
    }
}
