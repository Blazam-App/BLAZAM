@page "/users/create"
@inherits TemplateComponent
@attribute [Authorize]
<AppPageTitle>Create User</AppPageTitle>

<Row>
    <Steps @ref=Steps NavigationAllowed=AllowStep SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged">
        <Items>
            <Step Index=1 Name="stepTemplate" Completed=@(custom||SelectedTemplate!=null)>Template</Step>
            @if (!custom)
            {
                <Step Index=2 Name="stepName" Completed=@(newUser!=null)>
                    Name
                </Step>
                @if (SelectedTemplate != null && SelectedTemplate.HasEmptyFields())
                {

                    <Step Index=3 Name="stepFields" Completed=@(selectedStep=="stepConfirm")>Fields</Step>

                }
                <Step Name="stepConfirm">
                    <Marker>
                        <Icon Name="IconName.Flag" />
                    </Marker>
                    <Caption>
                        Confirm
                    </Caption>
                </Step>

            }
            else
            {
                <Step Index=2 Completed=@(newUser!=null) Name="stepOU">OU</Step>
                <Step Index=3 Completed=@(newUser?.SamAccountName!=null && newUser?.SamAccountName!="") Name="stepDetails">Details</Step>

                <Step Name="stepConfirm">
                    <Marker>
                        <Icon Name="IconName.Flag" />
                    </Marker>
                    <Caption>
                        Confirm
                    </Caption>
                </Step>

            }

        </Items>

        <Content>

            <StepPanel Name="stepTemplate">

                <Column Margin=Margin.IsAuto.OnX ColumnSize="ColumnSize.Is12.OnMobile.Is10.OnTablet.Is8.OnDesktop.Is6.OnWidescreen.Is4.OnFullHD">

                    <LoadingIndicator Visible=@(Templates==null)>
                        <DropdownList TItem="string" TValue="string"
                                      Data="@TemplateCategories"
                                      TextField="@((item)=>item)"
                                      ValueField="@((item)=>item)"
                                      @bind-SelectedValue="@SelectedCategory"
                                      Color="Color.Primary"
                                      MaxMenuHeight="200px">
                            @if (SelectedCategory == null)
                            {
                                @("Choose a category")
                            }
                            else
                            {
                                @SelectedCategory
                            }
                        </DropdownList>
                        <ListView TItem="DirectoryTemplate"
                                  Data="@Templates"
                                  Mode="ListGroupMode.Selectable"
                                  @bind-SelectedItem=@SelectedTemplate
                                  TextField="(item)=>item.Name"
                                  ValueField="(item)=>item.Name">

                        </ListView>
                    </LoadingIndicator>

                    <Button Color=Color.Secondary Clicked="@(()=>{custom=true;selectedStep="stepOU";})">Custom</Button>

                    <Button Color=Color.Success Clicked="@(()=>{selectedStep="stepName";})">Next</Button>
                </Column>
            </StepPanel>
            <StepPanel Name="stepName">
                <Column Margin=Margin.IsAuto.OnX ColumnSize="ColumnSize.Is12.OnMobile.Is10.OnTablet.Is8.OnDesktop.Is6.OnWidescreen.Is4.OnFullHD">

                    @if (selectedStep == "stepName")
                    {
                        <NewUserNameEntry @bind-NewUserName=@newUserName />
                        <Button Color=Color.Primary Clicked="@(()=>{selectedStep="stepTemplate";})">Back</Button>
                        <Button Color="Color.Primary" Clicked="CreateTemplateUser">Next</Button>


                    }
                </Column>
            </StepPanel>
            <StepPanel Name="stepOU">
                <Column Margin=Margin.IsAuto.OnX ColumnSize="ColumnSize.Is12.OnMobile.Is10.OnTablet.Is8.OnDesktop.Is6.OnWidescreen.Is4.OnFullHD">

                    @if (selectedStep == "stepOU")
                    {
                        <OUTreeView SelectedOUChanged="OUSelected">
                            <NodeContent>
                                @context.Name
                            </NodeContent>
                        </OUTreeView>
                        <Field Horizontal Margin="Margin.IsAuto.OnX">
                            <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                @UserLocalization["Display Name"]
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                <TextEdit @bind-Text="@customUserDisplayName" />

                            </FieldBody>
                        </Field>
                        <Button Color=Color.Primary Clicked="@(()=>{selectedStep="stepTemplate";})">Back</Button>
                        <Button Color=Color.Success Clicked="@(()=>{CreateCustomUser();selectedStep="stepDetails";})">Next</Button>

                    }
                </Column>
            </StepPanel>
            <StepPanel Name="stepDetails">
                <Column Margin=Margin.IsAuto.OnX ColumnSize="ColumnSize.Is12.OnMobile.Is10.OnTablet.Is9.OnDesktop.Is8.OnWidescreen.Is7.OnFullHD">

                    @if (selectedStep == "stepDetails")
                    {

                        <ViewUser User="@newUser" FieldColumnSize="ColumnSize.Is12" />
                        <Button Color=Color.Primary Clicked="@(()=>{selectedStep="stepTemplate";})">Back</Button>
                        <Button Color=Color.Success Clicked="@(()=>{selectedStep="stepConfirm";})">Next</Button>


                    }
                </Column>
            </StepPanel>
            <StepPanel Name="stepFields">
                <Column Margin=Margin.IsAuto.OnX ColumnSize="ColumnSize.Is12.OnMobile.Is10.OnTablet.Is8.OnDesktop.Is6.OnWidescreen.Is4.OnFullHD">

                    @if (selectedStep == "stepFields")
                    {

                        <NewTemplateUser User="@newUser" DirectoryTemplate="SelectedTemplate" />
                        <Button Disabled=LoadingData Color=Color.Primary Clicked="@(()=>{selectedStep="stepName";})">Back</Button>
                        <Button Color=Color.Success Clicked="@(()=>{selectedStep="stepConfirm";})">Next</Button>



                    }
                </Column>
            </StepPanel>
            <StepPanel Name="stepConfirm">
                <Column Margin=Margin.IsAuto.OnX ColumnSize="ColumnSize.Is12.OnMobile.Is10.OnTablet.Is8.OnDesktop.Is6.OnWidescreen.Is4.OnFullHD">

                    @if (selectedStep == "stepConfirm")
                    {
                        <ConfirmNewUser User="@newUser" DirectoryTemplate="SelectedTemplate" Confirmed="UserCreated" FieldColumnSize="ColumnSize.Is12" />
                    }
                </Column>

            </StepPanel>

        </Content>


    </Steps>
    <Column ColumnSize="ColumnSize.Is1.OnTablet.Is2.OnDesktop.Is3.OnWidescreen.Is4.OnWidescreen" />

</Row>



@code {
    Steps? Steps;


    string selectedStep = "stepTemplate";

    private Task OnSelectedStepChanged(string name)
    {
        selectedStep = name;

        return Task.CompletedTask;
    }


    string? customUserDisplayName;
    bool custom = false;

    NewUserName newUserName = new NewUserName();
    bool collapseVisible = false;
    IADOrganizationalUnit? selectedOU;
    IADUser? customUser;
    IADUser? newUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    bool AllowStep(StepNavigationContext context)
    {
        switch (context.NextStepName)
        {
            case "stepTemplate":
                return true;
            case "stepOU":
                return custom;
            case "stepName":
                return SelectedTemplate != null;
            case "stepFields":
            case "stepDetails":
            case "stepConfirm":

                return newUser != null;
        }
        return false;
    }
    async void OUSelected(IADOrganizationalUnit ou)
    {
        if (selectedOU == null)
        {
            selectedOU = ou;
            return;
        }
        selectedOU = ou;


        await InvokeAsync(StateHasChanged);
    }
    async Task CreateCustomUser()
    {
        if (newUser == null)
        {
            newUser = selectedOU.CreateUser(customUserDisplayName.Trim());
            newUser.DisplayName = customUserDisplayName;
        }
        else
        {
            newUser.MoveTo(selectedOU);
        }
    }
    async void CreateTemplateUser()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);

        var ou = Directory.OUs.FindOuByString(SelectedTemplate.ParentOU).FirstOrDefault();
        newUser = ou.CreateUser(SelectedTemplate.GenerateDisplayName(newUserName));
        newUser.NewEntry = true;

        newUser.SamAccountName = SelectedTemplate.GenerateUsername(newUserName);
        newUser.DisplayName = SelectedTemplate.GenerateDisplayName(newUserName);
        newUser.NewPassword = SelectedTemplate.GeneratePassword().ToSecureString();
        //newUser.CanonicalName = SelectedTemplate.GenerateDisplayName(newUserName);
        newUser.StagePasswordChange(newUser.NewPassword,true); 
        if(!newUserName.GivenName.IsNullOrEmpty())
            newUser.GivenName = newUserName.GivenName;
        if (!newUserName.MiddleName.IsNullOrEmpty())
            newUser.MiddleName = newUserName.MiddleName;
        if (!newUserName.Surname.IsNullOrEmpty())
            newUser.Surname = newUserName.Surname;

        foreach (var fieldValue in SelectedTemplate.FieldValues)
        {
            if (fieldValue.Value != null && fieldValue.Value != "")
            {


                try
                {
                    newUser.NewEntryProperties[fieldValue.Field.FieldName] = SelectedTemplate.ReplaceVariables(fieldValue.Value, newUserName);
                }
                catch (Exception ex)
                {
                    Loggers.ActiveDirectryLogger.Error("Could not set value for " + fieldValue.Field.FieldName + ": " + fieldValue.Value.ToString(), ex);
                }
            }
        }
        var conflictingEntry = Directory.Users.FindUserByUsername(newUser.SamAccountName);
        if (conflictingEntry != null)
        {
            newUser=null;
            NotificationService.Warning("An account with that name already exists! " + conflictingEntry.SamAccountName);
            return;
        }
        SelectedTemplate.AssignedGroupSids.ForEach(sid =>
        {
            var group = Directory.Groups.FindGroupBySID(sid.GroupSid);
            newUser.AssignTo(group);

        });
        if (SelectedTemplate.HasEmptyFields())
        {
            selectedStep = "stepFields";
        }
        else
        {
            selectedStep = "stepConfirm";

        }
        LoadingData = true;

        await InvokeAsync(StateHasChanged);
    }
    async Task UserCreated(IADUser user)
    {

    }
}
