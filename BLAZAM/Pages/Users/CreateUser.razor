@page "/users/create"
@inherits TemplateComponent
@attribute [Authorize(Roles = UserRoles.CreateUsers)]


<AppPageTitle>Create User</AppPageTitle>

<MudTabs PanelClass="mx-auto mud-container mud-container-maxwidth-sm" @ref=Tabs Elevation="0" Outlined="true" @bind-ActivePanelIndex="SelectedStep" Centered=true>

    <MudTabPanel>
        <TabContent>
            Template
        </TabContent>
        <ChildContent>
            @if (Templates != null && Templates.Count() > 0)
            {
                <MudSelectList Values="TemplateCategories"
                               @bind-Value=SelectedCategory />

                <MudPaper Width="300px">
                    <MudList SelectedItemChanged=@SetTemplate Clickable="true">
                        @foreach (var template in Templates)
                        {
                            <MudListItem Text="@template.Name" Value="template" />
                        }
                    </MudList>
                </MudPaper>
            }
            else
            {
                <MudPaper Width="300px">
                    <MudText>There are no templates available</MudText>
                    <AuthorizeView Roles="@UserRoles.SuperAdmin">
                        <MudLink OnClick="@(()=>{Nav.NavigateTo("/templates");})">Create One</MudLink>

                    </AuthorizeView>
                </MudPaper>
            }
            <MudButton Color=Color.Secondary OnClick="@(()=>{custom=true;})">Custom</MudButton>

            <MudButton Disabled=@(SelectedTemplate is null && custom!=true) Color=Color.Success OnClick="@(()=>{if(custom==true)SelectedStep=4;else selectedStep=1;})">Next</MudButton>
        </ChildContent>

    </MudTabPanel>

    <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none") Disabled=@( SelectedTemplate==null)>
        <TabContent>
            Name
        </TabContent>
        <ChildContent>


            <NewUserNameEntry @bind-NewUserName=@newUserName />
            <MudButton Color=Color.Primary OnClick="@(()=>{SelectedStep=0;})">Back</MudButton>
            <MudButton Color="Color.Primary" OnClick="CreateTemplateUser">Next</MudButton>



        </ChildContent>

    </MudTabPanel>

    <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none") Disabled="@(newUser==null)">
        <TabContent>
            Fields
        </TabContent>
        <ChildContent>
            <NewTemplateUser User="@newUser" DirectoryTemplate="SelectedTemplate" />
            <MudButton Disabled=LoadingData Color=Color.Primary OnClick="@(()=>{SelectedStep=1;})">Back</MudButton>
            <MudButton Color=Color.Success OnClick="@(()=>{SelectedStep=3;})">Next</MudButton>

        </ChildContent>

    </MudTabPanel>

    <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none") Disabled="@(newUser==null && SelectedTemplate?.AllowCustomGroups==true)">
        <TabContent>
            Groups
        </TabContent>
        <ChildContent>
            <MemberOfList Model="@newUser" />

            <MudButton Disabled=LoadingData Color=Color.Primary OnClick="@(()=>{SelectedStep=2;})">Back</MudButton>
            <MudButton Color=Color.Success OnClick="@(()=>{SelectedStep=6;})">Next</MudButton>

        </ChildContent>

    </MudTabPanel>


    <MudTabPanel Class=@(custom==true?"":"d-none") Disabled="@(custom==false)">
        <TabContent>
            OU
        </TabContent>
        <ChildContent>
            <OUTreeView SelectedOUChanged="OUSelected" />

            <MudTextField Label="@AppLocalization["Display Name"]" @bind-Value="@customUserDisplayName" />



            <MudButton Color=Color.Primary OnClick="@(()=>{SelectedStep=0;})">Back</MudButton>
            <MudButton Disabled=@(customUserDisplayName.IsNullOrEmpty()&& selectedOU!=null) Color=Color.Success OnClick="@(async()=>{await CreateCustomUser();selectedStep=5;})">Next</MudButton>


        </ChildContent>

    </MudTabPanel>
    <MudTabPanel Class=@(custom==true?"":"d-none") Disabled="@(newUser==null)">
        <TabContent>
            Details
        </TabContent>
        <ChildContent>
            <ViewUser DirectoryEntry="@newUser" @bind-ConfirmPassword=@customConfirmPassword @bind-Password=customPassword />
            <MudButton Color=Color.Primary OnClick="@(()=>{SelectedStep=4;})">Back</MudButton>
            <MudButton Color=Color.Success
                       OnClick="@(()=>{
SelectedStep=6;
if(newUser.NewPassword==null || !newUser.NewPassword.Equals(customConfirmPassword))
newUser.StagePasswordChange(customConfirmPassword.ToSecureString());
})"
                       Disabled=@(customConfirmPassword.IsNullOrEmpty()||customPassword.IsNullOrEmpty()||!customPassword.Equals(customConfirmPassword))>
                Next
            </MudButton>
        </ChildContent>

    </MudTabPanel>


    <MudTabPanel Disabled=@(newUser==null)>
        <TabContent>
            Confirm
        </TabContent>
        <ChildContent>
            <ConfirmNewUser User="@newUser" DirectoryTemplate="SelectedTemplate" />

        </ChildContent>

    </MudTabPanel>
</MudTabs>





@code {
    string customConfirmPassword;
    string customPassword;
    int selectedStep;
    int SelectedStep
    {
        get => selectedStep; set

        {
            if (selectedStep == value) return;
            selectedStep = value;
            InvokeAsync(StateHasChanged);

        }
    }

    private Task OnSelectedStepChanged(int name)
    {
        SelectedStep = name;

        return Task.CompletedTask;
    }


    string? customUserDisplayName;
    bool? custom = false;

    NewUserName newUserName = new NewUserName();
    bool collapseVisible = false;
    IADOrganizationalUnit? selectedOU;
    IADUser? newUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    async void OUSelected(IADOrganizationalUnit ou)
    {
        if (selectedOU == null)
        {
            selectedOU = ou;
            return;
        }
        selectedOU = ou;


        await InvokeAsync(StateHasChanged);
    }
    async Task CreateCustomUser()
    {
        await Task.Run(() =>
        {
            if (selectedOU != null)
            {
                if (newUser == null)
                {
                    newUser = selectedOU.CreateUser(customUserDisplayName.Trim());
                    newUser.DisplayName = customUserDisplayName;
                }
                else
                {
                    newUser.MoveTo(selectedOU);
                }
            }
        });

    }
    async void CreateTemplateUser()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        var ou = Directory.OUs.FindOuByString(SelectedTemplate.ParentOU).FirstOrDefault();
        newUser = ou.CreateUser(SelectedTemplate.GenerateDisplayName(newUserName));

        newUser.SamAccountName = SelectedTemplate.GenerateUsername(newUserName);
        newUser.DisplayName = SelectedTemplate.GenerateDisplayName(newUserName);
        //newUser.SetPassword(SelectedTemplate.GeneratePassword().ToSecureString(),false);
        //newUser.CanonicalName = SelectedTemplate.GenerateDisplayName(newUserName);
        newUser.StagePasswordChange(SelectedTemplate.GeneratePassword().ToSecureString(), true);
        if (!newUserName.GivenName.IsNullOrEmpty())
            newUser.GivenName = newUserName.GivenName;
        if (!newUserName.MiddleName.IsNullOrEmpty())
            newUser.MiddleName = newUserName.MiddleName;
        if (!newUserName.Surname.IsNullOrEmpty())
            newUser.Surname = newUserName.Surname;

        foreach (var fieldValue in SelectedTemplate.InheritedFieldValues)
        {




            try
            {
                if (fieldValue.Field != null)
                    if (fieldValue.Field.FieldName.ToLower() == "homedirectory")
                        newUser.HomeDirectory = SelectedTemplate.ReplaceVariables(fieldValue.Value, newUserName);
                    else
                        newUser.NewEntryProperties[fieldValue.Field.FieldName] = SelectedTemplate.ReplaceVariables(fieldValue.Value, newUserName);
                else if (fieldValue.CustomField != null)
                    newUser.NewEntryProperties[fieldValue.CustomField.FieldName] = SelectedTemplate.ReplaceVariables(fieldValue.Value, newUserName);
            }
            catch (Exception ex)
            {
                Loggers.ActiveDirectryLogger.Error("Could not set value for " + fieldValue.Field?.FieldName + ": " + fieldValue.Value.ToString() + " {@Error}", ex);
            }

        }
        var conflictingEntry = Directory.Users.FindUserByUsername(newUser.SamAccountName);
        if (conflictingEntry != null)
        {
            newUser = null;
            SnackBarService.Warning("An account with that name already exists! " + conflictingEntry.SamAccountName);
            return;
        }
        SelectedTemplate.AssignedGroupSids.ForEach(sid =>
        {
            var group = Directory.Groups.FindGroupBySID(sid.GroupSid);
            if (group != null)
                newUser.AssignTo(group);

        });
        if (IsAdmin || SelectedTemplate.HasEmptyFields())
        {
            SelectedStep = 2;
        }
        else
        {
            //Go to confirm step
            SelectedStep = 6;

        }

        LoadingData = false;

        await InvokeAsync(StateHasChanged);
    }

    async Task SetTemplate(MudListItem selectedTemplate)
    {
        SelectedTemplate = selectedTemplate.Value as DirectoryTemplate;
        custom = false;
        await InvokeAsync(StateHasChanged);
    }
}
