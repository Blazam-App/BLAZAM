@page "/users/create"
@inherits TemplateComponent
@attribute [Authorize(Roles = UserRoles.CreateUsers)]

@if (newUser != null)
{
    <AppNavLock />
}
<AppPageTitle>Create User</AppPageTitle>
<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudTabs PanelClass="mx-auto w-100"
             @ref=Tabs
             Elevation="0"
             Outlined="true"
             @bind-ActivePanelIndex="SelectedStep"
             Centered=true>

        <MudTabPanel>
            <TabContent>
                Template
            </TabContent>
            <ChildContent>

                @if (TemplateCategories != null && Templates != null && Templates.Count(t => t.DeletedAt == null && t.Visible) > 0)
                {
                    @* <MudSelectList Values="TemplateCategories"
                @bind-Value=SelectedCategory /> *@

                    <MudCarousel Style="height:50vh"
                                 ShowArrows=false
                                 ShowBullets=false
                                 EnableSwipeGesture=false
                                 AutoCycle=false
                                 @bind-SelectedIndex=_templateCarouselIndex
                                 TData="object">
                        <MudCarouselItem Class="pa-5">
                            <FlexContainer>

                                @foreach (var category in TemplateCategoriesUserCanUse)
                                {
                                    <MudButton StartIcon="@Icons.Material.Filled.Folder"
                                               OnClick=@(()=>{SelectedCategory=category; _templateCarouselIndex=1;})
                                               Variant="Variant.Filled"
                                               Color="Color.Secondary"
                                               Size="Size.Large">@category</MudButton>
                                }
                                @foreach (var uncategorizedTemplate in TemplatesUserCanUse.Where(t => t.Category.IsNullOrEmpty() && t.DeletedAt == null && t.Visible))
                                {
                                    <MudButton StartIcon="@Icons.Material.Filled.DynamicForm"
                                               OnClick=@(async()=>{await SetTemplate(uncategorizedTemplate);})
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Size="Size.Large">@uncategorizedTemplate.Name</MudButton>
                                }
                            </FlexContainer>
                        </MudCarouselItem>

                        <MudCarouselItem Class="pa-5">

                            <FlexContainer>
                                <MudFab StartIcon="@Icons.Material.Filled.ArrowBack"
                                        Size="Size.Small"
                                        OnClick="@(()=>{_templateCarouselIndex=0; SelectedCategory=null;})"
                                        Color="Color.Primary" />
                                @foreach (var template in TemplatesUserCanUse.Where(t => t.DeletedAt == null && t.Visible))
                                {
                                    <MudButton StartIcon="@Icons.Material.Filled.DynamicForm"
                                               OnClick=@(async()=>{await SetTemplate(template);})
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Size="Size.Large">@template.Name</MudButton>

                                }
                            </FlexContainer>

                        </MudCarouselItem>
                    </MudCarousel>

                }
                else
                {
                    <MudPaper Width="300px">
                        <MudText>@AppLocalization["There are no templates available"]</MudText>
                        <AuthorizeView Roles="@UserRoles.SuperAdmin">
                            <MudLink Href="/templates">Create One</MudLink>

                        </AuthorizeView>
                    </MudPaper>
                }
                <MudButton Color=Color.Secondary
                           OnClick="@(()=>{custom=true; newUser=null; SelectedTemplate=null; SelectedStep=5;})">
                    @AppLocalization["Custom"]
                </MudButton>

            </ChildContent>

        </MudTabPanel>

        <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none")
                     Disabled=@( SelectedTemplate==null)>
            <TabContent>
                @AppLocalization["Name"]
            </TabContent>
            <ChildContent>


                <NewUserNameEntry @bind-NewUserName=@newUserName
                                  OnNext="CreateTemplateUser"
                                  OnBack="@(()=>{SelectedStep=0;})" />



            </ChildContent>

        </MudTabPanel>
        <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none")
                     Disabled="@(newUser==null)">
            <TabContent>
                @AppLocalization["Username"]
            </TabContent>
            <ChildContent>
                @{

                    var conflictingEntry = Directory.Users.FindUserByUsername(newUser?.SamAccountName, false);
                    if (conflictingEntry != null && conflictingEntry.SamAccountName?.Equals(newUser?.SamAccountName, StringComparison.InvariantCultureIgnoreCase) == true)
                    {
                        //newUser = null;
                        SnackBarService.Warning("An account with that name already exists! " + conflictingEntry.SamAccountName);
                        usernameStepValid = false;
                    }
                    else
                    {
                        if (newUser?.SamAccountName.IsNullOrEmpty() == false)
                        {
                            usernameStepValid = true;
                        }
                       
                    }

                }
                <MudTextField Class="mt-5"
                              Label="@AppLocalization["Username"]"
                              Disabled=@(!CurrentUser.State.IsSuperAdmin && SelectedTemplate.EffectiveAllowUsernameOverride!=true)
                              T=string
                              @bind-Value=@newUser.SamAccountName />

                <MudButton Disabled=LoadingData
                           Color=Color.Primary
                           OnClick="@(()=>{SelectedStep=1;})">Back</MudButton>
                <MudButton Color=Color.Success
                Disabled="@(conflictingEntry !=null)"
                           OnClick="@(()=>{SelectedStep=3;})">Next</MudButton>

            </ChildContent>

        </MudTabPanel>
        <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none") Disabled="@(newUser==null || usernameStepValid==false)">
            <TabContent>
                @AppLocalization["Fields"]
            </TabContent>
            <ChildContent>
                <NewTemplateUser NewUserName="newUserName"
                                 OnValidSubmit=@(()=>{SelectedStep=4;})
                                 User="@newUser"
                                 DirectoryTemplate="SelectedTemplate" />
                <MudButton Disabled=LoadingData
                           Color=Color.Primary
                           OnClick="@(()=>{SelectedStep=2;})">Back</MudButton>

            </ChildContent>

        </MudTabPanel>

        <MudTabPanel Class=@(SelectedTemplate!=null?"":"d-none")
                     Disabled="@(newUser==null || usernameStepValid==false)">
            <TabContent>
                @AppLocalization["Groups"]
            </TabContent>
            <ChildContent>
                <MemberOfList Target="_blank"
                              AssignToClicked="@(async()=>{await _assignToModal?.ShowAsync();})"
                              Disabled="@(SelectedTemplate.EffectiveAllowCustomGroups!=true  && !CurrentUser.State.IsSuperAdmin)"
                              Model="@newUser" />
                <AppModal @ref=_assignToModal>
                    <AssignToModalContent ModelChanged=@(async()=>{
                                          await InvokeAsync(StateHasChanged);
                                          }) DirectoryModel="newUser" />
                </AppModal>
                <MudButton Disabled=LoadingData
                           Color=Color.Primary
                           OnClick="@(()=>{SelectedStep=3;})">Back</MudButton>
                <MudButton Color=Color.Success
                           OnClick="@(()=>{SelectedStep=7;})">Next</MudButton>

            </ChildContent>

        </MudTabPanel>


        <MudTabPanel Class=@(custom==true?"":"d-none") Disabled="@(custom==false)">
            <TabContent>
                @AppLocalization["OU"]
            </TabContent>
            <ChildContent>
                @* <ADTreeView ShowAllEntries=false SelectedEntryChanged="OUSelected"/> *@
                <OUTreeView AdditionalVisibilityFilters=@(AdditionalShow)
                            StartRootExpanded=true
                            SelectedEntryChanged="OUSelected" />

                <MudTextField Label="@AppLocalization["Display Name"]"
                              @bind-Value="@customUserDisplayName" />



                <MudButton Color=Color.Primary
                           OnClick="@(()=>{SelectedStep=0;})">Back</MudButton>
                <MudButton Disabled=@(customUserDisplayName.IsNullOrEmpty()|| selectedOU==null)
                           Color=Color.Success
                           OnClick="@(async()=>{
await CreateCustomUser();
selectedStep=6;
})">Next</MudButton>


            </ChildContent>

        </MudTabPanel>
        <MudTabPanel Class=@(custom==true?"":"d-none")
                     Disabled="@(newUser==null || usernameStepValid==false)">
            <TabContent>
                @AppLocalization["Details"]
            </TabContent>
            <ChildContent>
                @*TODO: The following binding cause the next button to not update when validation is reached, updates are controlled from
                this element
                *@
                <ViewUser DirectoryEntry="@newUser"
                          @bind-ConfirmPassword=@customConfirmPassword
                          @bind-Password=customPassword />
                <MudButton Color=Color.Primary
                           OnClick="@(()=>{SelectedStep=4;})">Back</MudButton>
                <MudButton Color=Color.Success
                           OnClick="@(()=>{
SelectedStep=7;
if(newUser?.NewPassword==null || !newUser.NewPassword.Equals(customConfirmPassword))
newUser?.StagePasswordChange(customConfirmPassword.ToSecureString());
})"
                           Disabled=@(customConfirmPassword.IsNullOrEmpty()||customPassword.IsNullOrEmpty()||!customPassword.Equals(customConfirmPassword))>

                    @AppLocalization["Next"]
                </MudButton>
            </ChildContent>

        </MudTabPanel>


        <MudTabPanel Disabled=@(newUser==null || usernameStepValid==false)>
            <TabContent>

                @AppLocalization["Confirm"]
            </TabContent>
            <ChildContent>
                <ConfirmNewUser User="@newUser"
                                DirectoryTemplate="SelectedTemplate" />

            </ChildContent>

        </MudTabPanel>
    </MudTabs>

</MudContainer>


@code {
    string customConfirmPassword;
    string customPassword;
    bool usernameStepValid = false;
    int _templateCarouselIndex = 0;
    int selectedStep;
    int SelectedStep
    {
        get => selectedStep; set

        {
            if (selectedStep == value) return;
            selectedStep = value;
            InvokeAsync(StateHasChanged);

        }
    }
    AppModal? _assignToModal;

    private Task OnSelectedStepChanged(int name)
    {
        SelectedStep = name;

        return Task.CompletedTask;
    }


    string? customUserDisplayName;
    bool? custom = false;

    NewUserName newUserName = new NewUserName();
    IADOrganizationalUnit? selectedOU;
    IADUser? newUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    async void OUSelected(IDirectoryEntryAdapter entry)
    {
        if (entry is IADOrganizationalUnit ou)
        {
            if (ou.CanCreateUser)
                selectedOU = ou;
            else
            {
                SnackBarService.Warning(AppLocalization["You do not have permission to create users in that location"]);
            }
        }

        await InvokeAsync(StateHasChanged);
    }
    async Task CreateCustomUser()
    {
        await Task.Run(() =>
        {
            if (selectedOU != null)
            {
                if (newUser == null)
                {
                    if (customUserDisplayName == null) SnackBarService.Error(AppLocalization["No display name was set"]);
                    else
                    {
                        newUser = selectedOU.CreateUser(customUserDisplayName.Trim());
                        newUser.DisplayName = customUserDisplayName;
                    }
                }
                else
                {
                    newUser.MoveTo(selectedOU);
                }
            }
        });

    }
    async void CreateTemplateUser()
    {
        if (SelectedTemplate?.ParentOU == null) throw new ApplicationException("Parent OU for template user was not set on creation!");
        try
        {
            LoadingData = true;
            await InvokeAsync(StateHasChanged);
            var ou = Directory.OUs.FindOuByString(SelectedTemplate.EffectiveParentOU).FirstOrDefault();
            if (ou == null) throw new ApplicationException("OU could not be found for new user");
            newUser = ou.CreateUser(SelectedTemplate.GenerateDisplayName(newUserName));

            newUser.SamAccountName = SelectedTemplate.GenerateUsername(newUserName);
            newUser.DisplayName = SelectedTemplate.GenerateDisplayName(newUserName);
            //newUser.SetPassword(SelectedTemplate.GeneratePassword().ToSecureString(),false);
            //newUser.CanonicalName = SelectedTemplate.GenerateDisplayName(newUserName);
            newUser.StagePasswordChange(SelectedTemplate.GeneratePassword(newUserName).ToSecureString());
            if (SelectedTemplate.EffectiveRequirePasswordChange == true)
                newUser.StageRequirePasswordChange(true);
            if (!newUserName.GivenName.IsNullOrEmpty())
                newUser.GivenName = newUserName.GivenName;
            if (!newUserName.MiddleName.IsNullOrEmpty())
                newUser.MiddleName = newUserName.MiddleName;
            if (!newUserName.Surname.IsNullOrEmpty())
                newUser.Surname = newUserName.Surname;



            SelectedTemplate.EffectiveAssignedGroupSids.ForEach(sid =>
            {
                var group = Directory.Groups.FindGroupBySID(sid.GroupSid);
                if (group != null)
                    newUser.AssignTo(group);

            });
            if (IsAdmin || SelectedTemplate.HasEmptyFields())
            {
                SelectedStep = 2;
            }
            else
            {
                //Go to confirm step
                SelectedStep = 7;

            }
        }
        catch (Exception ex)
        {

            Loggers.ActiveDirectoryLogger.Error("Error while creating template user {@Error}", ex);

            SnackBarService.Error(AppLocalization["An error has occurred while trying to create the template user: "] + ex.Message);
        }
        LoadingData = false;

        await InvokeAsync(StateHasChanged);
    }

    async Task SetTemplate(DirectoryTemplate selectedTemplate)
    {
        SelectedTemplate = selectedTemplate;
        custom = false;
        SelectedStep = 1;
        await InvokeAsync(StateHasChanged);
    }
    bool AdditionalShow(IDirectoryEntryAdapter entry)
    {
        if (entry is IADOrganizationalUnit ou)
        {
            if (ou.CanCreateUser) return true;
            if (ou.CanCreateUserInSubOUs) return true;
        }
        return false;
    }
}
