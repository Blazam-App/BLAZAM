@inherits DirectoryModelComponent
@if (User?.NewEntry == true)
{
    EditMode = true;

}
<LoadingIndicator Height="Height.Is100" Visible=LoadingData>

    <Div Padding="Padding.Is3" Margin="Margin.Is5.OnFullHD.OnX.Is3.OnWidescreen.OnX.Is0">
        <EditForm Model="User">
            @if (User?.NewEntry == false)
            {
                <SetSubHeader @ref="subHeader">
                    <Bar Mode="BarMode.Horizontal"
                     CollapseMode="BarCollapseMode.Small"
                     Breakpoint="Breakpoint.Desktop"
                     NavigationBreakpoint="Breakpoint.Tablet"
                     ThemeContrast="ThemeContrast.Dark"
                     Padding="Padding.Is2.OnX"
                     Background="Background.Dark"
                     TextColor="TextColor.Light"
                     VerticalAlignment="VerticalAlignment.Middle">
                        <BarBrand Width=Width.Is100>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is10.OnTablet.Is8">

                                    <Row>
                                        <Column ColumnSize="ColumnSize.Is4.OnTablet">
                                            @{
                                                var displayNameTooltipText = "";
                                                if (!User.NewEntry)
                                                {
                                                    displayNameTooltipText = $"Password Last Set: {User.PasswordLastSet} \r\n Created: {User.Created}\r\n Last Changed: {User.LastChanged}";

                                                }

                                            }
                                            <Tooltip Placement="TooltipPlacement.Bottom" Multiline Text=@displayNameTooltipText>

                                                @User.DisplayName
                                            </Tooltip>


                                        </Column>
                                        <Column ColumnSize="ColumnSize.Is8.OnTablet">
                                            <Small TextWeight="TextWeight.Light">@DirectoryTools.PrettifyOu(User.OU) </Small>

                                        </Column>
                                    </Row>
                                </Column>

                                <Column ColumnSize="ColumnSize.Is1.OnTablet.Is2">

                                    @if (User.LockedOut)
                                    {
                                        <Icon Name=@("fa-lock")>Account Locked</Icon>
                                    }
                                </Column>
                                <Column Float=Float.End ColumnSize="ColumnSize.Is1.OnTablet.Is2">

                                    <Dropdown>
                                        <DropdownToggle Color="Color.Primary">
                                            <Icon Name=@("fa-gear") />
                                        </DropdownToggle>
                                        <DropdownMenu>
                                            <DropdownItem>
                                                <Switch @bind-Checked=@(User.Enabled) Disabled=@((User.Disabled && !User.CanEnable)||(User.Enabled && !User.CanDisable))>Account Enabled</Switch>

                                            </DropdownItem>
                                            <DropdownDivider />
                                            @if (User.CanEdit)
                                            {
                                                <DropdownItem Clicked="ToggleEditMode">Edit...</DropdownItem>
                                            }
                                            @if (User.LockedOut && User.CanUnlock)
                                            {
                                                <DropdownItem Clicked="Unlock">Unlock...</DropdownItem>
                                            }
                                            @if (User.CanAssign)
                                            {
                                                RefreshUserGroups();
                                                <DropdownItem Clicked="@(()=>{AssignToModal?.Show();})">Assign To...</DropdownItem>
                                            }
                                            @if (User.CanDisable)
                                            {
                                                <DropdownItem Clicked="@(()=>{ChangePasswordModal?.Show();})">Change Password...</DropdownItem>
                                            }
                                            @if (User.CanRename)
                                            {
                                                <DropdownItem Clicked="@(()=>{RenameModal?.Show();})">Rename...</DropdownItem>
                                                @if (User.ThumbnailPhoto == null)
                                                {
                                                    <DropdownItem Clicked="@(()=>{UploadThumbnailModal?.Show();})">Upload Photo...</DropdownItem>

                                                }
                                                else
                                                {
                                                    <DropdownItem Clicked="@(()=>{UploadThumbnailModal?.Show();})">Replace Photo...</DropdownItem>

                                                }

                                            }
                                            @if (User.CanMove)
                                            {
                                                <DropdownItem Clicked="@(()=>{MoveToModal?.Show();})">Move To...</DropdownItem>
                                            }
                                            @if (User.CanDelete)
                                            {
                                                <DropdownItem Clicked="@DeleteUser">Delete...</DropdownItem>
                                            }
                                        </DropdownMenu>
                                    </Dropdown>
                                </Column>
                            </Row>


                        </BarBrand>

                    </Bar>


                </SetSubHeader>
            }


            <Row>

                <AppModal TextColor="TextColor.Dark" Title="Upload Thumbnail..." @ref=@UploadThumbnailModal>
                    <UploadThumbnailModalContent ModelChanged=@(()=>{InvokeAsync(StateHasChanged);}) DirectoryModel="User" />
                </AppModal>
                <AppModal TextColor="TextColor.Dark" Title="Assign To..." @ref=@AssignToModal>
                    <AssignToModalContent ModelChanged=@(()=>{InvokeAsync(StateHasChanged);}) DirectoryModel="User" />
                </AppModal>
                <AppModal TextColor="TextColor.Dark" Title="Move To" @ref=@MoveToModal>
                    @if (MoveToModal.IsShown)
                    {
                        <MoveToOUModalContent ModelChanged=@(()=>{Nav.NavigateTo(Nav.Uri,true);}) DirectoryModel="User" />
                    }
                </AppModal>
                <AppModal Title="Rename User" @ref=@RenameModal>
                    @if (RenameModal.IsShown)
                    {
                        <RenameUserModalContent DirectoryModelRenamed=@((renamedUser)=>{Renamed(renamedUser);}) User="User" />
                    }
                </AppModal>
                <AppModal Title="Change Password" @ref=@ChangePasswordModal>
                    @if (ChangePasswordModal.IsShown)
                    {
                        <ChangeUserPasswordModalContent User="User" />
                    }
                </AppModal>
                <Row Width="Width.Is100" Padding="Padding.Is0">
                    @if (User.ThumbnailPhoto != null)
                    {
                        <Column Padding="Padding.Is0" Display=Display.InlineFlex ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnWidescreen.Is3.OnDesktop.Is4.OnTablet.Is12.OnMobile">
                            <Div Position=Position.Relative Display=Display.Block Style="width:fit-content;height:fit-content" Padding=Padding.Is0>
                                <Figure Style="width:fit-content;height:fit-content" Margin=Margin.IsAuto TextAlignment=TextAlignment.Center Padding=Padding.Is0 Overflow=Overflow.Hidden Border="Border.Rounded">
                                    <Base64Image Data="User.ThumbnailPhoto.ReizeRawImage(150)" />
                                </Figure>
                                <Icon Clicked=RemoveThumbnail Border=Border.RoundedCircle Background=Background.Dark Display=Display.Block Position=Position.Absolute style="width:20px;height:20px;padding:2px;top:-10px;left:-10px" TextColor=TextColor.Danger Name="@("fa-solid fa-times")" />
                            </Div>

                        </Column>
                    }
                    @if (User.CanReadField(ActiveDirectoryFields.GivenName) ||
                    User.CanReadField(ActiveDirectoryFields.MiddleName) ||
                    User.CanReadField(ActiveDirectoryFields.SN) ||
                    User.CanReadField(ActiveDirectoryFields.DisplayName)
                    )
                    {
                        <Column>
                            <Section Title=@UserLocalization["Name"]>


                                @if (User.CanReadField(ActiveDirectoryFields.GivenName))
                                {
                                    <Field Horizontal ColumnSize="FieldColumnSize">
                                        <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                            @UserLocalization["First Name"]
                                        </FieldLabel>
                                        <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                            <TextEdit @bind-Text="@User.GivenName" Disabled=!User.NewEntry />

                                        </FieldBody>
                                    </Field>
                                }
                                @if (User.CanReadField(ActiveDirectoryFields.MiddleName))
                                {
                                    <Field Horizontal ColumnSize="FieldColumnSize">
                                        <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                            @UserLocalization["Middle Name"]
                                        </FieldLabel>
                                        <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                            <TextEdit @bind-Text="@User.MiddleName" Disabled=!User.NewEntry />

                                        </FieldBody>
                                    </Field>
                                }
                                @if (User.CanReadField(ActiveDirectoryFields.SN))
                                {
                                    <Field Horizontal ColumnSize="FieldColumnSize">
                                        <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                            @UserLocalization["Last Name"]
                                        </FieldLabel>
                                        <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                            <TextEdit @bind-Text="@User.Surname" Disabled=!User.NewEntry />

                                        </FieldBody>
                                    </Field>
                                }
                                @if (User.CanReadField(ActiveDirectoryFields.DisplayName))
                                {
                                    <Field Horizontal ColumnSize="FieldColumnSize">
                                        <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                            @UserLocalization["Display Name"]
                                        </FieldLabel>
                                        <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                            <TextEdit @bind-Text="@User.DisplayName" Disabled=!User.NewEntry />

                                        </FieldBody>
                                    </Field>
                                }

                                @if (EditMode && !User.NewEntry)
                                {
                                    <Field>
                                        <FieldHelp>
                                            To Modify the user's name click the Gear button and choose "Rename..."
                                        </FieldHelp>
                                    </Field>
                                }
                            </Section>
                        </Column>
                    }

                </Row>


                @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName) ||
                User.CanReadField(ActiveDirectoryFields.Mail) ||
                User.CanReadField(ActiveDirectoryFields.AccountExpires))
                {
                    <Section Title="@UserLocalization["Account"]">

                        @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Username"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <Addons>
                                        <Addon AddonType="AddonType.Body">
                                            <TextEdit @bind-Text="@User.SamAccountName" Disabled=!User.NewEntry />

                                        </Addon>
                                        <Addon AddonType="AddonType.End">
                                            <Button Color="Color.Primary" Clicked=@(()=>{CopyToClipboard(User.SamAccountName);})><Icon Name=@("fa-solid fa-copy") /></Button>

                                        </Addon>
                                    </Addons>
                                </FieldBody>
                            </Field>
                        }

                        @if (User.NewEntry)
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Password"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@Password" Role="TextRole.Password">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>

                                </FieldBody>
                            </Field>
                            <Validation Validator="ValidatePassword">
                                <Field Horizontal ColumnSize="FieldColumnSize">
                                    <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                        @UserLocalization["Confirm Password"]
                                    </FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                        <TextEdit @bind-Text="@ConfirmPassword" Role="TextRole.Password">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        }

                        @if (User.CanReadField(ActiveDirectoryFields.Mail))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Email Address"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <Addons>
                                        <Addon AddonType="AddonType.Body">
                                            <TextEdit @bind-Text="@User.Email" Disabled=!User.NewEntry />

                                        </Addon>
                                        <Addon AddonType="AddonType.End">
                                            <Button Color="Color.Primary" Clicked=@(()=>{CopyToClipboard(User.Email);})><Icon Name=@("fa-solid fa-copy") /></Button>

                                        </Addon>
                                    </Addons>



                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.AccountExpires))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Account Expiration"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <DateEdit TValue=DateTime? Date="@User.ExpireTime" DateChanged=SetExpireTime Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.AccountExpires)) />
                                </FieldBody>
                            </Field>
                        }
                        @if (EditMode && !User.NewEntry)
                        {

                            <Field>
                                <FieldHelp>
                                    To Modify the user's accounts click the Gear button and choose "Rename..."
                                </FieldHelp>
                            </Field>
                        }

                    </Section>
                }


                @if (User.CanReadField(ActiveDirectoryFields.EmployeeId) ||
                User.CanReadField(ActiveDirectoryFields.Department) ||
                User.CanReadField(ActiveDirectoryFields.Company) ||
                User.CanReadField(ActiveDirectoryFields.Title) ||
                User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice)
                )
                {
                    <Section Title=@UserLocalization["Organization"]>
                        @if (User.CanReadField(ActiveDirectoryFields.Description))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Description"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.Description" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Description)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.EmployeeId))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Employee Id"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.EmployeeId" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.EmployeeId)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Department))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Department"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.Department" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Department)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Company))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Company"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.Company" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Company)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Title))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Job Title"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.Title" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Title)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Office"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.PhysicalDeliveryOfficeName" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PhysicalDeliveryOffice)) />

                                </FieldBody>
                            </Field>
                        }
                    </Section>
                }

                @if (User.CanReadField(ActiveDirectoryFields.HomePhone) ||
                User.CanReadField(ActiveDirectoryFields.StreetAddress) ||
                User.CanReadField(ActiveDirectoryFields.Street) ||
                User.CanReadField(ActiveDirectoryFields.City) ||
                User.CanReadField(ActiveDirectoryFields.State) ||
                User.CanReadField(ActiveDirectoryFields.PostalCode)
                )
                {
                    <Section Title=@UserLocalization["Contact Info"]>

                        @if (User.CanReadField(ActiveDirectoryFields.HomePhone))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Home Phone"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.HomePhone" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomePhone)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.StreetAddress))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Street Address"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.StreetAddress" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.StreetAddress)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Street))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Street"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.Street" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Street)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.City))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["City"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.City" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.City)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.State))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["State"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.State" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.State)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.PostalCode))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Zip Code"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.Zip" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PostalCode)) />

                                </FieldBody>
                            </Field>
                        }
                    </Section>
                }


                @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory) ||
                User.CanReadField(ActiveDirectoryFields.HomeDrive) ||
                User.CanReadField(ActiveDirectoryFields.ScriptPath) ||
                User.CanReadField(ActiveDirectoryFields.ProfilePath)
                )
                {
                    <Section Title=@UserLocalization["Profile"]>
                        @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Home Directory"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <Addons>
                                        <Addon AddonType="AddonType.Body">
                                            <TextEdit @bind-Text="@User.HomeDirectory" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDirectory)) />

                                        </Addon>
                                        <Addon AddonType="AddonType.End">
                                            <Button Color="Color.Primary" Clicked=@(()=>{CopyToClipboard(User.HomeDirectory);})><Icon Name=@("fa-solid fa-copy") /></Button>

                                        </Addon>
                                    </Addons>




                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.HomeDrive))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Home Drive"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">

                                    <Select TValue="string" @bind-SelectedValue="@User.HomeDrive" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDrive))>
                                        <SelectItem Value="String.Empty"></SelectItem>
                                        @for (var i = 'D'; i <= 'Z'; i++)
                                        {
                                            var driveLetter = (i.ToString() + ":");
                                            <SelectItem Value=@driveLetter>@driveLetter</SelectItem>
                                        }
                                    </Select>
                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.ScriptPath))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Script Path"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.ScriptPath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ScriptPath)) />

                                </FieldBody>
                            </Field>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.ProfilePath))
                        {
                            <Field Horizontal ColumnSize="FieldColumnSize">
                                <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                                    @UserLocalization["Profile Path"]
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                                    <TextEdit @bind-Text="@User.ProfilePath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ProfilePath)) />

                                </FieldBody>
                            </Field>
                        }
                    </Section>
                }




                @if (User.CanReadField(ActiveDirectoryFields.MemberOf))
                {

                    <Field ColumnSize="ColumnSize.Is12" Horizontal>

                        <FieldBody ColumnSize="ColumnSize.Is12">
                            <Row>
                                @if (User.IsAGroupMember)
                                {
                                    var deniedRead = false;
                                    @foreach (ADGroup g in User.MemberOf.Where(group => group.CanRead))
                                    {
                                        if (g.CanRead)
                                        {
                                            <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                                                <BLAZAM.Server.Shared.UI.Groups.AssignedGroup Group=g Member="User" OnGroupMembershipChange="@((change)=>{InvokeAsync(StateHasChanged);})" />
                                            </Column>
                                        }
                                        else
                                        {
                                            deniedRead = true;
                                        }
                                    }

                                    if (deniedRead)
                                    {
                                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                                            The user is in more groups you don't have access to
                                        </Column>
                                    }

                                }

                            </Row>
                        </FieldBody>
                    </Field>
                }
                @if (User.HasUnsavedChanges && !User.NewEntry)
                {
                    <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
                }
            </Row>



        </EditForm>
    </Div>

</LoadingIndicator>





@code {
    SetSubHeader? subHeader;
    string Password;
    string ConfirmPassword;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        User.OnModelChanged += RefreshHeader;
        User.OnDirectoryModelRenamed += Renamed;
    }

    void RefreshHeader()
    {
        subHeader?.Refresh();
    }

    void ValidatePassword(ValidatorEventArgs e)
    {

        e.Status = !IsPasswordValid
            ? ValidationStatus.Error
        : ValidationStatus.Success;

    }

    bool IsPasswordValid
    {
        get
        {

            if (Password != null && Password != "")
                return Password == ConfirmPassword;
            return false;
        }
    }

    protected async Task RefreshUserGroups()
    {
        await Task.Run(() =>
        {
            if (User != null)
                memberOfGroups = User.MemberOf;

            LoadingData = false;

            InvokeAsync(StateHasChanged);

        });
    }

    void SetExpireTime(DateTime? time)
    {
        if (time != null && time != DateTime.MinValue)
            User.ExpireTime = time.Value.AddDays(1);
        else
            User.ExpireTime = null;
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            try
            {
                var changes = User.Changes;
                await User.CommitChangesAsync();
                await AuditLogger.User.Changed(User, changes);
                EditMode = false;
                await NotificationService.Success("The changes made to this user have been saved.", "Changes Saved");
            }
            catch (ApplicationException ex)
            {
                await NotificationService.Error(ex.Message, "Save Failed");

            }
            await InvokeAsync(StateHasChanged);

        }

    }
    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            User.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + User.DisplayName + "?", "Unlock User"))
        {
            User.LockedOut = false;
            await NotificationService.Warning(User.DisplayName + " will be unlocked when changes are saved.", "Unlock Pending");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteUser()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + User.DisplayName + "?", "Delete User"))
        {
            try
            {
                User.Delete();
                await NotificationService.Success(User.DisplayName + " has been deleted.", "User Deleted");
                //User = null;
                Nav.NavigateTo("/users/search");
            }
            catch (ApplicationException ex)
            {
                await NotificationService.Error(ex.Message);
            }

            await InvokeAsync(StateHasChanged);
        }
    }
    async Task RemoveThumbnail()
    {
        if (await MessageService.Confirm("Are you sure you want to delete the thumbnail photo for" + User.DisplayName + "?", "Delete Thumbnail"))
        {
            User.ThumbnailPhoto = null;
            await NotificationService.Warning(User.DisplayName + " will have their thumbnail deleted on save.", "Thumbnail Deletion Pending");
            await InvokeAsync(StateHasChanged);
        }
    }

    void Renamed(IDirectoryEntryAdapter renamedUser)
    {
        if(renamedUser is IADUser user)
        {
            Nav.NavigateTo(user.SearchUri);
        }
       
    }
}
