@inherits DirectoryModelComponent
@{
    string _fieldMudStackClasses = "flex-wrap gap-10";
}
@if (User?.NewEntry == true)
{
    EditMode = true;

}

<AppPageTitle>@User?.SamAccountName</AppPageTitle>
<EditForm OnValidSubmit=SaveChanges Model="User">
    @if (User?.NewEntry == false)
    {
        <SetSubHeader @ref="subHeader">

            <MudStack Row Class="mud-width-full">

            <MudStack Row=true>
                @{
                        var displayNameTooltipText = "";
                        if (!User.NewEntry)
                        {
                            displayNameTooltipText = $"Password Last Set: {User.PasswordLastSet} \r\n Created: {User.Created}\r\n Last Changed: {User.LastChanged}";

                        }

                    }
                    <MudTooltip Placement="Placement.Bottom" Text=@displayNameTooltipText>

                        @User.DisplayName
                    </MudTooltip>


                    <small TextWeight="TextWeight.Light">@DirectoryTools.PrettifyOu(User.OU) </small>

                </MudStack>


                @if (User.LockedOut)
                {
                    <MudIconButton OnClick=Unlock Icon=@Icons.Material.Filled.Lock />
                }
                <MudHidden Breakpoint="Breakpoint.Sm">
                <MudToolBar Style="height:32px" DisableGutters Dense>
                    @if ((User.Enabled && User.CanDisable) || (User.Disabled && User.CanEnable))

                        {
                            <MudToggleIconButton @bind-Toggled="@User.Enabled"
                                         Icon="@Icons.Material.Filled.PersonOff"
                                         Color="Color.Error"
                                         Title="Enable"
                                         ToggledIcon="@Icons.Material.Filled.Person"
                                         ToggledColor="Color.Success"
                                         ToggledTitle="Disable" />
                        }
                        @*<DynamicMudInput Color=Color.Success Label="Account Enabled" @bind-Value=@(User.Enabled) Disabled=@((User.Disabled && !User.CanEnable)||(User.Enabled && !User.CanDisable)) />*@
                        @*<MudSwitch Color=Color.Success Label="Account Enabled" @bind-Checked=@(User.Enabled) Disabled=@((User.Disabled && !User.CanEnable)||(User.Enabled && !User.CanDisable)) />*@


                        @if (User.CanEdit)
                        {
                            <MudToggleIconButton @bind-Toggled="@EditMode"
                                         Icon="@Icons.Material.Filled.Edit"
                                         Title="Edit"
                                         ToggledIcon="@Icons.Material.Filled.EditOff"
                                         ToggledColor="Color.Error"
                                         ToggledTitle="End Edit" />

                        }
                        @if (User.LockedOut && User.CanUnlock)
                        {
                            <MudIconButton OnClick="Unlock"
                                   Icon="@Icons.Material.Filled.LockOpen"
                                           aria-label="unlock" />

                        }
                        @if (User.CanAssign)
                        {
                            RefreshUserGroups();
                            <MudIconButton OnClick="@(()=>{AssignToModal?.Show();})"
                                   Icon="@Icons.Material.Filled.GroupAdd"
                                           aria-label="assign to" />


                        }
                        @if (User.CanDisable)
                        {
                            <MudIconButton OnClick="@(()=>{ChangePasswordModal?.Show();})"
                                   Icon="@Icons.Material.Filled.Password"
                                           aria-label="change password" />

                        }
                        @if (User.CanRename)
                        {
                            <MudIconButton OnClick="@(()=>{RenameModal?.Show();})"
                                   Icon="@Icons.Material.Filled.DriveFileRenameOutline"
                                           aria-label="rename" />


                        }
                        @if (User.CanMove)
                        {
                            <MudIconButton OnClick="@(()=>{MoveToModal?.Show();})"
                                   Icon="@Icons.Material.Filled.DriveFileMove"
                                           aria-label="move" />

                        }
                        @if (User.CanDelete)
                        {
                            <MudIconButton OnClick="@DeleteUser"
                                   Color="Color.Error"
                                   Icon="@Icons.Material.Filled.Delete"
                                           aria-label="change password" />

                        }
                    </MudToolBar>
                </MudHidden>
                <MudSpacer />
                <PageSpecificChat />
                <MudHidden Breakpoint="Breakpoint.Sm" Invert=true>

                    <MudMenu Class="align-self-end" StartIcon="@Icons.Material.Filled.Settings">
                        @if ((User.Enabled && User.CanDisable) || (User.Disabled && User.CanEnable))
                        {
                            <MudMenuItem>
                                <MudSwitch Color=Color.Success Label="Account Enabled" @bind-Checked=@(User.Enabled) Disabled=@((User.Disabled && !User.CanEnable)||(User.Enabled && !User.CanDisable)) />

                            </MudMenuItem>
                        }
                        @if (User.CanEdit)
                        {
                            <MudMenuItem OnClick="ToggleEditMode">Edit...</MudMenuItem>
                        }
                        @if (User.LockedOut && User.CanUnlock)
                        {
                            <MudMenuItem OnClick="Unlock">Unlock...</MudMenuItem>
                        }
                        @if (User.CanAssign)
                        {
                            RefreshUserGroups();
                            <MudMenuItem OnClick="@(()=>{AssignToModal?.Show();})">Assign To...</MudMenuItem>
                        }
                        @if (User.CanDisable)
                        {
                            <MudMenuItem OnClick="@(()=>{ChangePasswordModal?.Show();})">Change Password...</MudMenuItem>
                        }
                        @if (User.CanRename)
                        {
                            <MudMenuItem OnClick="@(()=>{RenameModal?.Show();})">Rename...</MudMenuItem>
                            @if (User.ThumbnailPhoto == null)
                            {
                                <MudMenuItem OnClick="@(()=>{UploadThumbnailModal?.Show();})">Upload Photo...</MudMenuItem>

                            }
                            else
                            {
                                <MudMenuItem OnClick="@(()=>{UploadThumbnailModal?.Show();})">Replace Photo...</MudMenuItem>

                            }

                        }
                        @if (User.CanMove)
                        {
                            <MudMenuItem OnClick="@(()=>{MoveToModal?.Show();})">Move To...</MudMenuItem>
                        }
                        @if (User.CanDelete)
                        {
                            <MudMenuItem OnClick="@DeleteUser">Delete...</MudMenuItem>
                        }
                    </MudMenu>
                </MudHidden>
            </MudStack>




        </SetSubHeader>
    }
    <CascadingValue Value="EditMode">
        <CascadingValue Value="User">
            <FlexContainer>

                <AppModal Color="Color.Dark" Title="Upload Thumbnail..." @ref=@UploadThumbnailModal>
                    <UploadThumbnailModalContent ModelChanged=@(()=>{
                                                 InvokeAsync(StateHasChanged);
                                                 }) DirectoryModel="User" />
                </AppModal>
                <AppModal Color="Color.Dark" Title="Assign To..." @ref=@AssignToModal>
                    <AssignToModalContent ModelChanged=@(()=>{
                                          InvokeAsync(StateHasChanged);
                                          }) DirectoryModel="User" />
                </AppModal>
                <AppModal Color="Color.Dark" Title="Move To" @ref=@MoveToModal>
                    @if (MoveToModal?.IsShown == true)
                    {
                        <MoveToOUModalContent ModelChanged=@(()=>{InvokeAsync(StateHasChanged);}) DirectoryModel="User" />
                    }
                </AppModal>
                <AppModal Title="Rename User" @ref=@RenameModal>
                    @if (RenameModal?.IsShown == true)
                    {
                        <RenameUserModalContent DirectoryModelRenamed=@((renamedUser)=>{Renamed(renamedUser);}) User="User" />
                    }
                </AppModal>
                <AppModal @ref=@ChangePasswordModal>
                    @if (ChangePasswordModal?.IsShown == true)
                    {
                        <ChangeUserPasswordModalContent User="User" />
                    }
                </AppModal>

                @if (User.CanReadField(ActiveDirectoryFields.GivenName) ||
                User.CanReadField(ActiveDirectoryFields.MiddleName) ||
                User.CanReadField(ActiveDirectoryFields.SN) ||
                User.CanReadField(ActiveDirectoryFields.DisplayName)
                )
                {

                    <MudGrid>
                        <MudItem xs="12" md="3">
                            <Section FullWidth=false>

                                <MudCard Elevation="2"
                                     Style="width:fit-content;height:fit-content"
                                     Class="relative mx-auto my-auto d-block p-1"
                                     @onmouseenter=@(()=>{showRemoveThumbnail=true;})
                                     @onmouseleave=@(()=>{showRemoveThumbnail=false;})>
                                    @if (User?.ThumbnailPhoto != null)
                                    {
                                        <Base64Image Style="max-height:150px;max-width:150px;" Data="User.ThumbnailPhoto.ReizeRawImage(150)" />
                                        @if (showRemoveThumbnail)
                                        {

                                            <MudIconButton OnClick=RemoveThumbnail
                                               Style="position:absolute !important;width:40px;height:40px;padding:2px;top:10px;left:10px"
                                               Color=Color.Error
                                               Icon="@Icons.Material.Filled.Delete" />
                                        }

                                    }
                                    else
                                    {
                                        <MudIcon Style="height:150px;width:150px;" Icon="@Icons.Material.Filled.Person" />

                                    }
                                    @if (showRemoveThumbnail)
                                    {
                                        <MudIconButton OnClick=@(()=>{UploadThumbnailModal?.Show();})
                                               Style="position:absolute !important;width:40px;height:40px;padding:2px;top:10px;right:10px"
                                               Color=Color.Primary
                                               Icon="@Icons.Material.Filled.Upload" />
                                    }
                                </MudCard>

                                <MudStack Row=true>
                                    <MudText Typo="Typo.subtitle2">Created:</MudText>
                                    <MudSpacer />
                                    <MudTooltip Text="@User.Created?.TimeOfDay.ToString()">
                                        <MudText Style="text-align:end;" Typo="Typo.caption">@User.Created?.ToShortDateString()</MudText>
                                    </MudTooltip>
                                </MudStack>
                                <MudStack Row=true>

                                    <MudText Typo="Typo.subtitle2">Last Change:</MudText>
                                    <MudSpacer />
                                    <MudTooltip Text="@User.LastChanged?.TimeOfDay.ToString()">

                                        <MudText Style="text-align:end;" Typo="Typo.caption">@User.LastChanged?.ToShortDateString()</MudText>
                                    </MudTooltip>
                                </MudStack>
                                @if (User.LockedOut)
                                {
                                    <MudStack Row=true>
                                        <MudText Typo="Typo.subtitle2">Locked Out Time:</MudText>
                                        <MudSpacer />
                                        <MudTooltip Text="@User.LockoutTime?.TimeOfDay.ToString()">

                                            <MudText Style="text-align:end;" Typo="Typo.caption">@User.LockoutTime?.ToShortDateString()</MudText>
                                        </MudTooltip>

                                    </MudStack>
                                }
                                <MudStack Row=true>
                                    <MudText Typo="Typo.subtitle2">OU:</MudText>
                                    <MudSpacer />

                                    <MudText Style="text-align:end;" Typo="Typo.caption">@User.OU.ToPrettyOu()</MudText>
                                </MudStack>



                                @if (User.CanReadField(ActiveDirectoryFields.MemberOf))
                                {
                                    <MudStack>
                                        <MudText Typo="Typo.subtitle2">Groups</MudText>

                                        <MudList Dense=true Clickable="true" Style="max-height:200px; overflow-y:auto;">
                                            @foreach (ADGroup g in User.MemberOf.Where(group => group.CanRead).OrderBy(g=>g.CanonicalName))
                                            {
                                                if (g.CanRead)
                                                {
                                                    <MudListItem>
                                                        <ChildContent>
                                                            <MudStack Row=true>
                                                            <MudLink OnClick="@(()=>{Nav.NavigateTo(g.SearchUri);})">@g.CanonicalName</MudLink>
                                                            <MudSpacer/>
                                                                <MudIconButton OnClick="@(()=>{User.UnassignFrom(g);})" Class="align-end align-middle" Color=Color.Error Icon="@Icons.Material.Filled.Close" />
                                                            </MudStack>
                                                        </ChildContent>
                                                    </MudListItem>

                                                }

                                            }
                                            @if (User.MemberOf.Where(group => !group.CanRead).Count() > 0)
                                            {
                                                <MudListItem Text="The user is in more groups you don't have access to" />
                                            }

                                        </MudList>
                                    </MudStack>



                                }


                            </Section>
                        </MudItem>
                        <MudItem xs=12 md="9">
                            <MudStack>

                                <Section FullWidth=false Title=@UserLocalization["Name"]>


                                    <MudStack Row Class="@_fieldMudStackClasses">

                                    @if (User.CanReadField(ActiveDirectoryFields.GivenName))
                                        {

                                            <DynamicMudInput T=string Label="@UserLocalization["First Name"]" @bind-Value="@User.GivenName" Disabled=!User.NewEntry />
                                        }
                                        @if (User.CanReadField(ActiveDirectoryFields.MiddleName))
                                        {
                                            <DynamicMudInput T=string Label="@UserLocalization["Middle Name"]" @bind-Value="@User.MiddleName" Disabled=!User.NewEntry />
                                        }
                                        @if (User.CanReadField(ActiveDirectoryFields.SN))
                                        {
                                            <DynamicMudInput T=string Label="@UserLocalization["Last Name"]" @bind-Value="@User.Surname" Disabled=!User.NewEntry />
                                        }
                                        @if (User.CanReadField(ActiveDirectoryFields.DisplayName))
                                        {
                                            <DynamicMudInput T=string Label="@UserLocalization["Display Name"]" @bind-Value="@User.DisplayName" Disabled=!User.NewEntry />
                                        }


                                    </MudStack>
                                    @if (EditMode && !User.NewEntry)
                                    {
                                        <MudText>
                                            To Modify the user's name click the Gear button and choose "Rename..."
                                        </MudText>
                                    }
                                </Section>






                                @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName) ||
                               User.CanReadField(ActiveDirectoryFields.Mail) ||
                               User.CanReadField(ActiveDirectoryFields.AccountExpires))
                                {
                                    <Section Title="@UserLocalization["Account"]">

                                        <MudStack Row Class="@_fieldMudStackClasses">


                                        @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName))
                                            {


                                                <DynamicMudInput T=string Label="@UserLocalization["Username"]"
                                                     @bind-Value="@User.SamAccountName"
                                                     Disabled=!User.NewEntry />
                                                <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@(()=>{CopyToClipboard(User.SamAccountName);})" />


                                            }

                                            @if (User.NewEntry)
                                            {
                                                <DynamicMudInput T=string
                                                     Label="@UserLocalization["Password"]"
                                                     @bind-Value="@Password"
                                                     InputType="InputType.Password" />

                                                <DynamicMudInput T=string
                                                     Label="@UserLocalization["Confirm Password"]"
                                                     @bind-Value="@ConfirmPassword"
                                                     InputType="InputType.Password" />
                                            }

                                            @if (User.CanReadField(ActiveDirectoryFields.Mail))
                                            {
                                                <DynamicMudInput T=string Label="@UserLocalization["Email Address"]"
                                                     @bind-Value="@User.Email"
                                                     Disabled=!User.NewEntry />

                                                <MudButton StartIcon="@Icons.Material.Filled.ContentCopy"
                                               OnClick="@(()=>{CopyToClipboard(User.Email);})" />

                                            }
                                            @if (User.CanReadField(ActiveDirectoryFields.AccountExpires))
                                            {
                                                <DynamicMudInput T=DateTime?
                                                                      Clearable
                                                     Label="@UserLocalization["Account Expiration"]"
                                                     @bind-Value="@User.ExpireTime"
                                                     Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.AccountExpires)) />


                                            }
                                        </MudStack>
                                        @if (EditMode && !User.NewEntry)
                                        {


                                            <MudText>
                                                To Modify the user's accounts click the Gear button and choose "Rename..."
                                            </MudText>

                                        }

                                    </Section>
                                }


                            </MudStack>

                        </MudItem>
                    </MudGrid>
                }






                @if (User.CanReadField(ActiveDirectoryFields.EmployeeId) ||
                User.CanReadField(ActiveDirectoryFields.Department) ||
                User.CanReadField(ActiveDirectoryFields.Company) ||
                User.CanReadField(ActiveDirectoryFields.Title) ||
                User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice)
                )
                {
                    <Section Title=@UserLocalization["Organization"]>
                        <MudStack Row Class="@_fieldMudStackClasses">

                        @if (User.CanReadField(ActiveDirectoryFields.Description))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Description"]" @bind-Value="@User.Description" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Description)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.EmployeeId))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Employee Id"]" @bind-Value="@User.EmployeeId" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.EmployeeId)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.Department))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Department"]" @bind-Value="@User.Department" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Department)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.Company))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Company"]" @bind-Value="@User.Company" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Company)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.Title))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Job Title"]" @bind-Value="@User.Title" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Title)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Office"]" @bind-Value="@User.PhysicalDeliveryOfficeName" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PhysicalDeliveryOffice)) />



                            }
                        </MudStack>
                    </Section>
                }

                @if (User.CanReadField(ActiveDirectoryFields.HomePhone) ||
                User.CanReadField(ActiveDirectoryFields.StreetAddress) ||
                User.CanReadField(ActiveDirectoryFields.POBox) ||
                User.CanReadField(ActiveDirectoryFields.City) ||
                User.CanReadField(ActiveDirectoryFields.State) ||
                User.CanReadField(ActiveDirectoryFields.PostalCode)
                )
                {
                    <Section Title=@UserLocalization["Contact Info"]>
                        <MudStack Row Class="@_fieldMudStackClasses">

                        @if (User.CanReadField(ActiveDirectoryFields.HomePhone))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Home Phone"]" @bind-Value="@User.HomePhone" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomePhone)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.StreetAddress))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Street Address"]" @bind-Value="@User.StreetAddress" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.StreetAddress)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.POBox))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["PO Box"]" @bind-Value="@User.POBox" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.POBox)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.City))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["City"]" @bind-Value="@User.City" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.City)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.State))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["State"]" @bind-Value="@User.State" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.State)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.PostalCode))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Zip Code"]" @bind-Value="@User.Zip" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PostalCode)) />



                            }
                        </MudStack>

                    </Section>
                }


                @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory) ||
                User.CanReadField(ActiveDirectoryFields.HomeDrive) ||
                User.CanReadField(ActiveDirectoryFields.ScriptPath) ||
                User.CanReadField(ActiveDirectoryFields.ProfilePath)
                )
                {
                    <Section Title=@UserLocalization["Profile"]>
                        <MudStack Row Class="@_fieldMudStackClasses">

                        @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Home Directory"]"
                                         @bind-Value="@User.HomeDirectory"
                                         Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDirectory)) />

                                <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@(()=>{CopyToClipboard(User.HomeDirectory);})" />






                            }
                            @if (User.CanReadField(ActiveDirectoryFields.HomeDrive))
                            {


                                <HomeDriveSelect Label="@UserLocalization["Home Drive"]" @bind-Value="@User.HomeDrive" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDrive)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.ScriptPath))
                            {


                                <DynamicMudInput T=string Label="@UserLocalization["Script Path"]" @bind-Value="@User.ScriptPath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ScriptPath)) />



                            }
                            @if (User.CanReadField(ActiveDirectoryFields.ProfilePath))
                            {

                                <DynamicMudInput T=string Label="@UserLocalization["Profile Path"]" @bind-Value="@User.ProfilePath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ProfilePath)) />



                            }
                        </MudStack>

                    </Section>
                }






            </FlexContainer>
        </CascadingValue>
    </CascadingValue>

</EditForm>
@if (User.HasUnsavedChanges && !User.NewEntry)
{
    <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
}
<MudOverlay Visible="LoadingData" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>





@code {
    #nullable disable warnings
    SetSubHeader? subHeader;
    string Password;
    string ConfirmPassword;

    bool showRemoveThumbnail = false;
    bool showUploadThumbnail = false;



    protected override void OnInitialized()
    {
        base.OnInitialized();
        User.OnModelChanged += RefreshUserViews;
        User.OnDirectoryModelRenamed += Renamed;
    }

    void RefreshUserViews()
    {
        subHeader?.Refresh();
        InvokeAsync(StateHasChanged);
    }


    bool IsPasswordValid
    {
        get
        {

            if (Password != null && Password != "")
                return Password == ConfirmPassword;
            return false;
        }
    }


    DateTime? SetExpireTime(DateTime? time)
    {
        DateTime? expireTime = null;
        if (time != null && time != DateTime.MinValue)
            expireTime = time.Value.AddDays(1);
        return expireTime;
    }


    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            SavingChanges = true;
            try
            {
                var changes = User.Changes;
                await User.CommitChangesAsync();
                await AuditLogger.User.Changed(User, changes);
                EditMode = false;
                SnackBarService.Success("The changes made to this user have been saved.", "Changes Saved");
            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message, "Save Failed");

            }
            SavingChanges = false;

            await InvokeAsync(StateHasChanged);

        }

    }
    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            User.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + User.DisplayName + "?", "Unlock User"))
        {
            User.LockedOut = false;
            SnackBarService.Warning(User.DisplayName + " will be unlocked when changes are saved.", "Unlock Pending");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteUser()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + User.DisplayName + "?", "Delete User"))
        {
            try
            {
                User.Delete();
                SnackBarService.Success(User.DisplayName + " has been deleted.", "User Deleted");
                //User = null;
                Nav.NavigateTo("/users/search");
            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }

            await InvokeAsync(StateHasChanged);
        }
    }
    async Task RemoveThumbnail()
    {
        //if (await MessageService.Confirm("Are you sure you want to delete the thumbnail photo for " + User.DisplayName + "?", "Delete Thumbnail"))
        // {
        User.ThumbnailPhoto = null;
        SnackBarService.Warning(User.DisplayName + " will have their thumbnail deleted on save.", "Thumbnail Deletion Pending");
        await InvokeAsync(StateHasChanged);
        // }
    }

    void Renamed(IDirectoryEntryAdapter renamedUser)
    {
        if (renamedUser is IADUser user)
        {
            Nav.NavigateTo(user.SearchUri);
        }

    }
}
