@inherits DirectoryModelComponent
@{
    string _fieldMudStackClasses = "flex-wrap gap-10";
}
@if (User?.NewEntry == true)
{
    EditMode = true;

}

<AppPageTitle>@User?.SamAccountName</AppPageTitle>
<EditForm OnValidSubmit=SaveChanges Model="User">
    @if (User?.NewEntry == false)
    {
        <SetSubHeader @ref="subHeader">

            <MudStack Row Class="mud-width-full">

            <MudStack Row>
                @{
                        var displayNameTooltipText = "";
                        if (!User.NewEntry)
                        {
                            displayNameTooltipText = $"Password Last Set: {User.PasswordLastSet} \r\n Created: {User.Created}\r\n Last Changed: {User.LastChanged}";

                        }

                    }
                    <MudTooltip Placement="Placement.Bottom" Text=@displayNameTooltipText>

                        @User.DisplayName
                    </MudTooltip>


                    <small TextWeight="TextWeight.Light">@DirectoryTools.PrettifyOu(User.OU) </small>

                </MudStack>


                @if (User.LockedOut)
                {
                    <MudIcon Icon=@("fa-lock")>Account Locked</MudIcon>
                }
                <MudSpacer />
                <MudMenu Class="align-self-end" StartIcon="@Icons.Material.Filled.Settings">

                    <MudMenuItem>
                        <MudSwitch Color=Color.Success Label="Account Enabled" @bind-Checked=@(User.Enabled) Disabled=@((User.Disabled && !User.CanEnable)||(User.Enabled && !User.CanDisable)) />

                    </MudMenuItem>

                    @if (User.CanEdit)
                    {
                        <MudMenuItem OnClick="ToggleEditMode">Edit...</MudMenuItem>
                    }
                    @if (User.LockedOut && User.CanUnlock)
                    {
                        <MudMenuItem OnClick="Unlock">Unlock...</MudMenuItem>
                    }
                    @if (User.CanAssign)
                    {
                        RefreshUserGroups();
                        <MudMenuItem OnClick="@(()=>{AssignToModal?.Show();})">Assign To...</MudMenuItem>
                    }
                    @if (User.CanDisable)
                    {
                        <MudMenuItem OnClick="@(()=>{ChangePasswordModal?.Show();})">Change Password...</MudMenuItem>
                    }
                    @if (User.CanRename)
                    {
                        <MudMenuItem OnClick="@(()=>{RenameModal?.Show();})">Rename...</MudMenuItem>
                        @if (User.ThumbnailPhoto == null)
                        {
                            <MudMenuItem OnClick="@(()=>{UploadThumbnailModal?.Show();})">Upload Photo...</MudMenuItem>

                        }
                        else
                        {
                            <MudMenuItem OnClick="@(()=>{UploadThumbnailModal?.Show();})">Replace Photo...</MudMenuItem>

                        }

                    }
                    @if (User.CanMove)
                    {
                        <MudMenuItem OnClick="@(()=>{MoveToModal?.Show();})">Move To...</MudMenuItem>
                    }
                    @if (User.CanDelete)
                    {
                        <MudMenuItem OnClick="@DeleteUser">Delete...</MudMenuItem>
                    }
                </MudMenu>
            </MudStack>




        </SetSubHeader>
    }


    <MudElement Class="d-flex flex-wrap gap-4">

        <AppModal Color="Color.Dark" Title="Upload Thumbnail..." @ref=@UploadThumbnailModal>
            <UploadThumbnailModalContent ModelChanged=@(()=>{InvokeAsync(StateHasChanged);}) DirectoryModel="User" />
        </AppModal>
        <AppModal Color="Color.Dark" Title="Assign To..." @ref=@AssignToModal>
            <AssignToModalContent ModelChanged=@(()=>{InvokeAsync(StateHasChanged);}) DirectoryModel="User" />
        </AppModal>
        <AppModal Color="Color.Dark" Title="Move To" @ref=@MoveToModal>
            @if (MoveToModal?.IsShown == true)
            {
                <MoveToOUModalContent ModelChanged=@(()=>{Nav.NavigateTo(Nav.Uri,true);}) DirectoryModel="User" />
            }
        </AppModal>
        <AppModal Title="Rename User" @ref=@RenameModal>
            @if (RenameModal?.IsShown == true)
            {
                <RenameUserModalContent DirectoryModelRenamed=@((renamedUser)=>{Renamed(renamedUser);}) User="User" />
            }
        </AppModal>
        <AppModal Title="Change Password" @ref=@ChangePasswordModal>
            @if (ChangePasswordModal?.IsShown == true)
            {
                <ChangeUserPasswordModalContent User="User" />
            }
        </AppModal>

        @if (User.CanReadField(ActiveDirectoryFields.GivenName) ||
        User.CanReadField(ActiveDirectoryFields.MiddleName) ||
        User.CanReadField(ActiveDirectoryFields.SN) ||
        User.CanReadField(ActiveDirectoryFields.DisplayName)
        )
        {
            <MudGrid>
                <MudItem xs="12" md="3">
                    <Section FullWidth=false>

                        <MudElement Style="width:fit-content;height:fit-content" Class="mx-auto my-auto d-block">
                            @if (User?.ThumbnailPhoto != null)
                            {
                                <Base64Image Style="max-height:150px;max-width:150px;" Data="User.ThumbnailPhoto.ReizeRawImage(150)" />
                            }
                            else
                            {
                                <MudIcon Style="height:150px;width:150px;" Icon="@Icons.Material.Filled.Person"/>
                            }
                        </MudElement>
                        <MudButton OnClick=RemoveThumbnail
                               Style="position:absolute !important;width:20px;height:20px;padding:2px;top:-10px;left:-10px"
                               Color=Color.Error
                               StartIcon="@Icons.Material.Filled.Delete" />

                    </Section>
                </MudItem>
                <MudItem xs=12 md="9">
                    <Section FullWidth=false Title=@UserLocalization["Name"]>


                        <MudStack Row Class="@_fieldMudStackClasses">

                        @if (User.CanReadField(ActiveDirectoryFields.GivenName))
                            {
                                <MudTextField Label="@UserLocalization["First Name"]" @bind-Value="@User.GivenName" Disabled=!User.NewEntry />
                            }
                            @if (User.CanReadField(ActiveDirectoryFields.MiddleName))
                            {
                                <MudTextField Label="@UserLocalization["Middle Name"]" @bind-Value="@User.MiddleName" Disabled=!User.NewEntry />
                            }
                            @if (User.CanReadField(ActiveDirectoryFields.SN))
                            {
                                <MudTextField Label="@UserLocalization["Last Name"]" @bind-Value="@User.Surname" Disabled=!User.NewEntry />
                            }
                            @if (User.CanReadField(ActiveDirectoryFields.DisplayName))
                            {
                                <MudTextField Label="@UserLocalization["Display Name"]" @bind-Value="@User.DisplayName" Disabled=!User.NewEntry />
                            }


                        </MudStack>
                        @if (EditMode && !User.NewEntry)
                        {
                            <MudText>
                                To Modify the user's name click the Gear button and choose "Rename..."
                            </MudText>
                        }
                    </Section>
                </MudItem>
            </MudGrid>
        }



        @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName) ||
        User.CanReadField(ActiveDirectoryFields.Mail) ||
        User.CanReadField(ActiveDirectoryFields.AccountExpires))
        {
            <Section Title="@UserLocalization["Account"]">

                <MudStack Row Class="@_fieldMudStackClasses">

                @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName))
                    {


                        <MudTextField Label="@UserLocalization["Username"]"
                              @bind-Value="@User.SamAccountName"
                              Disabled=!User.NewEntry />
                        <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@(()=>{CopyToClipboard(User.SamAccountName);})" />


                    }

                    @if (User.NewEntry)
                    {
                        <MudTextField Label="@UserLocalization["Password"]" @bind-Value="@Password" InputType="InputType.Password" />
                        <MudTextField Label="@UserLocalization["Confirm Password"]" @bind-Value="@ConfirmPassword" InputType="InputType.Password" />
                    }

                    @if (User.CanReadField(ActiveDirectoryFields.Mail))
                    {
                        <MudTextField Label="@UserLocalization["Email Address"]"
                              @bind-Value="@User.Email"
                              Disabled=!User.NewEntry />
                        <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@(()=>{CopyToClipboard(User.Email);})" />

                    }
                    @if (User.CanReadField(ActiveDirectoryFields.AccountExpires))
                    {
                        <MudDatePicker Label="@UserLocalization["Account Expiration"]" Date="@User.ExpireTime" DateChanged=SetExpireTime Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.AccountExpires)) />
                    }
                </MudStack>
                @if (EditMode && !User.NewEntry)
                {


                    <MudText>
                        To Modify the user's accounts click the Gear button and choose "Rename..."
                    </MudText>

                }

            </Section>
        }


        @if (User.CanReadField(ActiveDirectoryFields.EmployeeId) ||
        User.CanReadField(ActiveDirectoryFields.Department) ||
        User.CanReadField(ActiveDirectoryFields.Company) ||
        User.CanReadField(ActiveDirectoryFields.Title) ||
        User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice)
        )
        {
            <Section Title=@UserLocalization["Organization"]>
                <MudStack Row Class="@_fieldMudStackClasses">

                @if (User.CanReadField(ActiveDirectoryFields.Description))
                    {


                        <MudTextField Label="@UserLocalization["Description"]" @bind-Value="@User.Description" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Description)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.EmployeeId))
                    {


                        <MudTextField Label="@UserLocalization["Employee Id"]" @bind-Value="@User.EmployeeId" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.EmployeeId)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.Department))
                    {


                        <MudTextField Label="@UserLocalization["Department"]" @bind-Value="@User.Department" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Department)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.Company))
                    {


                        <MudTextField Label="@UserLocalization["Company"]" @bind-Value="@User.Company" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Company)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.Title))
                    {


                        <MudTextField Label="@UserLocalization["Job Title"]" @bind-Value="@User.Title" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Title)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice))
                    {


                        <MudTextField Label="@UserLocalization["Office"]" @bind-Value="@User.PhysicalDeliveryOfficeName" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PhysicalDeliveryOffice)) />



                    }
                </MudStack>
            </Section>
        }

        @if (User.CanReadField(ActiveDirectoryFields.HomePhone) ||
        User.CanReadField(ActiveDirectoryFields.StreetAddress) ||
        User.CanReadField(ActiveDirectoryFields.Street) ||
        User.CanReadField(ActiveDirectoryFields.City) ||
        User.CanReadField(ActiveDirectoryFields.State) ||
        User.CanReadField(ActiveDirectoryFields.PostalCode)
        )
        {
            <Section Title=@UserLocalization["Contact Info"]>
                <MudStack Row Class="@_fieldMudStackClasses">

                @if (User.CanReadField(ActiveDirectoryFields.HomePhone))
                    {


                        <MudTextField Label="@UserLocalization["Home Phone"]" @bind-Value="@User.HomePhone" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomePhone)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.StreetAddress))
                    {


                        <MudTextField Label="@UserLocalization["Street Address"]" @bind-Value="@User.StreetAddress" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.StreetAddress)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.Street))
                    {


                        <MudTextField Label="@UserLocalization["Street"]" @bind-Value="@User.Street" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Street)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.City))
                    {


                        <MudTextField Label="@UserLocalization["City"]" @bind-Value="@User.City" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.City)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.State))
                    {


                        <MudTextField Label="@UserLocalization["State"]" @bind-Value="@User.State" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.State)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.PostalCode))
                    {


                        <MudTextField Label="@UserLocalization["Zip Code"]" @bind-Value="@User.Zip" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PostalCode)) />



                    }
                </MudStack>

            </Section>
        }


        @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory) ||
        User.CanReadField(ActiveDirectoryFields.HomeDrive) ||
        User.CanReadField(ActiveDirectoryFields.ScriptPath) ||
        User.CanReadField(ActiveDirectoryFields.ProfilePath)
        )
        {
            <Section Title=@UserLocalization["Profile"]>
                <MudStack Row Class="@_fieldMudStackClasses">

                @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory))
                    {


                        <MudTextField Label="@UserLocalization["Home Directory"]"
                              @bind-Value="@User.HomeDirectory"
                              Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDirectory)) />

                        <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@(()=>{CopyToClipboard(User.HomeDirectory);})" />






                    }
                    @if (User.CanReadField(ActiveDirectoryFields.HomeDrive))
                    {


                        <HomeDriveSelect Label="@UserLocalization["Home Drive"]" @bind-SelectedValue="@User.HomeDrive" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDrive)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.ScriptPath))
                    {


                        <MudTextField Label="@UserLocalization["Script Path"]" @bind-Value="@User.ScriptPath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ScriptPath)) />



                    }
                    @if (User.CanReadField(ActiveDirectoryFields.ProfilePath))
                    {

                        <MudTextField Label="@UserLocalization["Profile Path"]" @bind-Value="@User.ProfilePath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ProfilePath)) />



                    }
                </MudStack>

            </Section>
        }




        @if (User.CanReadField(ActiveDirectoryFields.MemberOf))
        {


            <MudStack Row>
            @if (User.IsAGroupMember)
                {
                    var deniedRead = false;
                    <MudStack>

                        @foreach (ADGroup g in User.MemberOf.Where(group => group.CanRead))
                        {
                            if (g.CanRead)
                            {
                                <BLAZAM.Server.Shared.UI.Groups.AssignedGroup Group=g Member="User" OnGroupMembershipChange="@((change)=>{InvokeAsync(StateHasChanged);})" />

                            }
                            else
                            {
                                deniedRead = true;
                            }
                        }
                    </MudStack>

                    if (deniedRead)
                    {
                        <MudText>
                            The user is in more groups you don't have access to
                        </MudText>
                    }

                }

            </MudStack>


        }

    </MudElement>



</EditForm>
@if (User.HasUnsavedChanges && !User.NewEntry)
{
    <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
}
<MudOverlay Visible="LoadingData" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>





@code {
#nullable disable warnings
    SetSubHeader? subHeader;
    string Password;
    string ConfirmPassword;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        User.OnModelChanged += RefreshHeader;
        User.OnDirectoryModelRenamed += Renamed;
    }

    void RefreshHeader()
    {
        subHeader?.Refresh();
    }
    /*
    void ValidatePassword(ValidatorEventArgs e)
    {

        e.Status = !IsPasswordValid
            ? ValidationStatus.Error
        : ValidationStatus.Success;

    }
    */

    bool IsPasswordValid
    {
        get
        {

            if (Password != null && Password != "")
                return Password == ConfirmPassword;
            return false;
        }
    }
    /*
    protected async Task RefreshUserGroups()
        {
        await Task.Run(() =>
            {
                if (User != null)
                memberOfGroups = User.MemberOf;

            LoadingData = false;

            InvokeAsync(StateHasChanged);

    });
    }
    */
    void SetExpireTime(DateTime? time)
    {
        if (time != null && time != DateTime.MinValue)
            User.ExpireTime = time.Value.AddDays(1);
        else
            User.ExpireTime = null;
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            SavingChanges = true;
            try
            {
                var changes = User.Changes;
                await User.CommitChangesAsync();
                await AuditLogger.User.Changed(User, changes);
                EditMode = false;
                SnackBarService.Success("The changes made to this user have been saved.", "Changes Saved");
            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message, "Save Failed");

            }
            SavingChanges = false;

            await InvokeAsync(StateHasChanged);

        }

    }
    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            User.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + User.DisplayName + "?", "Unlock User"))
        {
            User.LockedOut = false;
            SnackBarService.Warning(User.DisplayName + " will be unlocked when changes are saved.", "Unlock Pending");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteUser()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + User.DisplayName + "?", "Delete User"))
        {
            try
            {
                User.Delete();
                SnackBarService.Success(User.DisplayName + " has been deleted.", "User Deleted");
                //User = null;
                Nav.NavigateTo("/users/search");
            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }

            await InvokeAsync(StateHasChanged);
        }
    }
    async Task RemoveThumbnail()
    {
        if (await MessageService.Confirm("Are you sure you want to delete the thumbnail photo for " + User.DisplayName + "?", "Delete Thumbnail"))
        {
            User.ThumbnailPhoto = null;
            SnackBarService.Warning(User.DisplayName + " will have their thumbnail deleted on save.", "Thumbnail Deletion Pending");
            await InvokeAsync(StateHasChanged);
        }
    }

    void Renamed(IDirectoryEntryAdapter renamedUser)
    {
        if (renamedUser is IADUser user)
        {
            Nav.NavigateTo(user.SearchUri);
        }

    }
}
