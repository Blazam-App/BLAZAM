@inherits DirectoryModelComponent
@if (User?.NewEntry == true)
{
    EditMode = true;

}

<AppPageTitle>@User?.SamAccountName</AppPageTitle>
<LoadingIndicator Height="Height.Is100" Visible=LoadingData>

    <div Padding="Padding.Is3" Margin="Margin.Is5.OnFullHD.OnX.Is3.OnWidescreen.OnX.Is0">
        <EditForm Model="User">
            @if (User?.NewEntry == false)
            {
                <SetSubHeader @ref="subHeader">

                    <Row>

                        <Row>
                            @{
                                var displayNameTooltipText = "";
                                if (!User.NewEntry)
                                {
                                    displayNameTooltipText = $"Password Last Set: {User.PasswordLastSet} \r\n Created: {User.Created}\r\n Last Changed: {User.LastChanged}";

                                }

                            }
                            <MudTooltip Placement="Placement.Bottom" Text=@displayNameTooltipText>

                                @User.DisplayName
                            </MudTooltip>


                            <Small TextWeight="TextWeight.Light">@DirectoryTools.PrettifyOu(User.OU) </Small>

                        </Row>


                        @if (User.LockedOut)
                        {
                            <Icon Name=@("fa-lock")>Account Locked</Icon>
                        }

                        <MudMenu StartIcon="@Icons.Material.Filled.Settings">

                            <MudMenuItem>
                                <MudSwitch Label="Account Enabled" @bind-Checked=@(User.Enabled) Disabled=@((User.Disabled && !User.CanEnable)||(User.Enabled && !User.CanDisable)) />

                            </MudMenuItem>

                            @if (User.CanEdit)
                            {
                                <MudMenuItem Clicked="ToggleEditMode">Edit...</MudMenuItem>
                            }
                            @if (User.LockedOut && User.CanUnlock)
                            {
                                <MudMenuItem Clicked="Unlock">Unlock...</MudMenuItem>
                            }
                            @if (User.CanAssign)
                            {
                                RefreshUserGroups();
                                <MudMenuItem Clicked="@(()=>{AssignToModal?.Show();})">Assign To...</MudMenuItem>
                            }
                            @if (User.CanDisable)
                            {
                                <MudMenuItem Clicked="@(()=>{ChangePasswordModal?.Show();})">Change Password...</MudMenuItem>
                            }
                            @if (User.CanRename)
                            {
                                <MudMenuItem Clicked="@(()=>{RenameModal?.Show();})">Rename...</MudMenuItem>
                                @if (User.ThumbnailPhoto == null)
                                {
                                    <MudMenuItem Clicked="@(()=>{UploadThumbnailModal?.Show();})">Upload Photo...</MudMenuItem>

                                }
                                else
                                {
                                    <MudMenuItem Clicked="@(()=>{UploadThumbnailModal?.Show();})">Replace Photo...</MudMenuItem>

                                }

                            }
                            @if (User.CanMove)
                            {
                                <MudMenuItem Clicked="@(()=>{MoveToModal?.Show();})">Move To...</MudMenuItem>
                            }
                            @if (User.CanDelete)
                            {
                                <MudMenuItem Clicked="@DeleteUser">Delete...</MudMenuItem>
                            }
                        </MudMenu>
                    </Row>




                </SetSubHeader>
            }


            <Row>

                <AppModal TextColor="Color.Dark" Title="Upload Thumbnail..." @ref=@UploadThumbnailModal>
                    <UploadThumbnailModalContent ModelChanged=@(()=>{InvokeAsync(StateHasChanged);}) DirectoryModel="User" />
                </AppModal>
                <AppModal TextColor="Color.Dark" Title="Assign To..." @ref=@AssignToModal>
                    <AssignToModalContent ModelChanged=@(()=>{InvokeAsync(StateHasChanged);}) DirectoryModel="User" />
                </AppModal>
                <AppModal TextColor="Color.Dark" Title="Move To" @ref=@MoveToModal>
                    @if (MoveToModal?.IsShown == true)
                    {
                        <MoveToOUModalContent ModelChanged=@(()=>{Nav.NavigateTo(Nav.Uri,true);}) DirectoryModel="User" />
                    }
                </AppModal>
                <AppModal Title="Rename User" @ref=@RenameModal>
                    @if (RenameModal?.IsShown == true)
                    {
                        <RenameUserModalContent DirectoryModelRenamed=@((renamedUser)=>{Renamed(renamedUser);}) User="User" />
                    }
                </AppModal>
                <AppModal Title="Change Password" @ref=@ChangePasswordModal>
                    @if (ChangePasswordModal?.IsShown == true)
                    {
                        <ChangeUserPasswordModalContent User="User" />
                    }
                </AppModal>

                @if (User.CanReadField(ActiveDirectoryFields.GivenName) ||
                User.CanReadField(ActiveDirectoryFields.MiddleName) ||
                User.CanReadField(ActiveDirectoryFields.SN) ||
                User.CanReadField(ActiveDirectoryFields.DisplayName)
                )
                {
                    <Section Title=@UserLocalization["Name"]>
                        <Row Width="Width.Is100" Padding="Padding.Is0">

                            @if (User?.ThumbnailPhoto != null)
                            {
                                <Column Padding="Padding.Is0" Display=Display.InlineFlex ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnWidescreen.Is3.OnDesktop.Is4.OnTablet.Is12.OnMobile">
                                    <div Position=Position.Relative Display=Display.Block Margin=Margin.IsAuto Style="width:fit-content;height:fit-content" Padding=Padding.Is0>
                                        <Figure Style="width:fit-content;height:fit-content" Margin=Margin.IsAuto TextAlignment=TextAlignment.Center Padding=Padding.Is0 Overflow=Overflow.Hidden Border="Border.Rounded">
                                            <Base64Image Data="User.ThumbnailPhoto.ReizeRawImage(150)" />
                                        </Figure>
                                        <Icon Clicked=RemoveThumbnail Border=Border.RoundedCircle Background=Background.Dark Display=Display.Block Position=Position.Absolute style="width:20px;height:20px;padding:2px;top:-10px;left:-10px" TextColor=Color.Error Name="@("fa-solid fa-times")" />
                                    </div>

                                </Column>
                            }
                            <Column ColumnSize="ColumnSize.Is11.OnFullHD.Is10.OnWidescreen.Is9.OnDesktop.Is8.OnTablet.Is12.OnMobile">

                                @if (User.CanReadField(ActiveDirectoryFields.GivenName))
                                {
                                    <MudField>

                                        <MudTextField Label="@UserLocalization["First Name"]" @bind-Value="@User.GivenName" Disabled=!User.NewEntry />


                                    </MudField>
                                }
                                @if (User.CanReadField(ActiveDirectoryFields.MiddleName))
                                {
                                    <MudField>

                                        <MudTextField Label="@UserLocalization["Middle Name"]" @bind-Value="@User.MiddleName" Disabled=!User.NewEntry />


                                    </MudField>
                                }
                                @if (User.CanReadField(ActiveDirectoryFields.SN))
                                {
                                    <MudField>

                                        <MudTextField Label="@UserLocalization["Last Name"]" @bind-Value="@User.Surname" Disabled=!User.NewEntry />


                                    </MudField>
                                }
                                @if (User.CanReadField(ActiveDirectoryFields.DisplayName))
                                {
                                    <MudField>

                                        <MudTextField Label="@UserLocalization["Display Name"]" @bind-Value="@User.DisplayName" Disabled=!User.NewEntry />


                                    </MudField>
                                }

                                @if (EditMode && !User.NewEntry)
                                {
                                    <MudField>
                                        <MudText>
                                            To Modify the user's name click the Gear button and choose "Rename..."
                                        </MudText>
                                    </MudField>
                                }
                            </Column>
                        </Row>

                    </Section>
                }



                @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName) ||
                User.CanReadField(ActiveDirectoryFields.Mail) ||
                User.CanReadField(ActiveDirectoryFields.AccountExpires))
                {
                    <Section Title="@UserLocalization["Account"]">

                        @if (User.CanReadField(ActiveDirectoryFields.SAMAccountName))
                        {
                            <MudField>

                                    <Addons>
                                        <Addon AddonType="AddonType.Body">
                                            <MudTextField Label="@UserLocalization["Username"]" @bind-Value="@User.SamAccountName" Disabled=!User.NewEntry />

                                        </Addon>
                                        <Addon AddonType="AddonType.End">
                                            <MudButton Color="Color.Primary" Clicked=@(()=>{CopyToClipboard(User.SamAccountName);})><Icon Name=@("fa-solid fa-copy") /></MudButton>

                                        </Addon>
                                    </Addons>

                            </MudField>
                        }

                        @if (User.NewEntry)
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Password"]" @bind-Value="@Password" InputType="InputType.Password">



                                    </MudTextField>


                            </MudField>
                            <Validation Validator="ValidatePassword">
                                <MudField>

                                        <MudTextField Label="@UserLocalization["Confirm Password"]" @bind-Value="@ConfirmPassword" InputType="InputType.Password">



                                        </MudTextField>

                                </MudField>
                            </Validation>
                        }

                        @if (User.CanReadField(ActiveDirectoryFields.Mail))
                        {
                            <MudField>

                                    <Addons>
                                        <Addon AddonType="AddonType.Body">
                                            <MudTextField Label="@UserLocalization["Email Address"]" @bind-Value="@User.Email" Disabled=!User.NewEntry />

                                        </Addon>
                                        <Addon AddonType="AddonType.End">
                                            <MudButton Color="Color.Primary" Clicked=@(()=>{CopyToClipboard(User.Email);})><Icon Name=@("fa-solid fa-copy") /></MudButton>

                                        </Addon>
                                    </Addons>




                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.AccountExpires))
                        {
                            <MudField>

                                    <MudDatePicker Label="@UserLocalization["Account Expiration"]" Date="@User.ExpireTime" DateChanged=SetExpireTime Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.AccountExpires)) />

                            </MudField>
                        }
                        @if (EditMode && !User.NewEntry)
                        {

                            <MudField>
                                <MudText>
                                    To Modify the user's accounts click the Gear button and choose "Rename..."
                                </MudText>
                            </MudField>
                        }

                    </Section>
                }


                @if (User.CanReadField(ActiveDirectoryFields.EmployeeId) ||
                User.CanReadField(ActiveDirectoryFields.Department) ||
                User.CanReadField(ActiveDirectoryFields.Company) ||
                User.CanReadField(ActiveDirectoryFields.Title) ||
                User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice)
                )
                {
                    <Section Title=@UserLocalization["Organization"]>
                        @if (User.CanReadField(ActiveDirectoryFields.Description))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Description"]" @bind-Value="@User.Description" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Description)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.EmployeeId))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Employee Id"]" @bind-Value="@User.EmployeeId" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.EmployeeId)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Department))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Department"]" @bind-Value="@User.Department" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Department)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Company))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Company"]" @bind-Value="@User.Company" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Company)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Title))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Job Title"]" @bind-Value="@User.Title" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Title)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.PhysicalDeliveryOffice))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Office"]" @bind-Value="@User.PhysicalDeliveryOfficeName" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PhysicalDeliveryOffice)) />


                            </MudField>
                        }
                    </Section>
                }

                @if (User.CanReadField(ActiveDirectoryFields.HomePhone) ||
                User.CanReadField(ActiveDirectoryFields.StreetAddress) ||
                User.CanReadField(ActiveDirectoryFields.Street) ||
                User.CanReadField(ActiveDirectoryFields.City) ||
                User.CanReadField(ActiveDirectoryFields.State) ||
                User.CanReadField(ActiveDirectoryFields.PostalCode)
                )
                {
                    <Section Title=@UserLocalization["Contact Info"]>

                        @if (User.CanReadField(ActiveDirectoryFields.HomePhone))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Home Phone"]" @bind-Value="@User.HomePhone" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomePhone)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.StreetAddress))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Street Address"]" @bind-Value="@User.StreetAddress" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.StreetAddress)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.Street))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Street"]" @bind-Value="@User.Street" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.Street)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.City))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["City"]" @bind-Value="@User.City" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.City)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.State))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["State"]" @bind-Value="@User.State" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.State)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.PostalCode))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Zip Code"]" @bind-Value="@User.Zip" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.PostalCode)) />


                            </MudField>
                        }
                    </Section>
                }


                @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory) ||
                User.CanReadField(ActiveDirectoryFields.HomeDrive) ||
                User.CanReadField(ActiveDirectoryFields.ScriptPath) ||
                User.CanReadField(ActiveDirectoryFields.ProfilePath)
                )
                {
                    <Section Title=@UserLocalization["Profile"]>
                        @if (User.CanReadField(ActiveDirectoryFields.HomeDirectory))
                        {
                            <MudField>

                                    <Addons>
                                        <Addon AddonType="AddonType.Body">
                                            <MudTextField Label="@UserLocalization["Home Directory"]" @bind-Value="@User.HomeDirectory" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDirectory)) />

                                        </Addon>
                                        <Addon AddonType="AddonType.End">
                                            <MudButton Color="Color.Primary" Clicked=@(()=>{CopyToClipboard(User.HomeDirectory);})><Icon Name=@("fa-solid fa-copy") /></MudButton>

                                        </Addon>
                                    </Addons>





                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.HomeDrive))
                        {
                            <MudField>

                                    <HomeDriveSelect Label="@UserLocalization["Home Drive"]" @bind-SelectedValue="@User.HomeDrive" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.HomeDrive))/>
                                    

                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.ScriptPath))
                        {
                            <MudField>

                                    <MudTextField Label="@UserLocalization["Script Path"]" @bind-Value="@User.ScriptPath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ScriptPath)) />


                            </MudField>
                        }
                        @if (User.CanReadField(ActiveDirectoryFields.ProfilePath))
                        {
                            <MudField>
                                    <MudTextField Label="@UserLocalization["Profile Path"]" @bind-Value="@User.ProfilePath" Disabled=@(!EditMode || !User.CanEditField(ActiveDirectoryFields.ProfilePath)) />


                            </MudField>
                        }
                    </Section>
                }




                @if (User.CanReadField(ActiveDirectoryFields.MemberOf))
                {

                    <MudField ColumnSize="ColumnSize.Is12" Horizontal>

                            <Row>
                                @if (User.IsAGroupMember)
                                {
                                    var deniedRead = false;
                                    @foreach (ADGroup g in User.MemberOf.Where(group => group.CanRead))
                                    {
                                        if (g.CanRead)
                                        {
                                            <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                                                <BLAZAM.Server.Shared.UI.Groups.AssignedGroup Group=g Member="User" OnGroupMembershipChange="@((change)=>{InvokeAsync(StateHasChanged);})" />
                                            </Column>
                                        }
                                        else
                                        {
                                            deniedRead = true;
                                        }
                                    }

                                    if (deniedRead)
                                    {
                                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                                            The user is in more groups you don't have access to
                                        </Column>
                                    }

                                }

                            </Row>

                    </MudField>
                }

            </Row>



        </EditForm>
    </div>
    @if (User.HasUnsavedChanges && !User.NewEntry)
    {
        <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
    }
</LoadingIndicator>





@code {
#nullable disable warnings
    SetSubHeader? subHeader;
    string Password;
    string ConfirmPassword;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        User.OnModelChanged += RefreshHeader;
        User.OnDirectoryModelRenamed += Renamed;
    }

    void RefreshHeader()
    {
        subHeader?.Refresh();
    }
    /*
    void ValidatePassword(ValidatorEventArgs e)
    {

        e.Status = !IsPasswordValid
            ? ValidationStatus.Error
        : ValidationStatus.Success;

    }
    */

    bool IsPasswordValid
    {
        get
        {

            if (Password != null && Password != "")
                return Password == ConfirmPassword;
            return false;
        }
    }
    /*
    protected async Task RefreshUserGroups()
        {
        await Task.Run(() =>
            {
                if (User != null)
                memberOfGroups = User.MemberOf;

            LoadingData = false;

            InvokeAsync(StateHasChanged);

    });
    }
    */
    void SetExpireTime(DateTime? time)
    {
        if (time != null && time != DateTime.MinValue)
            User.ExpireTime = time.Value.AddDays(1);
        else
            User.ExpireTime = null;
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            SavingChanges = true;
            try
            {
                var changes = User.Changes;
                await User.CommitChangesAsync();
                await AuditLogger.User.Changed(User, changes);
                EditMode = false;
                await NotificationService.Success("The changes made to this user have been saved.", "Changes Saved");
            }
            catch (ApplicationException ex)
            {
                await NotificationService.Error(ex.Message, "Save Failed");

            }
            SavingChanges = false;

            await InvokeAsync(StateHasChanged);

        }

    }
    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            User.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + User.DisplayName + "?", "Unlock User"))
        {
            User.LockedOut = false;
            await NotificationService.Warning(User.DisplayName + " will be unlocked when changes are saved.", "Unlock Pending");
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteUser()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + User.DisplayName + "?", "Delete User"))
        {
            try
            {
                User.Delete();
                await NotificationService.Success(User.DisplayName + " has been deleted.", "User Deleted");
                //User = null;
                Nav.NavigateTo("/users/search");
            }
            catch (ApplicationException ex)
            {
                await NotificationService.Error(ex.Message);
            }

            await InvokeAsync(StateHasChanged);
        }
    }
    async Task RemoveThumbnail()
    {
        if (await MessageService.Confirm("Are you sure you want to delete the thumbnail photo for" + User.DisplayName + "?", "Delete Thumbnail"))
        {
            User.ThumbnailPhoto = null;
            await NotificationService.Warning(User.DisplayName + " will have their thumbnail deleted on save.", "Thumbnail Deletion Pending");
            await InvokeAsync(StateHasChanged);
        }
    }

    void Renamed(IDirectoryEntryAdapter renamedUser)
    {
        if (renamedUser is IADUser user)
        {
            Nav.NavigateTo(user.SearchUri);
        }

    }
}
