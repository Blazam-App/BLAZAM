@inherits AppComponentBase
@if (sessionsErrorMessage == null)
{
    <DataGrid TItem="IRemoteSession"
          Data="@sessions"
          Responsive>
        <DataGridColumn Context="fieldContext" Field="@nameof(IRemoteSession.User)" Caption="Username">
            <DisplayTemplate>
                @fieldContext.User?.ToString()
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Context="fieldContext" Field="@nameof(IRemoteSession.ConnectionState)" Caption="State">
            <DisplayTemplate>
                @fieldContext.ConnectionState.ToString()
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Context="fieldContext" Field="@nameof(IRemoteSession.ClientIPAddress)" Caption="Remote IP">
            <DisplayTemplate>
                @fieldContext.ClientIPAddress?.ToString()
            </DisplayTemplate>
        </DataGridColumn>


        <DataGridColumn Context="fieldContext" Field="@nameof(IRemoteSession.ConnectTime)" Caption="Connected">
            <DisplayTemplate>
                @fieldContext.ConnectTime.ToString()
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Context="fieldContext" Field="@nameof(IRemoteSession.IdleTime)" Caption="Idle">
            <DisplayTemplate>
                @Math.Round((double)fieldContext.IdleTime?.TotalMinutes,0) mins
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Context="fieldContext">
            <DisplayTemplate>
                @if (fieldContext.ConnectionState.ToString() == "Active")
                {
                    <Button Color="Color.Warning" Clicked=@(()=>{DisconnectSession(fieldContext);})>Disconnect</Button>
                }
                <Button Color="Color.Danger" Clicked=@(()=>{LogoffSession(fieldContext);})>Logoff</Button>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGrid>
}
else
{
    <Div>
        @sessionsErrorMessage
    </Div>
}



@code {



    [Parameter]
    public IADComputer Computer { get; set; }






    string? sessionsErrorMessage;
    Timer t;
    List<IRemoteSession> sessions = new();
    List<IRemoteSession> Sessions
    {
        get
        {

            return sessions;



        }
        set => sessions = value;
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        t = new Timer(RefreshSessions, null, 1000, 10000);

    }
    async void LogoffSession(IRemoteSession session)
    {

        if (await MessageService.Confirm("Are you sure you want to log off " + session.User.ToString(), "Logoff User"))
        {
            session.Logoff();
            sessions.Remove(session);
        }

        await InvokeAsync(StateHasChanged);
    }
    async void DisconnectSession(IRemoteSession session)
    {
        if (await MessageService.Confirm("Are you sure you want to disconnect " + session.User.ToString(), "Disconnect User"))
        {
            session.Disconnect();

        }
        await InvokeAsync(StateHasChanged);
    }

    async void RefreshSessions(object state)
    {
        try
        {
            sessions = await Computer.GetRemoteSessionsAsync();
            sessions.ForEach(s =>
            {
                s.OnSessionDown += ((s) =>
                {
                    sessions.Remove(s);
                });
                s.OnSessionUpdated += ((s) =>
                {
                    InvokeAsync(StateHasChanged);
                });

            });
            sessionsErrorMessage = null;
        }
        catch (AuthenticationException ex)
        {
            sessionsErrorMessage = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
}