@using BLAZAM.Gui.UI.Computers
@inherits DirectoryEntryViewBase
@{
    string _fieldMudStackClasses = "flex-wrap gap-10";
}
<AppPageTitle>@Computer?.CanonicalName</AppPageTitle>

<EditForm OnValidSubmit=SaveChanges Context="editContext" Model="Computer">

    <SetSubHeader>

        <DirectoryEntryViewHeader DirectoryEntry="@Computer"
                                  OnAssignTo="@(()=>{AssignToModal?.Show();})"
                                  OnChangeThumbnail="@(()=>{UploadThumbnailModal?.Show();})"
                                  OnDelete="@DeleteComputer"
                                  OnDisable="@(async()=>{Computer.Enabled=false; await RefreshEntryComponents();})"
                                  OnEnable="@(async()=>{Computer.Enabled=true; await RefreshEntryComponents();})"
                                  OnMove="@(()=>{MoveToModal?.Show();})"
                                  OnRename="@(()=>{RenameModal?.Show();})"
                                  OnResetPassword="@(()=>{ChangePasswordModal?.Show();})"
                                  OnToggleEditMode="ToggleEditMode"
                                  OnUnlock="@Unlock" />
        <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true">

        </MudOverlay>


    </SetSubHeader>

    <CascadingValue Value="EditMode">
        <CascadingValue Value="Computer">
            <FlexContainer>


                <AppModal Color="Color.Dark" Title="Assign To..." @ref=@AssignToModal>
                    <AssignToModalContent ModelChanged=@RefreshEntryComponents DirectoryModel="Computer" />
                </AppModal>
                <AppModal Color="Color.Dark" Title="Move To" @ref=@MoveToModal>
                    @if (MoveToModal?.IsShown == true)
                    {
                        <MoveToOUModalContent ModelChanged=@RefreshEntryComponents DirectoryModel="Computer" />
                    }
                </AppModal>
                   <AppModal Title="Rename Computer" @ref=@RenameModal>
                @if (RenameModal?.IsShown == true)
                {
                <RenameComputerModalContent DirectoryModelRenamed=@((renamedUser)=>{Renamed(renamedUser);}) Computer="Computer" />
                }
                </AppModal>
           





                <Section Title=@AppLocalization["Info"]>
                    <MudStack Row Class="@_fieldMudStackClasses">
                        <DynamicMudInput T=string Label="@AppLocalization["Name"]" @bind-Value="@Computer.CanonicalName" Disabled=@true />
                        <DynamicMudInput T=string Label="@AppLocalization["Operating System"]" @bind-Value="@Computer.OperatingSystem" Disabled=@true />

                    </MudStack>

                    </Section>

                    <Section Title=@AppLocalization["Live Stats"]>
                    <MudStack Row Class="@_fieldMudStackClasses">
                        <LiveChart  SeriesName="CPU Usage" Title="Live CPU Usage" History="30" PollFunc="@(()=>{return Computer.Processor;})"/>
                        <LiveChart SeriesName="Memory Usage" Title="Live RAM Usage" History="30" PollFunc="@(()=>{return Computer.MemoryUsedPercent;})"/>
                            <ComputerServices Computer="Computer"/>
                    </MudStack>

                    </Section>

                    <Section Title=@AppLocalization["Drive Details"]>
                    <MudStack Row Class="@_fieldMudStackClasses">
                        @if (drives != null && drives.Count > 0)
                        {
                            <MudDataGrid Elevation=0 Items="drives">
                                <Columns>
                                    <PropertyColumn Property="x=>x.DriveType" />
                                    <PropertyColumn Property="x=>x.Letter" />
                                    <TemplateColumn Title="Used">
                                        <CellTemplate>
                                            @(context.Item.PercentUsed.Round(0).ToString() + "%")
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn Title="Capacity">
                                        <CellTemplate>
                                            @(context.Item.Capacity.Round(0).ToString() + "GB")
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <PropertyColumn Property="x=>x.FileSystem" />
                                    <PropertyColumn Property="x=>x.Serial" />
                                </Columns>
                            </MudDataGrid>

                        }

                    </MudStack>
                </Section>






                <Section Title=@AppLocalization["Sessions"]>
                    <MudStack Row Class="@_fieldMudStackClasses">
                        <ComputerSessions Computer="Computer" />

                    </MudStack>

                    </Section>


                    @if (Computer.CanReadAnyCustomFields)
                {
                    <Section Title="Additional Field">
                        @if (CustomFields != null)
                        {
                            @foreach (var field in CustomFields)
                            {
                                @if (Computer.CanReadField(field))
                                {
                                    <CustomDirectoryField Disabled=@(!EditMode || !Computer.CanEditField(ActiveDirectoryFields.ProfilePath)) Entry="Computer" Field="@field" />

                                }
                            }
                        }

                    </Section>
                }




            </FlexContainer>
        </CascadingValue>
    </CascadingValue>

</EditForm>
@if (Computer.HasUnsavedChanges && !Computer.NewEntry)
{
    <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
}
<MudOverlay Visible="SavingChanges" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>









@code {
    List<IADComputerDrive> drives = new();
    IADComputer? Computer => DirectoryEntry as IADComputer;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        if (Computer != null)
        {
            Task.Run(async () =>
            {
                drives = await Computer.GetDrivesAsync();

                await RefreshEntryComponents();

            });
            Task.Run( () =>
            {
                var services =  Computer.Services;

                 RefreshEntryComponents();

            });




            Computer.OnOnlineChanged += ((online) =>
            {
                RefreshEntryComponents();
            });



        }
        LoadingData = false;
        await RefreshEntryComponents();
    }


    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + Computer.CanonicalName + "?", "Unlock Computer"))
        {
            Computer.LockedOut = false;
        }

    }
    protected override async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            Computer.DiscardChanges();
            EditMode = false;
            await RefreshEntryComponents();

        }
    
    }
    async Task DeleteComputer()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Computer.CanonicalName + "?", "Delete Computer"))
        {
            try
            {
                Computer.Delete();
                SnackBarService.Success(Computer.CanonicalName + " has been deleted.", "Computer Deleted");

                Nav.NavigateTo("/users/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await RefreshEntryComponents();
        }
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            await Computer.CommitChangesAsync();
            EditMode = false;
            SnackBarService.Success("The changes made to this computer have been saved.", "Changes Saved");
            await RefreshEntryComponents();

        }
    }
}
