@inherits DirectoryEntryViewBase

<AppPageTitle>@Computer?.CanonicalName</AppPageTitle>



    <EditForm Context="editContext" Model="Computer">

        <SetSubHeader>

            <DirectoryEntryViewHeader DirectoryEntry="@Computer"
                                      OnAssignTo="@(()=>{AssignToModal?.Show();})"
                                      OnChangeThumbnail="@(()=>{UploadThumbnailModal?.Show();})"
                                      OnDelete="@DeleteComputer"
                                      OnDisable="@(async()=>{Computer.Enabled=false; await RefreshEntryComponents();})"
                                      OnEnable="@(async()=>{Computer.Enabled=true; await RefreshEntryComponents();})"
                                      OnMove="@(()=>{MoveToModal?.Show();})"
                                      OnRename="@(()=>{RenameModal?.Show();})"
                                      OnResetPassword="@(()=>{ChangePasswordModal?.Show();})"
                                      OnToggleEditMode="ToggleEditMode"
                                      OnUnlock="@Unlock" />
            <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true">

            </MudOverlay>


        </SetSubHeader>

        <MudCard>

           

            <MudCardHeader>
            @Computer.CanonicalName
            </MudCardHeader>
           <MudCardContent>
                    @if (drives != null && drives.Count > 0)
            {
                <MudDataGrid Items="drives">
                    <Columns>
                        <PropertyColumn Property="x=>x.DriveType"/>
                        <PropertyColumn Property="x=>x.Letter"/>
                            <TemplateColumn>
                                <CellTemplate>
                                    @(context.Item.PercentUsed.Round(0).ToString()+"%")
                                </CellTemplate>
                            </TemplateColumn>
                        <PropertyColumn Property="x=>x.Capacity.Round(0)"/>
                        <PropertyColumn Property="x=>x.FileSystem"/>
                        <PropertyColumn Property="x=>x.Serial"/>
                    </Columns>
                </MudDataGrid>

            }
               
                <ComputerSessions Computer="Computer" />
            </MudCardContent>


           
        </MudCard>


        @if (Computer.HasUnsavedChanges)
        {
            <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
        }



    </EditForm>







@code {

    List<IADComputerDrive> drives=new();
    IADComputer Computer => DirectoryEntry as IADComputer;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        if (Computer != null)
        {
            Task.Run(async () =>
            {
                drives = await Computer.GetDrivesAsync();
                if (drives == null)
                    drives = new();
                await RefreshEntryComponents();

            });




            Computer.OnOnlineChanged += ((online) =>
            {
                RefreshEntryComponents();
            });



        }
        LoadingData = false;
        await RefreshEntryComponents();
    }


    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + Computer.CanonicalName + "?", "Unlock Computer"))
        {
            Computer.LockedOut = false;
        }

    }

    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            Computer.DiscardChanges();
            EditMode = false;
            await RefreshEntryComponents();

        }

    }
    async Task DeleteComputer()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Computer.CanonicalName + "?", "Delete Computer"))
        {
            try
            {
                Computer.Delete();
                SnackBarService.Success(Computer.CanonicalName + " has been deleted.", "Computer Deleted");

                Nav.NavigateTo("/users/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await RefreshEntryComponents();
        }
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            await Computer.CommitChangesAsync();
            EditMode = false;
            SnackBarService.Success("The changes made to this computer have been saved.", "Changes Saved");
            await RefreshEntryComponents();

        }
    }
}
