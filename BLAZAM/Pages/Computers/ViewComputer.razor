@inherits DirectoryModelComponent
<AppPageTitle>@Computer?.CanonicalName</AppPageTitle>

<LoadingIndicator Height="Height.Is100" Visible=LoadingData>


    <EditForm Model="Computer">

        <SetSubHeader>
            <Bar Mode="BarMode.Horizontal"
                 CollapseMode="BarCollapseMode.Small"
                 Breakpoint="Breakpoint.Desktop"
                 NavigationBreakpoint="Breakpoint.Tablet"
                 ThemeContrast="ThemeContrast.Dark"
                 Padding="Padding.Is2.OnX"
                 Background="Background.Dark"
                 
                 VerticalAlignment="VerticalAlignment.Middle">
                <BarBrand Width=Width.Is100>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is10.OnTablet.Is8">

                            <Row>
                                <Column ColumnSize="ColumnSize.Is4.OnTablet">
                                    @Computer.CanonicalName


                                </Column>
                                <Column ColumnSize="ColumnSize.Is8.OnTablet">
                                    <small TextWeight="TextWeight.Light">@DirectoryTools.PrettifyOu(Computer.OU) </small>

                                </Column>
                            </Row>
                        </Column>

                        <Column ColumnSize="ColumnSize.Is1.OnTablet.Is2">

                            @switch (Computer.Online)
                            {
                                case true:
                                    <MudTooltip Text="Online">
                                        <MudIcon Color="Color.Success" Name=@("fa-solid fa-circle-up") />
                                    </MudTooltip>
                                    break;
                                case false:
                                    <MudTooltip Text="Offline">
                                        <MudIcon Color="Color.Error" Name=@("fa-solid fa-circle-down") />
                                    </MudTooltip>
                                    break;
                                case null:
                                    <MudTooltip Text="Checking">
                                        <MudIcon Color="Color.Warning" Name=@("fa-solid fa-circle-question") />
                                    </MudTooltip>
                                    break;
                            }
                            @if (Computer.LockedOut)
                            {
                                <MudIcon Icon=@("fa-lock")>Account Locked</MudIcon>
                            }
                        </Column>
                        <Column Float=Float.End ColumnSize="ColumnSize.Is1.OnTablet.Is2">

                            <Dropdown>
                                <DropdownToggle Color="Color.Primary">
                                    <MudIcon Icon=@("fa-gear") />
                                </DropdownToggle>
                                <DropdownMenu>
                                    <MudMenuItem>
                                        <MudSwitch Label="Account Enabled" @bind-Checked=@(Computer.Enabled) Disabled=@((Computer.Disabled && !Computer.CanEnable)||(Computer.Enabled && !Computer.CanDisable))/>

                                    </MudMenuItem>
                                    <DropdownDivider />
                                    @if (Computer.CanEdit)
                                    {
                                        <MudMenuItem OnClick="ToggleEditMode">Edit...</MudMenuItem>
                                    }
                                    @if (Computer.LockedOut && Computer.CanUnlock)
                                    {
                                        <MudMenuItem OnClick="Unlock">Unlock...</MudMenuItem>
                                    }
                                    @if (Computer.CanAssign)
                                    {
                                        RefreshComputerGroups();
                                        <MudMenuItem OnClick="@(()=>{AssignToModal?.Show();})">Assign To...</MudMenuItem>
                                    }
                                    @if (Computer.CanDisable)
                                    {
                                        <MudMenuItem OnClick="@(()=>{ChangePasswordModal?.Show();})">Change Password...</MudMenuItem>
                                    }
                                    @if (Computer.CanRename)
                                    {
                                        <MudMenuItem OnClick="@(()=>{RenameModal?.Show();})">Rename...</MudMenuItem>

                                    }
                                    @if (Computer.CanMove)
                                    {
                                        <MudMenuItem OnClick="@(()=>{MoveToModal?.Show();})">Move To...</MudMenuItem>
                                    }
                                    @if (Computer.CanDelete)
                                    {
                                        <MudMenuItem OnClick="@DeleteComputer">Delete...</MudMenuItem>
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </Column>
                    </Row>


                </BarBrand>

            </Bar>

        </SetSubHeader>

        <MudCard Shadow="Shadow.Default">

           

            <MudCardHeader>
                @Computer.SamAccountName
            </MudCardHeader>
            <MudCardBody>
                <LoadingIndicator Visible=@(drives==null)>
                    @if (drives != null && drives.Count > 0)
                    {
@*
                        <DataGrid TItem="IADComputerDrive"
                              Data="drives"
                                Responsive>
                        <DataGridColumn Field="@nameof(IADComputerDrive.Description)" Caption="Drive Type" />
                        <DataGridColumn Field="@nameof(IADComputerDrive.Letter)" Caption="Drive Letter" />
                        <DataGridColumn Context="fieldContext" Field="@nameof(IADComputerDrive.UsedSpace)" Caption="Space Used">
                            <DisplayTemplate>
                                @Math.Round(fieldContext.UsedSpace,0) GB / @Math.Round(fieldContext.Capacity,0) GB
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn Context="fieldContext" Field="@nameof(IADComputerDrive.PercentUsed)" Caption="Percent Full">
                            <DisplayTemplate>
                                @{
                                        var bg = Color.Success;
                                        switch (fieldContext.PercentUsed)
                                        {
                                            case > 85:
                                                bg = Color.Error;
                                                break;
                                            case > 75:
                                                bg = Color.Warning;
                                                break;

                                        }
                                        var percentString = (int)fieldContext.PercentUsed + "%";
                                    }
                                    <MudTooltip Text="@percentString">
                                        <Progress Color=bg Value="(int)fieldContext.PercentUsed">
                                            @percentString
                                        </Progress>
                                    </MudTooltip>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(IADComputerDrive.FileSystem)" Caption="File System" />
                            <DataGridColumn Field="@nameof(IADComputerDrive.Serial)" Caption="Serial" />


                        </DataGrid>*@
                    }

                </LoadingIndicator>
                <ComputerSessions Computer="Computer" />



            </MudCardBody>
        </MudCard>


        @if (Computer.HasUnsavedChanges)
        {
            <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
        }



    </EditForm>


</LoadingIndicator>





@code {

    List<IADComputerDrive> drives;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Computer != null)
        {

            drives = await Computer.GetDrivesAsync();
            if (drives == null)
                drives = new();
            await InvokeAsync(StateHasChanged);



            Computer.OnOnlineChanged += ((online) =>
            {
                InvokeAsync(StateHasChanged);
            });



            await AuditLogger.Computer.Searched(Computer);
        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }


    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + Computer.CanonicalName + "?", "Unlock Computer"))
        {
            Computer.LockedOut = false;
        }

    }

    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            Computer.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteComputer()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Computer.CanonicalName + "?", "Delete Computer"))
        {
            try
            {
                Computer.Delete();
                SnackBarService.Success(Computer.CanonicalName + " has been deleted.", "Computer Deleted");

                Computer = null;
                Nav.NavigateTo("/users/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await InvokeAsync(StateHasChanged);
        }
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            await Computer.CommitChangesAsync();
            EditMode = false;
            SnackBarService.Success("The changes made to this computer have been saved.", "Changes Saved");
            await InvokeAsync(StateHasChanged);

        }
    }
}
