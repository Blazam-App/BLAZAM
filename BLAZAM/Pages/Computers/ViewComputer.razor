@inherits DirectoryEntryViewBase

<AppPageTitle>@Computer?.CanonicalName</AppPageTitle>



    <EditForm Model="Computer">

        <SetSubHeader>

            <DirectoryEntryViewHeader DirectoryEntry="@Computer"
                                      OnAssignTo="@(()=>{AssignToModal?.Show();})"
                                      OnChangeThumbnail="@(()=>{UploadThumbnailModal?.Show();})"
                                      OnDelete="@DeleteComputer"
                                      OnDisable="@(async()=>{Computer.Enabled=false; await RefreshEntryComponents();})"
                                      OnEnable="@(async()=>{Computer.Enabled=true; await RefreshEntryComponents();})"
                                      OnMove="@(()=>{MoveToModal?.Show();})"
                                      OnRename="@(()=>{RenameModal?.Show();})"
                                      OnResetPassword="@(()=>{ChangePasswordModal?.Show();})"
                                      OnToggleEditMode="ToggleEditMode"
                                      OnUnlock="@Unlock" />
            <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true">

            </MudOverlay>


        </SetSubHeader>

        <MudCard>

           

            <MudCardHeader>
                @Computer.SamAccountName
            </MudCardHeader>
           
                    @if (drives != null && drives.Count > 0)
                    {
@*
                        <DataGrid TItem="IADComputerDrive"
                              Data="drives"
                                Responsive>
                        <DataGridColumn Field="@nameof(IADComputerDrive.Description)" Caption="Drive Type" />
                        <DataGridColumn Field="@nameof(IADComputerDrive.Letter)" Caption="Drive Letter" />
                        <DataGridColumn Context="fieldContext" Field="@nameof(IADComputerDrive.UsedSpace)" Caption="Space Used">
                            <DisplayTemplate>
                                @Math.Round(fieldContext.UsedSpace,0) GB / @Math.Round(fieldContext.Capacity,0) GB
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn Context="fieldContext" Field="@nameof(IADComputerDrive.PercentUsed)" Caption="Percent Full">
                            <DisplayTemplate>
                                @{
                                        var bg = Color.Success;
                                        switch (fieldContext.PercentUsed)
                                        {
                                            case > 85:
                                                bg = Color.Error;
                                                break;
                                            case > 75:
                                                bg = Color.Warning;
                                                break;

                                        }
                                        var percentString = (int)fieldContext.PercentUsed + "%";
                                    }
                                    <MudTooltip Text="@percentString">
                                        <Progress Color=bg Value="(int)fieldContext.PercentUsed">
                                            @percentString
                                        </Progress>
                                    </MudTooltip>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(IADComputerDrive.FileSystem)" Caption="File System" />
                            <DataGridColumn Field="@nameof(IADComputerDrive.Serial)" Caption="Serial" />


                        </DataGrid>*@
                    }

               
                <ComputerSessions Computer="Computer" />



           
        </MudCard>


        @if (Computer.HasUnsavedChanges)
        {
            <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
        }



    </EditForm>







@code {

    List<IADComputerDrive> drives;
    IADComputer Computer => DirectoryEntry as IADComputer;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Computer != null)
        {

            drives = await Computer.GetDrivesAsync();
            if (drives == null)
                drives = new();
            await RefreshEntryComponents();



            Computer.OnOnlineChanged += ((online) =>
            {
                RefreshEntryComponents();
            });



        }
        LoadingData = false;
        await RefreshEntryComponents();
    }


    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + Computer.CanonicalName + "?", "Unlock Computer"))
        {
            Computer.LockedOut = false;
        }

    }

    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            Computer.DiscardChanges();
            EditMode = false;
            await RefreshEntryComponents();

        }

    }
    async Task DeleteComputer()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Computer.CanonicalName + "?", "Delete Computer"))
        {
            try
            {
                Computer.Delete();
                SnackBarService.Success(Computer.CanonicalName + " has been deleted.", "Computer Deleted");

                Nav.NavigateTo("/users/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await RefreshEntryComponents();
        }
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            await Computer.CommitChangesAsync();
            EditMode = false;
            SnackBarService.Success("The changes made to this computer have been saved.", "Changes Saved");
            await RefreshEntryComponents();

        }
    }
}
