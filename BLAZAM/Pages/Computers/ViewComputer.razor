@using BLAZAM.Gui.UI.Computers
@inherits DirectoryEntryViewBase
@{
    string _fieldMudStackClasses = "flex-wrap gap-10";
}
<AppPageTitle>@Computer?.CanonicalName</AppPageTitle>
@if (Computer != null)
{
    <EditForm OnValidSubmit=SaveChanges Context="editContext" Model="Computer">

        <SetSubHeader>

            <DirectoryEntryViewHeader EditMode="@EditMode"
                                      DirectoryEntry="@Computer"
                                      OnAssignTo="@(()=>{AssignToModal?.ShowAsync();})"
                                      OnChangeThumbnail="@(()=>{UploadThumbnailModal?.ShowAsync();})"
                                      OnDelete="@DeleteComputer"
                                      OnDisable="@(async()=>{Computer.Enabled=false; await RefreshEntryComponents();})"
                                      OnEnable="@(async()=>{Computer.Enabled=true; await RefreshEntryComponents();})"
                                      OnMove="@(()=>{MoveToModal?.ShowAsync();})"
                                      OnRename="@(()=>{RenameModal?.ShowAsync();})"
                                      OnResetPassword="@(()=>{ChangePasswordModal?.ShowAsync();})"
                                      OnToggleEditMode="ToggleEditMode"
                                      OnUnlock="@Unlock"
                                      OnShowHistory="@(()=>{ChangeHistoryModal?.ShowAsync();})" />
            <MudOverlay Visible="SavingChanges" DarkBackground="false" Absolute="true">

            </MudOverlay>


        </SetSubHeader>

        <CascadingValue Value="EditMode">
            <CascadingValue Value="Computer">
                <FlexContainer>


                    <AppModal Color="Color.Dark" Title="Assign To..." @ref=@AssignToModal>
                        <AssignToModalContent ModelChanged=@RefreshEntryComponents DirectoryModel="Computer" />
                    </AppModal>
                    <AppModal Color="Color.Dark" Title="Move To" @ref=@MoveToModal>
                        @if (MoveToModal?.IsShown == true)
                        {
                            <MoveToOUModalContent ModelChanged=@RefreshEntryComponents DirectoryModel="Computer" />
                        }
                    </AppModal>
                    <AppModal Title="Rename Computer" @ref=@RenameModal>
                        @if (RenameModal?.IsShown == true)
                        {
                            <RenameComputerModalContent DirectoryModelRenamed=@((renamedUser)=>{Renamed(renamedUser);}) Computer="Computer" />
                        }
                    </AppModal>

                    <MudGrid>
                        <MudItem xs="12" md="3">
                            <Section FullWidth=false>

                                <Section Elevation=0 Title=@AppLocalization["Info"]>
                                    <MudStack Row=true Class="@_fieldMudStackClasses">
                                        <DynamicMudInput T=string Label="@AppLocalization["Name"]" @bind-Value="@Computer.CanonicalName" Disabled=@(!EditMode) />
                                        <DynamicMudInput T=string Label="@AppLocalization["Operating System"]" @bind-Value="@Computer.OperatingSystem" Disabled=@true />
                                        <DynamicMudInput T=bool Label="@AppLocalization["Online"]" Value="@(Computer.IsOnline==true)" Disabled=@true />

                                    </MudStack>

                                </Section>

                                <Section Title=@AppLocalization["Groups"]>
                                    <MudStack Row=true Class="@_fieldMudStackClasses">
                                        <MemberOfList AssignToClicked=@(()=>{AssignToModal?.ShowAsync();}) Model="Computer" />

                                    </MudStack>

                                </Section>



                            </Section>
                        </MudItem>
                        <MudItem xs=12 md="9">
                            <MudStack>

                                <Section Title=@AppLocalization["Live Stats"]>

                                    <MudStack Row=true Class="@_fieldMudStackClasses">
                                        @if (Computer.IsOnline == true)
                                        {
                                            <ComputerResourceCharts Computer="Computer" />


                                        }
                                        else
                                        {
                                            <MudText>@AppLocalization["Computer is not reachable."]</MudText>

                                        }
                                    </MudStack>
                                </Section>


                                <Section Title=@AppLocalization["Services"]>

                                    <MudStack Row=true Class="@_fieldMudStackClasses">
                                        @if (Computer.IsOnline == true)
                                        {
                                            <ComputerServices Computer="Computer" />
                                        }
                                        else
                                        {
                                            <MudText>@AppLocalization["Computer is not reachable."]</MudText>

                                        }

                                    </MudStack>
                                </Section>
                                @if (Computer.CanReadBitLocker)
                                {
                                    <BitLockerViewer Computer="Computer"/>
                                }
                            </MudStack>

                        </MudItem>
                    </MudGrid>












                    <Section Title=@AppLocalization["Drive Details"]>
                        <MudStack Row=true Class="@_fieldMudStackClasses">
                            @if (Computer.IsOnline == true)
                            {
                                <ComputerDriveDetails Computer="Computer" />
                            }
                            else
                            {
                                <MudText>@AppLocalization["Computer is not reachable."]</MudText>

                            }

                        </MudStack>
                    </Section>






                    <Section Title=@AppLocalization["Sessions"]>

                        <MudStack Row=true Class="@_fieldMudStackClasses">
                            @if (Computer.IsOnline == true)
                            {
                                if (CurrentUser.State.IsSuperAdmin)
                                {
                                    <ComputerSessions Computer="Computer" />
                                }
                            }
                            else
                            {
                                <MudText>
                                    @AppLocalization["Computer is not reachable."]
                                </MudText>

                            }


                        </MudStack>

                    </Section>

                    <Section Title=@AppLocalization["Printers"]>

                        <MudStack Row=true Class="@_fieldMudStackClasses">
                            @if (Computer.IsOnline == true)
                            {
                                <ComputerSharedPrinters Computer="Computer" />
                            }
                            else
                            {
                                <MudText>@AppLocalization["Computer is not reachable."]</MudText>

                            }
                        </MudStack>

                    </Section>

                    @if (Computer.CanReadAnyCustomFields)
                    {
                        <Section Title=@AppLocalization["Additional Fields"]>
                            @if (CustomFields != null)
                            {
                                @foreach (var field in CustomFields)
                                {
                                    @if (Computer.CanReadField(field))
                                    {
                                        <CustomDirectoryField Disabled=@(!EditMode || !Computer.CanEditField(ActiveDirectoryFields.ProfilePath)) Entry="Computer" Field="@field" />

                                    }
                                }
                            }

                        </Section>
                    }




                </FlexContainer>
            </CascadingValue>
        </CascadingValue>

    </EditForm>
    @if (Computer.HasUnsavedChanges && !Computer.NewEntry)
    {
        <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
    }
}
<MudOverlay Visible="SavingChanges" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>









@code {
    IADComputer? Computer => DirectoryEntry as IADComputer;
    protected override async Task OnInitializedAsync()
    {
        Computer?.MonitorOnlineStatus();
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        if (Computer != null)
        {
            Computer.OnOnlineChanged += ((online) =>
            {
                RefreshEntryComponents();
            });
        }
        await AuditLogger.Searched(Computer);

        LoadingData = false;
        await RefreshEntryComponents();
    }


    async Task Unlock()
    {
        if (Computer != null && await MessageService.Confirm("Are you sure you want to unlock " + Computer?.CanonicalName + "?", "Unlock Computer"))
        {
            Computer.LockedOut = false;
        }

    }
    protected override async void DiscardChanges()
    {
        if (Computer != null && await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            Computer.DiscardChanges();
            EditMode = false;
            await RefreshEntryComponents();

        }

    }
    async Task DeleteComputer()
    {
        if (Computer != null && await MessageService.Confirm("Are you sure you want to delete " + Computer?.CanonicalName + "?", "Delete Computer"))
        {
            try
            {
                Computer.Delete();
                SnackBarService.Success(Computer.CanonicalName + " has been deleted.");
                await AuditLogger.Computer.Deleted(Computer);
                _ = OUNotificationService.PostAsync(Computer, NotificationType.Delete);

                Nav.NavigateTo("/users/search");

            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);
            }
            await RefreshEntryComponents();
        }
    }
    async void SaveChanges()
    {
        if (Computer != null && await MessageService.Confirm("Are you sure you want to save the changes?"))
        {
            SavingChanges = true;
            await RefreshEntryComponents();
            try
            {

                var changes = Computer.Changes;
                var assignTo = Computer.ToAssignTo;
                var unassignFrom = Computer.ToUnassignFrom;
                var jobResults = await Computer.CommitChangesAsync();
                if (jobResults.Result == JobResult.Passed)
                {
                    foreach (var assignment in assignTo)
                    {
                        await AuditLogger.Computer.Assigned(assignment.Member, assignment.Group);
                        await AuditLogger.Group.MemberAdded(assignment.Group, assignment.Member);
                    }

                    foreach (var assignment in unassignFrom)
                    {
                        await AuditLogger.Computer.Unassigned(assignment.Member, assignment.Group);
                        await AuditLogger.Group.MemberRemoved(assignment.Group, assignment.Member);
                    }
                    if (changes.Any(c => c.Field != ActiveDirectoryFields.MemberOf.FieldName))
                    {
                        _ = OUNotificationService.PostAsync(Computer, NotificationType.Modify);
                        await AuditLogger.User.Changed(Computer, changes.Where(c => c.Field != ActiveDirectoryFields.MemberOf.FieldName).ToList());
                    }

                    

                    EditMode = false;
                    Nav.WarnOnNavigation = false;
                    SnackBarService.Success("The changes made to this computer have been saved.");
                    await RefreshEntryComponents();
                }
                else
                {
                    await jobResults.ShowJobDetailsDialogAsync(MessageService);
                }
            }
            catch (ApplicationException ex)
            {
                SnackBarService.Error(ex.Message);

            }
            SavingChanges = false;

            await RefreshEntryComponents();

        }
    }
    public override void Dispose()
    {
        base.Dispose();
        Computer?.Dispose();
    }
}
