@inherits DirectoryModelComponent

<LoadingIndicator Height="Height.Is100" Visible=LoadingData>


    <EditForm Model="Computer">

        <SetSubHeader>
            <Bar Mode="BarMode.Horizontal"
                 CollapseMode="BarCollapseMode.Small"
                 Breakpoint="Breakpoint.Desktop"
                 NavigationBreakpoint="Breakpoint.Tablet"
                 ThemeContrast="ThemeContrast.Dark"
                 Padding="Padding.Is2.OnX"
                 Background="Background.Dark"
                 TextColor="TextColor.Light"
                 VerticalAlignment="VerticalAlignment.Middle">
                <BarBrand Width=Width.Is100>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is10.OnTablet.Is8">

                            <Row>
                                <Column ColumnSize="ColumnSize.Is4.OnTablet">
                                    @Computer.CanonicalName


                                </Column>
                                <Column ColumnSize="ColumnSize.Is8.OnTablet">
                                    <Small TextWeight="TextWeight.Light">@DirectoryTools.PrettifyOu(Computer.OU) </Small>

                                </Column>
                            </Row>
                        </Column>

                        <Column ColumnSize="ColumnSize.Is1.OnTablet.Is2">

                            @if (Computer.LockedOut)
                            {
                                <Icon Name=@("fa-lock")>Account Locked</Icon>
                            }
                        </Column>
                        <Column Float=Float.End ColumnSize="ColumnSize.Is1.OnTablet.Is2">

                            <Dropdown>
                                <DropdownToggle Color="Color.Primary">
                                    <Icon Name=@("fa-gear") />
                                </DropdownToggle>
                                <DropdownMenu>
                                    <DropdownItem>
                                        <Switch @bind-Checked=@(Computer.Enabled) Disabled=@((Computer.Disabled && !Computer.CanEnable)||(Computer.Enabled && !Computer.CanDisable))>Account Enabled</Switch>

                                    </DropdownItem>
                                    <DropdownDivider />
                                    @if (Computer.CanEdit)
                                    {
                                        <DropdownItem Clicked="ToggleEditMode">Edit...</DropdownItem>
                                    }
                                    @if (Computer.LockedOut && Computer.CanUnlock)
                                    {
                                        <DropdownItem Clicked="Unlock">Unlock...</DropdownItem>
                                    }
                                    @if (Computer.CanAssign)
                                    {
                                        RefreshComputerGroups();
                                        <DropdownItem Clicked="@(()=>{AssignToModal?.Show();})">Assign To...</DropdownItem>
                                    }
                                    @if (Computer.CanDisable)
                                    {
                                        <DropdownItem Clicked="@(()=>{ChangePasswordModal?.Show();})">Change Password...</DropdownItem>
                                    }
                                    @if (Computer.CanRename)
                                    {
                                        <DropdownItem Clicked="@(()=>{RenameModal?.Show();})">Rename...</DropdownItem>

                                    }
                                    @if (Computer.CanMove)
                                    {
                                        <DropdownItem Clicked="@(()=>{MoveToModal?.Show();})">Move To...</DropdownItem>
                                    }
                                    @if (Computer.CanDelete)
                                    {
                                        <DropdownItem Clicked="@DeleteComputer">Delete...</DropdownItem>
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </Column>
                    </Row>


                </BarBrand>

            </Bar>

        </SetSubHeader>

        <Card Shadow="Shadow.Default">

            <Check @bind-Checked="Computer.Disabled" Disabled=@((Computer.Disabled && !Computer.CanEnable)||(!Computer.Disabled && !Computer.CanDisable))>Disabled</Check>
            <Check @bind-Checked="Computer.LockedOut" Disabled=@(!Computer.LockedOut || (Computer.LockedOut && !Computer.CanUnlock))>Locked out</Check>
            <Check Checked="Computer.Online" Disabled>Online</Check>

            <CardHeader>
                @Computer.SamAccountName
            </CardHeader>
            <CardBody>
                <LoadingIndicator Visible=@(drives==null)>
                    @if (drives!=null && drives.Count > 0)
                    {

                        <DataGrid TItem="IADComputerDrive"
                              Data="drives"
                              Responsive>
                            <DataGridColumn Field="@nameof(IADComputerDrive.Description)" Caption="Drive Type" />
                            <DataGridColumn Field="@nameof(IADComputerDrive.Letter)" Caption="Drive Letter" />
                            <DataGridColumn Context="fieldContext" Field="@nameof(IADComputerDrive.UsedSpace)" Caption="Space Used">
                                <DisplayTemplate>
                                    @Math.Round(fieldContext.UsedSpace,0) GB / @Math.Round(fieldContext.Capacity,0) GB
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Context="fieldContext" Field="@nameof(IADComputerDrive.PercentUsed)" Caption="Percent Full">
                                <DisplayTemplate>
                                    @{
                                        var bg = Color.Success;
                                        switch (fieldContext.PercentUsed)
                                        {
                                            case > 85:
                                                bg = Color.Danger;
                                                break;
                                            case > 75:
                                                bg = Color.Warning;
                                                break;

                                        }
                                        var percentString = (int)fieldContext.PercentUsed + "%";
                                    }
                                    <Tooltip Text="@percentString">
                                        <Progress Color=bg Value="(int)fieldContext.PercentUsed">
                                            @percentString
                                        </Progress>
                                    </Tooltip>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(IADComputerDrive.FileSystem)" Caption="File System" />
                            <DataGridColumn Field="@nameof(IADComputerDrive.Serial)" Caption="Serial" />


                        </DataGrid>
                    }

                </LoadingIndicator>
                <ComputerSessions Computer="Computer" />



            </CardBody>
        </Card>


        @if (Computer.HasUnsavedChanges)
        {
            <UnsavedChangesPrompt SaveChanges="SaveChanges" DiscardChanges="DiscardChanges" />
        }



    </EditForm>


</LoadingIndicator>





@code {

    List<IADComputerDrive> drives;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Computer != null)
        {

            drives = await Computer.GetDrivesAsync();
            if (drives == null)
                drives = new();
            await InvokeAsync(StateHasChanged);



            Computer.OnOnlineChanged += ((online) =>
            {
                InvokeAsync(StateHasChanged);
            });



            AuditLogger.Computer.Searched(Computer);
        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }


    async Task Unlock()
    {
        if (await MessageService.Confirm("Are you sure you want to unlock " + Computer.CanonicalName + "?", "Unlock Computer"))
        {
            Computer.LockedOut = false;
        }

    }

    async void DiscardChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to discard your changes?", "Discard Changes"))
        {
            Computer.DiscardChanges();
            EditMode = false;
            await InvokeAsync(StateHasChanged);

        }

    }
    async Task DeleteComputer()
    {
        if (await MessageService.Confirm("Are you sure you want to delete " + Computer.CanonicalName + "?", "Delete Computer"))
        {
            try
            {
                Computer.Delete();
                NotificationService.Success(Computer.CanonicalName + " has been deleted.", "Computer Deleted");

                Computer = null;
                Nav.NavigateTo("/users/search");

            }
            catch (ApplicationException ex)
            {
                NotificationService.Error(ex.Message);
            }
            await InvokeAsync(StateHasChanged);
        }
    }
    async void SaveChanges()
    {
        if (await MessageService.Confirm("Are you sure you want to save the changes?", "Save Changes"))
        {
            await Computer.CommitChangesAsync();
            EditMode = false;
            NotificationService.Success("The changes made to this computer have been saved.", "Changes Saved");
            await InvokeAsync(StateHasChanged);

        }
    }
}
