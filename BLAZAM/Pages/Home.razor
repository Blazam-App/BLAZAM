@attribute [Authorize]
@inherits AppComponentBase
@page "/Home"
@using BLAZAM.Gui.UI.Dashboard
@using BLAZAM.Gui.Helper
@using BLAZAM.Gui.UI.Outputs.Jobs;
@{
    string testValue="";
    Type valueType =testValue.GetType();
}
<AppPageTitle>@AppLocalization["Home"]</AppPageTitle>

@if (MOTD.HasValue && MOTD.Value.ToString() != "")
{
    <MudAlert Class="mb-6" ShowCloseIcon=false Elevation="3">


        @MOTD.Value

    </MudAlert>
}
<CurrentUserDashboardWidgets/>

@if (ApplicationInfo.InDebugMode)
{
    <MudButton Variant="Variant.Filled" OnClick="testJob">Run Test Job</MudButton>
}

@code {
    MarkupString? MOTD;

    protected override Task OnInitializedAsync()
    {
        try
        {
            MOTD = (MarkupString)Context.AppSettings.FirstOrDefault().MOTD;
        }
        catch
        {

        }
        return base.OnInitializedAsync();
    }
    private IJob TestJob
    {
        get
        {
            IJob job = new Job("Test Job");
            IJob job2 = new Job("Nested Job");
            IJobStep step1 = new JobStep("Regular Step Passes", (step) => { Task.Delay(2000).Wait(); return true; });
            IJobStep step2 = new JobStep("Regular Step Fails", (step) => { Task.Delay(2000).Wait(); return false; });
            IJobStep step3 = new JobStep("Regular Step Throws", (step) => { Task.Delay(2000).Wait(); throw new ApplicationException("Test exception"); return false; });
            IJobStep step4 = new JobStep("Nested Step Passes", (step) => { Task.Delay(2000).Wait(); return true; });
            IJobStep step5 = new JobStep("Nested Step Fails", (step) => { Task.Delay(2000).Wait(); return false; });
            IJobStep step6 = new JobStep("Nested Step Throws", (step) => { Task.Delay(2000).Wait(); throw new ApplicationException("Test exception"); return false; });

            job.Steps.Add(step1);
            job.Steps.Add(step2);
            job.Steps.Add(step3);
            job2.Steps.Add(step4);
            job2.Steps.Add(step5);
            job2.Steps.Add(step6);
            job.Steps.Add((IJobStep)job2);
            return job;
        }
    }
    private async Task testJob()
    {
        var test = TestJob;
        test.ShowJobDetailsDialog(MessageService);
        //await MessageService.ShowMessage<JobResultDialog>(test.ToDialogParameters(), "Test Job");
        var result = await test.RunAsync();


    }

}