@attribute [Authorize]
@inherits AppComponentBase
@page "/Home"
@using BLAZAM.Server.Shared.UI.Dashboard.Widgets;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;


<AppPageTitle>Home</AppPageTitle>

@if (MOTD.HasValue && MOTD.Value.ToString()!="")
{
    <Alert Background="Background.Light" Color="Color.Dark" Visible>

    <AlertMessage>
        @MOTD.Value

    </AlertMessage>
</Alert>
}
@*
<DropContainer @ref=widgetContainer TItem="Widget" @bind-Items="widgets" ItemsFilter="@((item, dropZone) => item.Slot == dropZone)" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
    <ChildContent>
        <DropZone TItem="Widget" Name="slot1" AllowReorder Border="Border.Rounded" Background="Background.Light" Margin="Margin.Is3" Flex="Flex.Grow.Is1" />
        <DropZone TItem="Widget" Name="slot2" AllowReorder Border="Border.Rounded" Background="Background.Light" Margin="Margin.Is3" Flex="Flex.Grow.Is1" />
        <DropZone TItem="Widget" Name="slot3" AllowReorder Border="Border.Rounded" Background="Background.Light" Margin="Margin.Is3" Flex="Flex.Grow.Is1" />

    </ChildContent>
    <ItemTemplate>
        <MudCard Shadow="Shadow.Default" Margin="Margin.Is3.OnY" Background="Background.Secondary" >
            <MudCardBody>
                <DynamicComponent Type="@context.GetType()" />
                <AppCloseButton OnClick=@(()=>{RemoveWidget(context);}) Position="Position.Absolute" style="right:10px;top:15px" />
            </MudCardBody>
        </MudCard>
    </ItemTemplate>
    </DropContainer>*@










    @code {
    MarkupString? MOTD;
    //DropContainer<Widget>? widgetContainer;
    //List<Widget> widgets = new List<Widget>();
    //private Task ItemDropped(DraggableDroppedEventArgs<AppComponentBase> dropItem)
    //{
    //    return Task.CompletedTask;
    //}

    protected override Task OnInitializedAsync()
    {
        //widgets = new List<Widget>(Widgets.Available(UserStateService.CurrentUserState));
        try
        {
            MOTD = (MarkupString)Context.AppSettings.FirstOrDefault().MOTD;
        }
        catch
        {
            
        }
        return base.OnInitializedAsync();
    }

    //private Task ItemDropped(DraggableDroppedEventArgs<Widget> dropItem)
    //{
    //    dropItem.Item.Slot = dropItem.DropZoneName;
    //    return Task.CompletedTask;
    //}
    //async Task RemoveWidget(Widget widget)
    //{
    //    widgets.Remove(widget);
    //    await InvokeAsync(StateHasChanged);
    //    widgetContainer.Refresh();
    //}

}