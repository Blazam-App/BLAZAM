@attribute [Authorize]
@inherits AppComponentBase
@page "/Home"
@using BLAZAM.Server.Shared.UI.Dashboard.Widgets;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;


<AppPageTitle>Home</AppPageTitle>

@if (MOTD.HasValue && MOTD.Value.ToString() != "")
{
    <MudAlert Elevation="1">


        @MOTD.Value

    </MudAlert>
}
<MudDropContainer @ref=widgetContainer T="Widget" Items="widgets" ItemsSelector="@((item,dropzone) => item.Slot == dropzone)" ItemDropped="ItemDropped" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>

        <MudPaper Class="ma-4 flex-grow-1">
            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                <MudDropZone AllowReorder T="Widget" Identifier="slot1" Class="flex-grow-1" />
            </MudList>
        </MudPaper>
        <MudPaper Class="ma-4 flex-grow-1">
            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                <MudDropZone AllowReorder T="Widget" Identifier="slot2" Class="flex-grow-1" />
            </MudList>
        </MudPaper>
        <MudPaper Class="ma-4 flex-grow-1">
            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                <MudDropZone AllowReorder T="Widget" Identifier="slot3" Class="flex-grow-1" />
            </MudList>
        </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        <MudCard Shadow="Shadow.Default" Margin="Margin.Is3.OnY" Background="Background.Secondary">
            <DynamicComponent Type="@context.GetType()" />
            <AppCloseButton OnClick=@(()=>{RemoveWidget(context);}) Position="Position.Absolute" style="right:10px;top:15px" />
        </MudCard>
    </ItemRenderer>
</MudDropContainer>


@code {
    MarkupString? MOTD;
    MudDropContainer<Widget>? widgetContainer;
    List<Widget> widgets = new List<Widget>();


    protected override Task OnInitializedAsync()
    {
        widgets = new List<Widget>(Widgets.Available(UserStateService.CurrentUserState));
        try
        {
            MOTD = (MarkupString)Context.AppSettings.FirstOrDefault().MOTD;
        }
        catch
        {

        }
        return base.OnInitializedAsync();
    }

    private Task ItemDropped(MudItemDropInfo<Widget> dropItem)
    {
        dropItem.Item.Slot = dropItem.DropzoneIdentifier;
        return Task.CompletedTask;
    }
    async Task RemoveWidget(Widget widget)
    {
        widgets.Remove(widget);
        await InvokeAsync(StateHasChanged);

    }

}