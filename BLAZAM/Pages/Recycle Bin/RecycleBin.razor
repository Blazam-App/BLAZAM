@page "/recyclebin"
@inherits AppComponentBase
@attribute [Authorize(Roles = UserRoles.SuperAdmin)]

<AppPageTitle>Recycle Bin</AppPageTitle>

<MudDataGrid T="IDirectoryEntryAdapter"
             Virtualize=true
             ColumnResizeMode="ResizeMode.Container"
             Class=""
             Hideable=true
             @bind-SelectedItems=@selectedEntries
             Square=true
             MultiSelection=true
             Height="80vh"
             Items="@deletedObjects"
             Filterable="false"
             SortMode="@SortMode.Multiple"
             Groupable="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recycle Bin</MudText>
        <MudSpacer />
        <MudButton Color="Color.Primary" Variant="@Variant.Outlined" OnClick="@(()=>{RestoreSelected();})">Restore Selected</MudButton>

    </ToolBarContent>
    <Columns>
        <SelectColumn T="IDirectoryEntryAdapter" ShowInFooter=false ShowInHeader=true />
        <TemplateColumn Title="Type">
            <CellTemplate>
                <MudIcon Icon="@context.Item.TypeIcon()" />@context.Item.ObjectType

            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.CanonicalName" Title="Name" />
        <PropertyColumn Property="x => x.LastKnownParent" Title="Last OU" />
        <PropertyColumn Property="x => x.LastChanged" Title="Deleted" />
        <TemplateColumn CellClass="d-flex justify-end" Title="Restore">
            <CellTemplate>
                <MudStack Row=true>
                    <MudButton Color="Color.Primary" Variant="@Variant.Outlined" OnClick="@(async()=>{await Restore(context.Item);})">Restore</MudButton>

                </MudStack>
            </CellTemplate>
        </TemplateColumn>

    </Columns>
</MudDataGrid>

@code {







    HashSet<IDirectoryEntryAdapter> selectedEntries = new();



    List<IDirectoryEntryAdapter> deletedObjects = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetDeletedEntries();
    }
    async Task GetDeletedEntries()
    {


        var search = new ADSearch() { SearchRoot = Directory.GetDeleteObjectsEntry() };
        search.SearchDeleted = true;
        deletedObjects = await search.SearchAsync<DirectoryEntryAdapter, IDirectoryEntryAdapter>();

        await InvokeAsync(StateHasChanged);
    }

    //TODO stop the confimation message on batch restore
    private async void RestoreSelected()
    {
        if (await MessageService.Confirm("Are you sure you want to restore the selected entries", "Restore?"))
        {
            IJob batchRestore = new Job(AppLocalization["Restore"]);
            foreach (var entry in selectedEntries)
            {
                IJobStep restoreEntryStep = new JobStep(AppLocalization["Restore: "] + entry.CanonicalName, (step) =>
                {
                    if (RestoreEntry(entry))
                        return true;
                    return false;

                });
                batchRestore.Steps.Add(restoreEntryStep);
            }
            batchRestore.Run();
            batchRestore.ShowJobDetailsDialog(MessageService);
        }
    }
    async Task Restore(IDirectoryEntryAdapter entryToRestore)
    {
        if (entryToRestore.LastKnownParent == null) throw new ApplicationException("Tombstone item has no  LastKnownParent");
        if (await MessageService.Confirm("Are you sure you want to restore " + entryToRestore.CanonicalName + " to " + entryToRestore.LastKnownParent?.CanonicalName, "Restore?"))
        {
            if (RestoreEntry(entryToRestore))
            {
                SnackBarService.Success(entryToRestore.CanonicalName + " restored successfully");
                await GetDeletedEntries();
            }
            else
            {
                SnackBarService.Error(entryToRestore.CanonicalName + " could not be restored");

            }

        }
    }
    bool RestoreEntry(IDirectoryEntryAdapter entry)
    {
        return (entry.LastKnownParent != null && Directory.RestoreTombstone(entry, entry.LastKnownParent));
    }

}
