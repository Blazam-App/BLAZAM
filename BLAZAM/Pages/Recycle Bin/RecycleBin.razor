@page "/recyclebin"
@inherits AppComponentBase
@attribute [Authorize(Roles = UserRoles.SuperAdmin)]

<AppPageTitle>Recycle Bin</AppPageTitle>

<h3>Recycle Bin</h3>
<MudDataGrid T="IDirectoryEntryAdapter"
              Virtualize
             ColumnResizeMode="ResizeMode.Container"
              Hideable
             Items="@deletedObjects"
             Filterable="false"
             SortMode="@SortMode.Multiple"
             Groupable="false">
    <Columns>
        <PropertyColumn Property="x => x.ObjectType" />
        <PropertyColumn Property="x => x.CanonicalName" />
        <PropertyColumn Property="x => x.LastChanged" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Color="Color.Primary" Variant="@Variant.Filled" OnClick="@(()=>{Restore(context.Item);})">Restore</MudButton>

                </MudStack>
            </CellTemplate>
        </TemplateColumn>

    </Columns>
</MudDataGrid>
@*<DataGrid TItem="IDirectoryEntryAdapter"
          Data="deletedObjects"
          Responsive
     Virtualize>
        <DataGridCommandColumn />
        <DataGridColumn Field="@nameof(IDirectoryEntryAdapter.ObjectType)" Caption="Type"/>
        <DataGridColumn Field="@nameof(IDirectoryEntryAdapter.CanonicalName)" Caption="Canonical Name"/>
        <DataGridColumn Field="@nameof(IDirectoryEntryAdapter.LastChanged)" Caption="Deleted At" />
        <DataGridColumn>
            <DisplayTemplate>
            <MudButton Color="Color.Primary" OnClick="@(()=>{ Directory.RestoreTombstone(context,context.LastKnownParent); })">Restore</MudButton>

            </DisplayTemplate>


        </DataGridColumn>

    </DataGrid>
    *@



@code {
    List<IDirectoryEntryAdapter> deletedObjects = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var search = new ADSearch() { SearchRoot = Directory.GetDeleteObjectsEntry() };
        search.SearchDeleted = true;
        deletedObjects = await search.SearchAsync<DirectoryEntryAdapter, IDirectoryEntryAdapter>();

        await InvokeAsync(StateHasChanged);
    }
    async Task Restore(IDirectoryEntryAdapter entryToRestore)
    {
        if (await MessageService.Confirm("Are you sure you want to restore " + entryToRestore.CanonicalName + " to " + entryToRestore.LastKnownParent.CanonicalName, "Restore?"))
        {
            if (Directory.RestoreTombstone(entryToRestore, entryToRestore.LastKnownParent))
            {
                SnackBarService.Success(entryToRestore.CanonicalName + " restored successfully");
            }
            else
            {
                SnackBarService.Error(entryToRestore.CanonicalName + " could not be restored");

            }

        }
    }
}
