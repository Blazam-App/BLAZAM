@page "/recyclebin"
@inherits AppComponentBase
@attribute [Authorize(Roles = UserRoles.SuperAdmin)]

<AppPageTitle>Recycle Bin</AppPageTitle>

<MudDataGrid T="IDirectoryEntryAdapter"
              Virtualize
             ColumnResizeMode="ResizeMode.Container"
             Class=""
             
              Hideable
              Square
             Items="@deletedObjects"
             Filterable="false"
             SortMode="@SortMode.Multiple"
             Groupable="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recycle Bin</MudText>
        <MudSpacer />
        <MudButton Color="Color.Primary" Variant="@Variant.Outlined" OnClick="@(()=>{RestoreSelected();})">Restore Selected</MudButton>

    </ToolBarContent>
    <Columns>
        <SelectColumn T="IDirectoryEntryAdapter" ShowInFooter=false ShowInHeader=true  />
        <PropertyColumn Property="x => x.ObjectType" Title="Type"/>
        <PropertyColumn Property="x => x.CanonicalName" Title="Name"/>
        <PropertyColumn Property="x => x.LastKnownParent" Title="Last OU"/>
        <PropertyColumn Property="x => x.LastChanged" Title="Deleted"/>
        <TemplateColumn CellClass="d-flex justify-end" Title="Restore">
            <CellTemplate>
                <MudStack Row=true>
                    <MudButton Color="Color.Primary" Variant="@Variant.Outlined" OnClick="@(()=>{Restore(context.Item);})">Restore</MudButton>

                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        
    </Columns>
</MudDataGrid>

@code {
    List<IDirectoryEntryAdapter> deletedObjects = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var search = new ADSearch() { SearchRoot = Directory.GetDeleteObjectsEntry() };
        search.SearchDeleted = true;
        deletedObjects = await search.SearchAsync<DirectoryEntryAdapter, IDirectoryEntryAdapter>();

        await InvokeAsync(StateHasChanged);
    }
    async Task Restore(IDirectoryEntryAdapter entryToRestore)
    {
        if (await MessageService.Confirm("Are you sure you want to restore " + entryToRestore.CanonicalName + " to " + entryToRestore.LastKnownParent.CanonicalName, "Restore?"))
        {
            if (Directory.RestoreTombstone(entryToRestore, entryToRestore.LastKnownParent))
            {
                SnackBarService.Success(entryToRestore.CanonicalName + " restored successfully");
            }
            else
            {
                SnackBarService.Error(entryToRestore.CanonicalName + " could not be restored");

            }

        }
    }
    async Task RestoreSelected()
    {
        
    }
}
