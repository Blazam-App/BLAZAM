@using BLAZAM.Common.Models.Database.User;
@using BLAZAM.Server.Shared.UI.Themes;
@inherits AppComponentBase
@{
    var messages = UserStateService.CurrentUserState?.Messages.Count;

}
@if (messages > 0)
{
    <MudPopover Open=@NotificationsOpen TransformOrigin="Origin.TopRight" AnchorOrigin="Origin.BottomRight">
        <MudStack Row=true>
        <MudListSubheader>Notifications</MudListSubheader>
        <AppCloseButton OnClick=@(()=>{NotificationsOpen=false;}) />

    </MudStack>

    @foreach (var notification in UserStateService.CurrentUserState?.Messages)
        {

            <MudAlert OnClick=@(()=>{
              if(notification.Notification.Link!=null)
              Nav.NavigateTo(notification.Notification.Link.ToString());
              }) ShowCloseIcon=notification.Notification.Dismissable
              CloseIconClicked="@(()=>{MarkRead(notification);})">
                @if (!notification.Notification.Title.IsNullOrEmpty())
                {
                    <MudText Typo="Typo.h6">@notification.Notification.Title</MudText>
                }
                @notification.Notification.Message
            </MudAlert>
        }


    </MudPopover>
}

<MudMenu>
    <ActivatorContent>
        @{
            var avatarBgColor = GenerateAvatarColor(UserStateService.CurrentUsername);
        }
        @if (messages > 0)
        {
            <MudBadge Color=Color.Tertiary Content="UserStateService.CurrentUserState.Messages.Count">
                @if(UserStateService.CurrentUserState.UserSettings?.ProfilePicture!=null)
                {
                    <Base64Image Data="@UserStateService.CurrentUserState.UserSettings?.ProfilePicture" />
                }else{
            <MudAvatar Elevation="4" Style="@avatarBgColor">@UserStateService.CurrentUsername?.FirstOrDefault()</MudAvatar>

                }

            </MudBadge>
        }
        else
        {
           <CurrentUserAvatarIcon/>

        }

    </ActivatorContent>
    <ChildContent>

        @if (messages > 0)
        {
            <MudMenuItem OnClick="@(()=>{NotificationsOpen=!NotificationsOpen;})">Notifications</MudMenuItem>
        }

        
        <MudMenuItem OnClick="@(()=>{profileModal.Show();})" Icon="@Icons.Material.Filled.Settings">
            @AppLocalization["Profile Settings"]
        </MudMenuItem>
        @if (UserStateService.CurrentUserState?.Impersonator == null)
        {
            <MudMenuItem OnClick="@(()=>{Nav.NavigateTo("/logout",true);})" Icon="@Icons.Material.Filled.Logout">
                @AppLocalization["Sign Out"]
            </MudMenuItem>
        }
        else
        {
            <MudMenuItem OnClick="@(()=>{Nav.NavigateTo("/unimpersonate",true);})" Icon="@Icons.Material.Filled.PersonOff">

                @AppLocalization["Stop It"]
            </MudMenuItem>
        }
    </ChildContent>
</MudMenu>
<AppModal @ref=profileModal Title="Profile Settings">
    <CascadingValue Value="mainLayout">
  <BLAZAM.Server.Shared.UI.Modals.AppUserProfileModalContent />
    </CascadingValue>
</AppModal>
@code {
    AppModal? profileModal;
    /// <summary>
    /// Indicates whether the notification panel is open
    /// </summary>
    bool NotificationsOpen;
    [CascadingParameter]
    public MainLayout mainLayout { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NotificationPublisher.OnNotificationPublished += ((notifications) => { InvokeAsync(StateHasChanged); });
    }


    /// <summary>
    /// Generate a repeatable hex color based on the given username
    /// </summary>
    /// <param name="username"></param>
    /// <returns>A background-color style string</returns>
    string GenerateAvatarColor(string username)
    {
        if (username.IsNullOrEmpty()) return "background-color:#0c13a7";
        int usernameHash = username.GetAppHashCode();
        byte[] usernameHashBytes = usernameHash.ToByteArray(3);
        string hexColor = "background-color:#";
        hexColor += Convert.ToHexString(usernameHashBytes.Take(3).ToArray());
        return hexColor;
    }
    async Task MarkRead(UserNotification notification)
    {
        var inDBNotification = Context.UserNotifications.Where(n => n.Id == notification.Id).FirstOrDefault();
        
        inDBNotification.IsRead = true;
        Context.SaveChanges();
    }
}