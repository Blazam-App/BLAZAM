@inherits LayoutComponentBase
@using BLAZAM.Server.Background;
@using BLAZAM.Server.Data;
@using BLAZAM.Server.Errors.ActiveDirectory;
@using BLAZAM.Server.Errors.Database;
@using Microsoft.EntityFrameworkCore
@using System.DirectoryServices
@inject NavigationManager Nav
@inject IActiveDirectory directory
@inject IApplicationUserStateService UserStateService
@inject AppDatabaseFactory DbFactory
@inject ConnMonitor monitor
<PageTitle>@DatabaseCache.ApplicationSettings.AppAbbreviation</PageTitle>
<CascadingValue Value="this">
    <MudMudLayout>
        <AuthorizeView Context="authContext">
            <Authorized>
                <MudDrawer>
                    <MudDrawerContainer>
                        <NavMenu />
                    </MudDrawerContainer>
                </MudDrawer>

                <MudMainContent Background="Background.Light" TextColor="Color.Dark">
                    
                    <MudContainer Fixed>

                        @if (setHeader != null)
                        {
                            @setHeader.ChildContent

                        }
                        else
                        {
                            <SearchPageHeader Text="Search" />
                        }
                        @if (setSubHeader != null)
                        {
                            @setSubHeader.ChildContent

                        }
                    </MudContainer>
                    <MudContainer Style="height: 100vh;overflow: auto;">

                        @Body

                    </MudContainer>
                    <MudContainer Fixed>
                     <DirectoryConnectingIndicator/>
                        
                        <AppFooter />
                        @if (Program.InDebugMode)
                        {
                            <AuthorizeView Context="authorizedContext" Roles=@UserRoles.SuperAdmin>
                                <DevTools />
                            </AuthorizeView>
                        }
                    </MudContainer>
                </MudMainContent>
                <NotificationBroadcastListener />
            </Authorized>
            <NotAuthorized>
                    <MudMainContent Style="height: 100vh;overflow: auto;">
                        <CascadingValue Value="this">
                            @Body
                        </CascadingValue>
                    </MudMainContent>
            </NotAuthorized>
        </AuthorizeView>

    </MudMudLayout>
</CascadingValue>



@using System.Security.Claims;
@inject IJSRuntime JSRuntime
@inject IApplicationUserStateService UserStateService


@{
    if (UserStateService.CurrentUserState.User.FindFirst(ClaimTypes.Sid) != null)
    {
        JSRuntime.InvokeVoidAsync("updateCookieExpiration");

    }
}

@code {





    SetHeader? setHeader;
    public void SetHeader(SetHeader? setHeader)
    {
        this.setHeader = (setHeader);
        if (setHeader != null)

            this.setHeader.OnRefreshRequested += (() => { InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }
    SetSubHeader? setSubHeader;
    public void SetSubHeader(SetSubHeader? setSubHeader)
    {
        this.setSubHeader = (setSubHeader);
        if (setSubHeader != null)
            this.setSubHeader.OnRefreshRequested += (() => { InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }

    public void Update() => StateHasChanged();


}