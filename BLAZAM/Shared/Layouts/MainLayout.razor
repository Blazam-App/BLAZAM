@inherits LayoutComponentBase
@using BLAZAM.Server.Background;
@using BLAZAM.Server.Data;
@using BLAZAM.Server.Errors.ActiveDirectory;
@using BLAZAM.Server.Errors.Database;
@using BLAZAM.Server.Shared.UI.Themes;
@using Microsoft.EntityFrameworkCore
@using System.DirectoryServices
@inject NavigationManager Nav
@inject IActiveDirectory directory
@inject IApplicationUserStateService UserStateService
@inject AppDatabaseFactory DbFactory
@inject AppSnackBarService SnackBarService
@inject ConnMonitor monitor
@inject IStringLocalizer<AppLocalization> AppLocalization
@{
    string topMarginForContent = "";
}
<PageTitle>@DatabaseCache.ApplicationSettings.AppAbbreviation</PageTitle>
<CascadingValue Value="this">
    <MudLayout Style="min-height:98vh;">
        <AuthorizeView Context="authContext">
            <Authorized>
                <CascadingValue Value="this">
                    
                    <MainAppBar />
                </CascadingValue>

                @if (Program.InDebugMode)
                {

                    <AuthorizeView Context="authorizedContext" Roles=@UserRoles.SuperAdmin>
                        <MudDrawer Width="450px" @bind-Open=@_devDrawerOpen Anchor=Anchor.End Elevation="2" Class="mud-theme-dark">
                            <MudDrawerContainer>
                                <DevTools />
                            </MudDrawerContainer>
                        </MudDrawer>

                    </AuthorizeView>
                }


                <MudDrawer Width="185px" @bind-Open=@DrawerOpen Elevation="3" Class="mud-theme-dark">
                    <MudDrawerContainer>
                        <NavMenu />
                        <MudButton StartIcon="@Icons.Material.Filled.DeveloperMode" Color="Color.Primary"
                                   OnClick="@(()=>{_devDrawerOpen=!_devDrawerOpen;InvokeAsync(StateHasChanged);})">Dev Panel</MudButton>
                    </MudDrawerContainer>
                </MudDrawer>



                <MudMainContent Class="mud-height-full">
                    @if (setSubHeader != null)
                    {
                        <MudAppBar Color=Color.Primary Style="top:64px;" Elevation="1">
                            @setSubHeader?.ChildContent
                        </MudAppBar>
                        topMarginForContent = "margin-top:64px;";
                    }


                    <MudContainer Style="@topMarginForContent" MaxWidth="MaxWidth.Large" Class="pt-5 mud-height-full">
    

                        @Body


                    </MudContainer>
                    <MudElement>
                        <DirectoryConnectingIndicator />
                        
                        <AppFooter />

                    </MudElement>
                </MudMainContent>

                <NotificationBroadcastListener />
            </Authorized>
            <NotAuthorized>
                <MudMainContent Style="height: 100vh;overflow: auto;">
                    <CascadingValue Value="this">
                        @Body
                    </CascadingValue>
                </MudMainContent>
            </NotAuthorized>
        </AuthorizeView>

    </MudLayout>
</CascadingValue>



@using System.Security.Claims;
@inject IJSRuntime JSRuntime
@inject IApplicationUserStateService UserStateService


@{
    if (UserStateService.CurrentUserState.User.FindFirst(ClaimTypes.Sid) != null)
    {
        JSRuntime.InvokeVoidAsync("updateCookieExpiration");

    }
}

@code {



    bool _drawerOpen = true;
    bool _devDrawerOpen = false;

    public bool DrawerOpen
    {
        get => _drawerOpen; set
        {
            if (_drawerOpen == value) return;
            _drawerOpen = value;
            //TODO Add drawer open preference to user settings

            InvokeAsync(StateHasChanged);
        }
    }

    public SetHeader? setHeader;
    public void SetHeader(SetHeader? setHeader)
    {
        this.setHeader = (setHeader);
        if (setHeader != null)

            this.setHeader.OnRefreshRequested += (() => { InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }
    SetSubHeader? setSubHeader;
    public void SetSubHeader(SetSubHeader? setSubHeader)
    {
        this.setSubHeader = (setSubHeader);
        if (setSubHeader != null)
            this.setSubHeader.OnRefreshRequested += (() => { InvokeAsync(StateHasChanged); });

        //StateHasChanged();
        InvokeAsync(StateHasChanged);
        //Update();
    }

    public void Update() => StateHasChanged();

    /// <summary>
    /// Changes the current users theme, and refeshes the current page.
    /// </summary>
    /// <param name="theme"></param>
    public void SetUserTheme(ApplicationTheme theme)
    {
        try
        {
            UserStateService.CurrentUserState.UserSettings.Theme = theme.Name;
            UserStateService.CurrentUserState.SaveUserSettings();
            Nav.NavigateTo(Nav.Uri, true);
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
    }


} 