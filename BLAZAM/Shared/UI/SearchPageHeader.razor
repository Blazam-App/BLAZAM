@inherits AppComponentBase
<Form @onsubmit="(()=>{OnSubmit.InvokeAsync();})">

    <Bar Mode="BarMode.Horizontal"
         CollapseMode="BarCollapseMode.Small"
         Breakpoint="Breakpoint.Desktop"
         NavigationBreakpoint="Breakpoint.Tablet"
         ThemeContrast="ThemeContrast.Light"
         Padding="Padding.Is2.OnX"
         Background="Background.Secondary"
         TextColor="TextColor.Dark"
         VerticalAlignment="VerticalAlignment.Middle">
        <BarBrand Padding=Padding.Is0.OnY Width="Width.Is100">
            <Row Style="font-size:0.8em;">
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is2.OnFullHD.Is2.OnDesktop.Is3.OnTablet">
                    <Div TextOverflow="TextOverflow.Wrap">
                        <Div Display="Display.InlineBlock">@Text</Div>
                        <Div Display="Display.InlineBlock">
                            <DropdownList Color=Color.Primary @bind-SelectedValue=@SelectedObjectType TItem="ActiveDirectoryObjectType?" TValue=ActiveDirectoryObjectType? TextField="item=>item.ToString()" ValueField="item=>item" Data="ObjectTypes">
                                @SelectedObjectType
                            </DropdownList>
                        </Div>
                    </Div>

                </Column>
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is9.OnFullHD.Is8.OnDesktop.Is7.OnTablet">
                         <ADAutoComplete @bind-SearchObjectType=SelectedObjectType @bind-SearchTerm="@SearchTerm" @bind-SearchDisabled=@SearchDisabledObjects />


                </Column>
                <Column Style="align-self: center;" ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is2.OnTablet">
                    @if (Searcher?.SearchState == SearchState.Collecting)
                    {
                        <Button Float="Float.End" Type="ButtonType.Button" Clicked=@(()=>{
                            disableCancel = true;
                            Searcher.Cancel();
                            }) Color="Color.Primary" Disabled=@disableCancel>
                            Cancel
                        </Button>

                    }
                    else
                    {
                        <Button Float="Float.End" Type="ButtonType.Submit" Color="Color.Primary">Search</Button>

                    }

                </Column>
            </Row>
        </BarBrand>
    </Bar>

</Form>

@code {
    List<ActiveDirectoryObjectType?> ObjectTypes = new List<ActiveDirectoryObjectType?> { ActiveDirectoryObjectType.All, ActiveDirectoryObjectType.User, ActiveDirectoryObjectType.Group, ActiveDirectoryObjectType.OU, ActiveDirectoryObjectType.Computer };
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [CascadingParameter]
    public ADSearch Searcher { get; set; } = new ADSearch();

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string Text { get; set; }

    bool disableCancel = false;


      string _searchTerm;
    /// <summary>
    /// The search term that comes from the search text box
    /// </summary>
    public string? SearchTerm { get=>_searchTerm; set
        {
            if (_searchTerm == value) return;
            _searchTerm = value;
            InvokeAsync(StateHasChanged);
        }
    }

    ActiveDirectoryObjectType? _selectedObjectType;
    [Parameter]
    public ActiveDirectoryObjectType? SelectedObjectType {
        get=>_selectedObjectType;
        set{
            if(_selectedObjectType == value) return;
            _selectedObjectType = value;
            SelectedObjectTypeChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<ActiveDirectoryObjectType?> SelectedObjectTypeChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Searcher.ResultsCollected += ((batch) => { InvokeAsync(StateHasChanged); });
        Searcher.OnSearchCompleted += (() =>
        {
            disableCancel = false;

            InvokeAsync(StateHasChanged);
        });
    }


  
    bool _searchDisabledObjects;
    /// <summary>
    /// Indicates whether to search for disabled
    /// Active Diretory Entries
    /// </summary>
    public bool SearchDisabledObjects
    {
        get => _searchDisabledObjects; set
        {
            if (_searchDisabledObjects == value) return;
            _searchDisabledObjects = value;
            InvokeAsync(StateHasChanged);

        }
    }
}