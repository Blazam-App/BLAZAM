@inherits AppComponentBase
<MudForm Style="width:100%" Class="mx-2" @onsubmit="(()=>{SearchService.Search();})">



    <MudStack Row="true">
        <MudMenu Color=Color.Secondary StartIcon="@Icons.Material.Filled.TypeSpecimen" Label="@SearchService.SeachObjectType.ToString()">
            @foreach (var objectType in ObjectTypes)
            {
                <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=objectType; })>@objectType</MudMenuItem>
            }
        </MudMenu>
        <MudPaper Class=" mud-overlay-light" Style="width:100%;height:min-content;">
        <ADAutoComplete Class="mt-0"
                        Variant="Variant.Filled"
                        Label="Search Directory"
                        SearchObjectType="@SearchService.SeachObjectType"
                        SearchDisabled=@SearchService.IncludeDisabled
                        @bind-SearchTerm="@SearchService.SearchTerm" />
        </MudPaper>
        @if (UserStateService?.CurrentUserState?.IsSuperAdmin == true || UserStateService?.CurrentUserState?.DirectoryUser?.CanSearchDisabled == true)
        {
            var buttonColor = Color.Error;
            if (!SearchService.IncludeDisabled)

            {
                buttonColor = Color.Success;
            }
            <MudButton Class="d-flex" ButtonType="ButtonType.Button" OnClick=@(async()=>{
                   SearchService.IncludeDisabled= !SearchService.IncludeDisabled;
                   await InvokeAsync(StateHasChanged);
                   }) Color=buttonColor>
                Enabled Only
            </MudButton>





        }

        @if (Searcher?.SearchState == SearchState.Collecting)
        {
            <MudFab Style="min-width: 56px !important;" Class="d-flex" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Cancel" OnClick=@(()=>{
                disableCancel = true;
                Searcher.Cancel();
                }) />



        }
        else
        {
            <MudFab Style="min-width: 56px !important;" Class="d-flex" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" OnClick=@(()=>{SearchService.Search();}) />


        }



    </MudStack>


</MudForm>

@code {
    List<ActiveDirectoryObjectType> ObjectTypes = new() { ActiveDirectoryObjectType.All, ActiveDirectoryObjectType.User, ActiveDirectoryObjectType.Group, ActiveDirectoryObjectType.OU, ActiveDirectoryObjectType.Computer };


    public ADSearch Searcher { get; set; } = new ADSearch();




    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string? Text { get; set; }

    bool disableCancel = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Searcher.ResultsCollected += ((batch) => { InvokeAsync(StateHasChanged); });
        Searcher.OnSearchCompleted += (() =>
        {
            disableCancel = false;

            InvokeAsync(StateHasChanged);
        });
    }



}