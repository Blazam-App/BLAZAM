@inherits AppComponentBase
@attribute [Authorize]

<MudForm Style="width:100%" Class="mx-2" @onsubmit="(()=>{SearchService.Search();})">

    <AuthorizeView Context="authContext">

        <MudStack Row="true">

            <MudMenu Color=Color.Secondary StartIcon="@Icons.Material.Filled.TypeSpecimen" Label="@SearchService.SeachObjectType.ToString()">
                <CascadingAuthenticationState>

                    <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.All; })>@AppLocalization["All"]</MudMenuItem>
                    <AuthorizeView Roles="@(UserRoles.SearchUsers+","+UserRoles.SuperAdmin)">
                        
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.User; })>@AppLocalization["User"]</MudMenuItem>
                    </AuthorizeView>

                    <AuthorizeView Roles="@(UserRoles.SearchGroups+","+UserRoles.SuperAdmin)">
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.Group; })>@AppLocalization["Group"]</MudMenuItem>

                    </AuthorizeView>
                    <AuthorizeView Roles="@(UserRoles.SearchOUs+","+UserRoles.SuperAdmin)">
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.OU; })>@AppLocalization["OU"]</MudMenuItem>

                    </AuthorizeView>
                    <AuthorizeView Roles="@(UserRoles.SearchComputers+","+UserRoles.SuperAdmin)">
                        <MudMenuItem OnClick=@(()=>{ SearchService.SeachObjectType=ActiveDirectoryObjectType.Computer; })>@AppLocalization["Computer"]</MudMenuItem>

                    </AuthorizeView>
                </CascadingAuthenticationState>

            </MudMenu>
            <MudPaper Class=" mud-overlay-light" Style="width:100%;height:min-content;">
                <ADAutoComplete Class="mt-0"
                                Variant="Variant.Filled"
                                Label="Search Directory"
                                SearchObjectType="@SearchService.SeachObjectType"
                                SearchDisabled=@SearchService.IncludeDisabled
                                @bind-SearchTerm="@SearchService.SearchTerm" />
            </MudPaper>
            @if (CurrentUser.State?.IsSuperAdmin == true || CurrentUser.State?.DirectoryUser?.CanSearchDisabled == true)
            {
                var buttonColor = Color.Error;
                if (!SearchService.IncludeDisabled)

                {
                    buttonColor = Color.Success;
                }
                <MudButton Class="d-flex" ButtonType="ButtonType.Button" OnClick=@(async()=>{
                       SearchService.IncludeDisabled= !SearchService.IncludeDisabled;
                       await InvokeAsync(StateHasChanged);
                       }) Color=buttonColor>
                    Enabled Only
                </MudButton>





            }

            @if (Searcher?.SearchState == SearchState.Collecting)
            {
                <MudFab Style="min-width: 56px !important;" Class="d-flex" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Cancel" OnClick=@(()=>{
                    disableCancel = true;
                    Searcher.Cancel();
                    }) />



            }
            else
            {
                <MudFab Style="min-width: 56px !important;" Class="d-flex" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" OnClick=@(()=>{SearchService.Search();}) />


            }



        </MudStack>

    </AuthorizeView>
</MudForm>

@code {
    List<ActiveDirectoryObjectType> ObjectTypes = new() { ActiveDirectoryObjectType.All, ActiveDirectoryObjectType.User, ActiveDirectoryObjectType.Group, ActiveDirectoryObjectType.OU, ActiveDirectoryObjectType.Computer };


    public ADSearch Searcher { get; set; } = new ADSearch();




    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string? Text { get; set; }

    bool disableCancel = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Searcher.ResultsCollected += ((batch) => { InvokeAsync(StateHasChanged); });
        Searcher.OnSearchCompleted += (() =>
        {
            disableCancel = false;

            InvokeAsync(StateHasChanged);
        });
    }



}