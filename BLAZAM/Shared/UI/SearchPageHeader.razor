@inherits AppComponentBase
<Form @onsubmit="(()=>{SearchService.Search();})">

    <Bar Mode="BarMode.Horizontal"
         CollapseMode="BarCollapseMode.Small"
         Breakpoint="Breakpoint.Desktop"
         NavigationBreakpoint="Breakpoint.Tablet"
         ThemeContrast="ThemeContrast.Dark"
         Padding="Padding.Is2.OnX"
         Background="Background.Dark"
         TextColor="TextColor.Dark"
         VerticalAlignment="VerticalAlignment.Middle">
        <BarBrand Padding=Padding.Is0.OnY Width="Width.Is100">
            <Div Style="font-size:0.8em;align-self: center;">

                    <Addons Width="Width.Is100">
                        <Addon AddonType="AddonType.Start">
                            <DropdownList Color=Color.Primary
                                          @bind-SelectedValue=@SearchService.SeachObjectType
                                          TItem="ActiveDirectoryObjectType?"
                                          TValue=ActiveDirectoryObjectType?
                                          TextField="item=>item.ToString()"
                                          ValueField="item=>item"
                                          Data="ObjectTypes">
                            @SearchService.SeachObjectType
                            </DropdownList>
                        </Addon>
                    <Addon AddonType="AddonType.Body" >
                        <Div Style="width: 1%;flex: 1 1 auto;">
                            <ADAutoComplete SearchDisabled=@SearchService.IncludeDisabled @bind-SearchTerm="@SearchService.SearchTerm" />
                            </Div>
                        </Addon>

                        @if (UserStateService?.CurrentUserState?.IsSuperAdmin == true || UserStateService?.CurrentUserState?.DirectoryUser?.CanSearchDisabled == true)
                        {
                        var buttonColor = Color.Danger;
                        if (!SearchService.IncludeDisabled)
                        {
                            buttonColor = Color.Success;
                        }
                        <Addon AddonType="AddonType.Body">

                              
                                <Button Type="ButtonType.Button" Clicked=@(async()=>{
                                SearchService.IncludeDisabled= !SearchService.IncludeDisabled;
                                    await InvokeAsync(StateHasChanged);
                                    }) Color=buttonColor>
                                    Enabled Only
                                </Button>

                                 
                               

                            </Addon>

                        }
                        <Addon AddonType="AddonType.End">

                            @if (Searcher?.SearchState == SearchState.Collecting)
                            {
                                <Button Float="Float.End" Type="ButtonType.Button" Clicked=@(()=>{
                                    disableCancel = true;
                                    Searcher.Cancel();
                                    }) Color="Color.Primary" Disabled=@disableCancel>
                                    Cancel
                                </Button>

                            }
                            else
                            {
                                <Button Float="Float.End" Type="ButtonType.Submit" Color="Color.Primary">Search</Button>

                            }

                        </Addon>
                    </Addons>
            </Div>
        </BarBrand>
    </Bar>

</Form>

@code {
    List<ActiveDirectoryObjectType?> ObjectTypes = new List<ActiveDirectoryObjectType?> { ActiveDirectoryObjectType.All, ActiveDirectoryObjectType.User, ActiveDirectoryObjectType.Group, ActiveDirectoryObjectType.OU, ActiveDirectoryObjectType.Computer };


    public ADSearch Searcher { get; set; } = new ADSearch();




    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string Text { get; set; }

    bool disableCancel = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Searcher.ResultsCollected += ((batch) => { InvokeAsync(StateHasChanged); });
        Searcher.OnSearchCompleted += (() =>
        {
            disableCancel = false;

            InvokeAsync(StateHasChanged);
        });
    }



}