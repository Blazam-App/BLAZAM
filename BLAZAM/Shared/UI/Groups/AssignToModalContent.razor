@inherits AppModalContent


    <ADAutoComplete Label="Group Name" SearchObjectType="ActiveDirectoryObjectType.Group"
            @bind-SelectedResult=@Group/>
    
    
            <ADAutoComplete  Label="Copy Memberships From" SearchObjectType="ActiveDirectoryObjectType.All"
                        @bind-SelectedResult=@copyFrom
                        CustomResultsFilter="(result)=>result is IGroupableDirectoryAdapter" />

    
    @if (CopyFrom != null)
    {
        var existingGroups = DirectoryModel.MemberOf;
        <MudText>Will be added to...</MudText>

        foreach (var group in CopyFrom.MemberOf)
        {
            <MudCard>
                <MudCardHeader>

                    @if (existingGroups.Contains(group))
                    {
                        <MudIcon Icon=@("fa-check") />
                    }
                    else
                    {
                        <MudIcon Icon=@("fa-plus") />
                    }
                    @group.GroupName

                </MudCardHeader>
            </MudCard>
        }
    }


@code {

    #nullable disable warnings
    [Parameter]
    public EventCallback<GroupMembershipChange> OnGroupMembershipChange { get; set; }

    /// <summary>
    /// The directry entry that we are assigning
    /// </summary>
    [Parameter]
    public IGroupableDirectoryAdapter DirectoryModel { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Modal.OnYes = AssignToGroup;
        Modal.YesText = UserLocalization["Assign"];
        Modal.Title = "Assign To";
        Modal.YesEnabled = ValidateModal;
    }


    IDirectoryEntryAdapter copyFrom;
    public IGroupableDirectoryAdapter CopyFrom { get => (IGroupableDirectoryAdapter)copyFrom; set => copyFrom = value; }

    new IDirectoryEntryAdapter Group { get; set; }

    async void AssignToGroup()
    {
        if (Group is IADGroup group)
        {
            DirectoryModel.AssignTo(group);
            SnackBarService.Warning(DirectoryModel.CanonicalName + " has been assigned to " + group.GroupName + " but changes must be saved.", "Assignment Pending");
            await ModelChanged.InvokeAsync();

            Close();

        }
        if (CopyFrom != null)
        {
            foreach (var g in CopyFrom.MemberOf)
            {
                DirectoryModel.AssignTo(g);

            }
            SnackBarService.Warning(DirectoryModel.CanonicalName + " has been assigned to the selected groups but changes must be saved.", "Assignment Pending");
            await ModelChanged.InvokeAsync();

            Close();
        }
    }

    protected override bool IsValid => (CopyFrom != null || Group != null);

}
