@inherits AppModalContent


<Row Background="Background.Light" TextColor="Color.Dark">
    <MudField>
        <MudFieldLabel>Group Name</FieldLabel>
        <ADAutoComplete SearchObjectType="ActiveDirectoryObjectType.Group"
            @bind-SelectedResult=@Group/>
    </MudField>
    <MudField>
        <MudFieldLabel>Copy Memberships From</FieldLabel>
        <ADAutoComplete SearchObjectType="ActiveDirectoryObjectType.All"
                        @bind-SelectedResult=@copyFrom
                        CustomResultsFilter="(result)=>result is IGroupableDirectoryAdapter" />

    </MudField>
    @if (CopyFrom != null)
    {
        var existingGroups = DirectoryModel.MemberOf;
        <MudText>Will be added to...</MudText>

        foreach (var group in CopyFrom.MemberOf)
        {
            <MudCard>
                <MudCardHeader>

                    @if (existingGroups.Contains(group))
                    {
                        <Icon Name=@("fa-check") />
                    }
                    else
                    {
                        <Icon Name=@("fa-plus") />
                    }
                    @group.GroupName

                </MudCardHeader>
            </MudCard>
        }
    }
</Row>
<Row>
    <MudButton Color="Color.Primary" Clicked="AssignToGroup">Add</MudButton>

</Row>


@code {

#nullable disable warnings
    [Parameter]
    public EventCallback<GroupMembershipChange> OnGroupMembershipChange { get; set; }

    /// <summary>
    /// The directry entry that we are assigning
    /// </summary>
    [Parameter]
    public IGroupableDirectoryAdapter DirectoryModel { get; set; }

    IDirectoryEntryAdapter copyFrom;
    public IGroupableDirectoryAdapter CopyFrom { get => (IGroupableDirectoryAdapter)copyFrom; set => copyFrom = value; }

    new IDirectoryEntryAdapter Group { get; set; }

    async Task AssignToGroup()
    {
        if (Group is IADGroup group)
        {
            DirectoryModel.AssignTo(group);
            await NotificationService.Warning(DirectoryModel.CanonicalName + " has been assigned to " + group.GroupName + " but changes must be saved.", "Assignment Pending");
            await ModelChanged.InvokeAsync();

            Close();

        }
        if (CopyFrom != null)
        {
            foreach (var g in CopyFrom.MemberOf)
            {
                DirectoryModel.AssignTo(g);

            }
            await NotificationService.Warning(DirectoryModel.CanonicalName + " has been assigned to the selected groups but changes must be saved.", "Assignment Pending");
            await ModelChanged.InvokeAsync();

            Close();
        }
    }
}
