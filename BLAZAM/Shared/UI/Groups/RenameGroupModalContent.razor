@inherits AppModalContent
<div Background="Background.Light" TextColor="Color.Dark">
    <Section Title=@UserLocalization["Name"]>

        @if (Group.CanEditField(ActiveDirectoryFields.SAMAccountName))
        {
            <MudField>
                <MudFieldLabel>
                    @UserLocalization["Group Name"]
                </FieldLabel>
                
                    <MudTextField  @bind-Value="@GroupName" />

                
            </MudField>
        }

      
    </Section>

    @if (Group.CanEditField(ActiveDirectoryFields.Mail))
    {
        <MudField>
            <MudFieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                @UserLocalization["Email Address"]
            </FieldLabel>
           
                <MudTextField  @bind-Value="@Group.Email" />

            
        </MudField>
    }

    <MudButton Color=Color.Primary Clicked="SaveChanges">@UserLocalization["Save Changes"]</MudButton>
</div>
@code {
    #nullable disable warnings
    string GroupName;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        GroupName = Group.CanonicalName;
        await InvokeAsync(StateHasChanged);
    }


    async Task SaveChanges()
    {
        if(GroupName.IsNullOrEmpty()){
            await NotificationService.Warning("You must provide a group name", "Group name");
            GroupName = Group.CanonicalName;
        }
        //Group.CommitChanges();
        try{
            Group.Rename(GroupName);
            await NotificationService.Success("The group has been renamed.", "Group renamed");
            Close();
        }
        catch(Exception ex)
        {
            Loggers.ActiveDirectryLogger.Error("Error attempting to rename a group");
            Loggers.ActiveDirectryLogger.Error(ex.Message,ex);
            await NotificationService.Error("The group could not be renamed.", "Group renamed");
        }

    }

}
