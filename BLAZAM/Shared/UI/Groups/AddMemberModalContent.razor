@inherits AppModalContent


<Row Background="Background.Light" TextColor="Color.Dark">
    <MudField>
        <MudFieldLabel>Member</FieldLabel>
        <ADAutoComplete @bind-SelectedResult="@Entry" />
    </MudField>
    <MudField>
        <MudFieldLabel>Copy Memberships From</FieldLabel>
        <ADAutoComplete SearchObjectType="ActiveDirectoryObjectType.Group"
                        @bind-SelectedResult=@copyFrom
                        CustomResultsFilter="(result)=>result is IADGroup" />
    </MudField>
    @if (CopyFrom != null)
    {
        var existingMembers = Group.UserMembers;
        <MudText>Will be assigned...</MudText>

        foreach (var member in CopyFrom.UserMembers)
        {
            <MudCard>
                <MudCardHeader>

                    @if (existingMembers.Contains(member))
                    {
                        <Icon Name=@("fa-check") />
                    }
                    else
                    {
                        <Icon Name=@("fa-plus") />
                    }
                    @member.CanonicalName

                </MudCardHeader>
            </MudCard>
        }
    }
</Row>
<Row>
    <MudButton Color="Color.Primary" Clicked="AssignToGroup">Add</MudButton>

</Row>


@code {

    [Parameter]
    public EventCallback<GroupMembershipChange> OnGroupMembershipChange { get; set; }



    IDirectoryEntryAdapter? copyFrom;

    public IADGroup CopyFrom { get => (IADGroup)copyFrom; set => copyFrom = value; }

    IDirectoryEntryAdapter Entry { get; set; }

    async Task AssignToGroup()
    {
        if (Entry is IGroupableDirectoryAdapter groupableEntry)
        {
            Group.AssignMember(groupableEntry);
            await NotificationService.Warning(groupableEntry.CanonicalName + " has been assigned to " + Group.GroupName + " but changes must be saved.", "Assignment Pending");
            await ModelChanged.InvokeAsync();

            Close();
        }
        if (CopyFrom != null)
        {
            foreach (var member in CopyFrom.UserMembers)
            {
                Group.AssignMember(member);
               
            }
            await NotificationService.Warning("The selected members have been assigned to " + Group.GroupName + " but changes must be saved.", "Assignment Pending");
            await ModelChanged.InvokeAsync();

            Close();
        }
    }
}
