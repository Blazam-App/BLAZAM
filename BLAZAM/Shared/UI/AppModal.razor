@inherits MudMessageBox
<MudMessageBox OnCancel="OnClosing" Title=@Title @ref="Modal">
    <MessageContent>
        <MudText Color="Color">
            <CascadingValue Value="Modal">
                @ChildContent
            </CascadingValue>
        </MudText>
    </MessageContent>
</MudMessageBox>
@code {
    #nullable disable warnings

    [Inject]
    protected AppSnackBarService NotificationService { get; set; }
    /// <summary>
    /// The modal's  databse connection
    /// </summary>
    [Parameter]
    public IDatabaseContext? Context { get; set; }
    /// <summary>
    /// If set to false, will prevent this modal from closing via the UI
    /// </summary>
    [Parameter]
    public bool AllowClose { get; set; } = true;


    [Parameter]
    public Color Color { get; set; } = Color.Default;

    /// <summary>
    /// The modal content. By default, there is no content
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary>
    /// A reference to this modal
    /// </summary>
    [CascadingParameter]
    protected MudMessageBox? Modal { get; set; }

    [Parameter]
    public EventCallback<MudMessageBox>? ModalChanged { get; set; }

    bool _isShown = false;
    /// <summary>
    /// Indicates whether this modal is currently shown
    /// </summary>
    [Parameter]
    public bool IsShown
    {
        get => _isShown; set
        {
            if (value == _isShown) return;
            _isShown = value;
            IsShownChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsShownChanged { get; set; }

    //async Task ModalClosing(ModalClosingEventArgs args)
    //{
    //    if (!AllowClose)
    //    {
    //        args.Cancel=true;
    //    }
    //}
    /// <summary>
    /// Show this modal
    /// </summary>
    public void Show()
    {

        IsShown = true;
        Modal?.Show();
    }
    /// <summary>
    /// Hide this modal
    /// </summary>
    public void Hide()
    {
        IsShown = false;

        Modal?.Close();
    }
    private async Task OnClosing(bool modalResult)
    {
        if (!AllowClose)
        {
            Modal.Show();
        }
    }

}
