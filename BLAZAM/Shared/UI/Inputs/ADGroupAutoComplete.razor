@namespace BLAZAM.Server.Shared.UI
@inherits AutoCompleteComponentBase


<Autocomplete TItem="IADGroup"
              TValue="IADGroup"
              Data="@Groups"
              ReadData="@SearchGroups"
              @bind-Search="SearchTerm"
              TextField="@(( item ) => item.GroupName)"
              ValueField="@(( item ) => item)"
              @bind-SelectedValue="@SelectedGroup"
              @bind-SelectedValues=@SelectedGroups
               @bind-SelectedTexts=SelectedGroupNames
              Placeholder="Search..."
              MinLength="3"
              Multiple=Multiple
              FreeTyping>
    <ItemContent>
        <Row Padding="Padding.Is0" TextWeight="TextWeight.Bold">

            @context?.Value?.SamAccountName


        </Row>
        <Row Padding="Padding.Is0">
            @context?.Value?.Email

        </Row>
    </ItemContent>
</Autocomplete>
@code {

    [Parameter]
    public bool Multiple { get; set; }

    IEnumerable<IADGroup> _groups;

    [Parameter]
    public IEnumerable<IADGroup> Groups
    {
        get => _groups; set
        {
            if (_groups == value) return;
            _groups = value;
            GroupsChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IEnumerable<IADGroup>> GroupsChanged { get; set; }





    List<string> SelectedGroupNames = new();

    public IADGroup _selectedGroup;

    [Parameter]
    public IADGroup SelectedGroup
    {
        get => _selectedGroup; set
        {
            if (_selectedGroup == value) return;
            Groups = new List<IADGroup> { value }.AsEnumerable();
            SelectedGroupNames = new() { value?.GroupName };
            _selectedGroup = value;
            SelectedGroupChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IADGroup> SelectedGroupChanged { get; set; }


    public List<IADGroup> _selectedGroups;

    [Parameter]
    public List<IADGroup> SelectedGroups
    {
        get => _selectedGroups; set
        {
            if (_selectedGroups == value) return;
            _selectedGroups = value;
            Groups = value;
            SelectedGroupsChanged.InvokeAsync(value);
            SelectedGroupNames = value.Select(g => g.GroupName).ToList();

            InvokeAsync(StateHasChanged);
        }
    }

    [Parameter]
    public EventCallback<List<IADGroup>> SelectedGroupsChanged { get; set; }

    private async Task SearchGroups(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested && autocompleteReadDataEventArgs.SearchValue.Length > 3)
        {
            var temp = await Directory.Groups.FindGroupByStringAsync(autocompleteReadDataEventArgs.SearchValue);

            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                Groups = temp;
            }


        }
    }
}
