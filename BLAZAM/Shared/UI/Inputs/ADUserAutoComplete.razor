@inherits AutoCompleteComponentBase
<Row>
    <Column ColumnSize="ColumnSize.Is8.OnTablet" Height="Height.Is100" Margin="Margin.IsAuto.OnY">
        <Autocomplete TItem="IADUser"
                      TValue="IADUser"
                      Data="@Users"
                      @bind-Search="SearchTerm"
                      ReadData="@SearchUsers2"
                      TextField="@(( item ) => item.SamAccountName)"
                      ValueField="@(( item ) => item)"
                      @bind-SelectedValue="@SelectedUser"
                      Placeholder="Search..."
                      MinLength="3"
                      FreeTyping>
            <ItemContent>
                <Row Padding="Padding.Is0" TextWeight="TextWeight.Bold">

                    @context?.Value?.CanonicalName


                </Row>
                <Row Padding="Padding.Is0">
                    @context.Text
                </Row>
            </ItemContent>
            <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
        </Autocomplete>
    </Column>
    @if (UserStateService?.CurrentUserState?.IsSuperAdmin==true || UserStateService?.CurrentUserState?.DirectoryUser?.CanSearchDisabled==true)
    {
        <Field Horizontal ColumnSize="ColumnSize.Is4.OnTablet" Margin=Margin.Is0>
            <FieldBody ColumnSize="ColumnSize.Is12" Display="Display.InlineBlock" Margin="Margin.IsAuto.OnY">
                <Tooltip Style="width:max-content" Placement=TooltipPlacement.Bottom Text="Include Disabled Users">
                    <Row>
                        <Column Display=Display.InlineFlex ColumnSize="ColumnSize.Is2">
                            <Switch Checked="SearchDisabled" TValue="bool" CheckedChanged=DisabledOptionChanged />
                        </Column>

                        <Column Display=Display.InlineFlex ColumnSize="ColumnSize.Is9.OnDesktop">
                            <Small>
                                Include Disabled Users
                            </Small>
                        </Column>
                    </Row>
                </Tooltip>

            </FieldBody>

        </Field>
    }
</Row>

@code {


    IEnumerable<IADUser> _users = new List<IADUser>();
    bool _searchDisabled;
    [Parameter]
    public bool SearchDisabled
    {
        get => _searchDisabled; set
        {
            if (_searchDisabled == value) return;
            _searchDisabled = value;
            SearchDisabledChanged.InvokeAsync(value);

        }
    }

    [Parameter]
    public EventCallback<bool> SearchDisabledChanged { get; set; }

    [Parameter]
    public IEnumerable<IADUser> Users
    {
        get => _users; set
        {
            if (_users == value) return;
            _users = value;
            UsersChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<IEnumerable<IADUser>> UsersChanged { get; set; }

    public IADUser _selectedUser;

    [Parameter]
    public IADUser SelectedUser
    {
        get => _selectedUser; set
        {
            if (_selectedUser == value) return;
            Users = new List<IADUser> { value };
            _selectedUser = value;
            SelectedUserChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IADUser> SelectedUserChanged { get; set; }


    private async Task SearchUsers2(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {
            bool? enabledUsersOnly = null;
            if (!SearchDisabled)
                enabledUsersOnly = true;
            var temp = (await Directory.Users.FindUsersByStringAsync(autocompleteReadDataEventArgs.SearchValue.Replace(" ", "*"), enabledUsersOnly)).Where(u => u.CanRead);

            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                Users = temp;

            }

        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SearchDisabled = (bool)UserStateService.CurrentUserState?.UserSettings?.SearchDisabledUsers;
    }
    async Task DisabledOptionChanged(bool state)
    {
        SearchDisabled = state;
        try
        {
            UserStateService.CurrentUserState.UserSettings.SearchDisabledUsers = state;
            await UserStateService.CurrentUserState.SaveUserSettings();
        }
        catch
        {

        }
    }

}
