
@inject IActiveDirectory directoryContext

<div class="autocomplete">
    <input type="text" @bind-value="@Value" @onfocusout="LostFocus" @oninput="Autocomplete" @onfocusin="GotFocus" />
    @if (ShowAutocomplete)
    {
        <ul class="options">
            @if (possibleMatches.Any())
            {
                @foreach (var user in possibleMatches)
                {
                    <li class="option" @onclick=@(_ => SelectUser(user))>
                        <span class="option-text">@user</span>
                    </li>
                }

            }
            else
            {
                if (Loading)
                {
                    <li class="disabled option">Searching...</li>
                }
                else
                {
                    <li class="disabled option">No results</li>
                }
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public Func<string, Task<List<string>>> AutocompleteFunction { get; set; }
    [Parameter]
    public string Value
    {
        get => _value; set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);

        }
    }


    [Parameter]

    public EventCallback<string> ValueChanged { get; set; }

    private string _value;
    public bool Loading { get; set; }
    public bool ShowAutocomplete { get; set; }
    CancellationTokenSource cts = new CancellationTokenSource();
    public List<string> possibleMatches { get; set; } = new List<string>();




    private async void Autocomplete(ChangeEventArgs args)
    {
        string searchTerm = args.Value.ToString();
        if (searchTerm != Value)
        {
            Value = searchTerm;
            cts.Cancel();
            if (searchTerm != null && searchTerm != "")
            {
                //possibleMatches.Clear();
                if (searchTerm != null && searchTerm != "" && searchTerm.Length > 2)
                {
                    ShowAutocomplete = true;
                    Loading = true;

                    try
                    {
                        cts = new CancellationTokenSource();

                        await Task.Run(async () =>
                        {
                            CancellationTokenSource _ct = cts;
                            string _v = searchTerm;
                            List<string> results = new List<string>();
                            if (AutocompleteFunction != null)
                                results = await AutocompleteFunction.Invoke(_v);
                          

                            if (!_ct.IsCancellationRequested)
                            {
                                possibleMatches = results;
                            }

                        }, cts.Token);
                    }
                    catch (Exception ex)
                    {

                    }
                }
                Loading = false;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                possibleMatches.Clear();

                ShowAutocomplete = false;
                await InvokeAsync(StateHasChanged);

            }
        }
    }
    private async void LostFocus()
    {
        Task.Delay(150).Wait();
        ShowAutocomplete = false;
        await InvokeAsync(StateHasChanged);

    }
    private async void GotFocus()
    {
        if (possibleMatches.Count > 0)
        {
            ShowAutocomplete = true;
            await InvokeAsync(StateHasChanged);
        }

    }
    private async void SelectUser(string selectedGroup)
    {
        Value = selectedGroup;

        possibleMatches.Clear();
        ShowAutocomplete = false;
        await InvokeAsync(StateHasChanged);

    }
}
