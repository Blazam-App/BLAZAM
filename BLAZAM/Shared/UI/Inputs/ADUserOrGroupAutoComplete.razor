@inherits AutoCompleteComponentBase
<Row>
    <Column ColumnSize="ColumnSize.Is8.OnTablet" Height="Height.Is100" Margin="Margin.IsAuto.OnY">
        <Autocomplete TItem="IGroupableDirectoryModel"
                      TValue="IGroupableDirectoryModel"
                      Data="@Models"
                      @bind-Search="SearchTerm"
                      ReadData="@SearchModels2"
                      TextField="@(( item ) => item.SamAccountName)"
                      ValueField="@(( item ) => item)"
                      @bind-SelectedValue="@SelectedModel"
                      Placeholder="Search users or groups..."
                      MinLength="3"
                      FreeTyping>
            <ItemContent>
                <Row Padding="Padding.Is0" TextWeight="TextWeight.Bold">

                    @context?.Value?.CanonicalName


                </Row>
                <Row Padding="Padding.Is0">
                    @context.Text
                </Row>
            </ItemContent>
            <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
        </Autocomplete>
    </Column>
    @if (IsAdmin || UserStateService.CurrentUserState?.DirectoryUser?.CanSearchDisabled == true)
    {
        <Field Horizontal ColumnSize="ColumnSize.Is4.OnTablet" Margin=Margin.Is0>
            <FieldBody ColumnSize="ColumnSize.Is12" Display="Display.InlineBlock" Margin="Margin.IsAuto.OnY">
                <Switch Checked="IncludeDisabled" TValue="bool" CheckedChanged=DisabledOptionChanged>
                    <Small>
                        Include Disabled Users
                    </Small>
                </Switch>
            </FieldBody>

        </Field>
    }
</Row>

@code {


    IEnumerable<IGroupableDirectoryModel> _models = new List<GroupableDirectoryModel>();
    public bool IncludeDisabled { get; set; }

    [Parameter]
    public IEnumerable<IGroupableDirectoryModel> Models
    {
        get => _models; set
        {
            if (_models == value) return;
            _models = value;
            ModelsChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<IEnumerable<IGroupableDirectoryModel>> ModelsChanged { get; set; }

    public IGroupableDirectoryModel _selectedModel;

    [Parameter]
    public IGroupableDirectoryModel SelectedModel
    {
        get => _selectedModel; set
        {
            if (_selectedModel == value) return;
            Models = new List<IGroupableDirectoryModel> { value };
            _selectedModel = value;
            SelectedModelChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IGroupableDirectoryModel> SelectedModelChanged { get; set; }


    private async Task SearchModels2(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {
            List<IGroupableDirectoryModel> temp = new();
            bool? enabledUsersOnly = null;
            if (!IncludeDisabled)
                enabledUsersOnly = true;
            var temp2 = (await Directory.Users.FindUsersByStringAsync(autocompleteReadDataEventArgs.SearchValue.Replace(" ", "*"), enabledUsersOnly)).Where(u => u.CanRead);
            var temp3 = (await Directory.Groups.FindGroupByStringAsync(autocompleteReadDataEventArgs.SearchValue.Replace(" ", "*"))).Where(u => u.CanRead);

            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                temp.AddRange(temp2);
                temp.AddRange(temp3);
                Models =  temp.OrderBy(m => m.CanonicalName);
                 

            }

        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            IncludeDisabled = (bool)UserStateService.CurrentUserState?.UserSettings?.SearchDisabledUsers;
        }
        catch
        {

        }
    }
    async Task DisabledOptionChanged(bool state)
    {
        IncludeDisabled = state;
        try
        {
            UserStateService.CurrentUserState.UserSettings.SearchDisabledUsers = state;
            await UserStateService.CurrentUserState.SaveUserSettings();
        }
        catch
        {

        }
    }
}
