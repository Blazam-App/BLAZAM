@inherits AutoCompleteComponentBase
<Row>
    <Column ColumnSize="ColumnSize.Is8.OnTablet" Height="Height.Is100" Margin="Margin.IsAuto.OnY">
        <Autocomplete TItem="IDirectoryModel"
                      TValue="IDirectoryModel"
                      Data="@SearchResults"
                      @bind-Search="SearchTerm"
                      ReadData="@GetResults"
                      TextField="@(( item ) => item.SamAccountName)"
                      ValueField="@(( item ) => item)"
                      @bind-SelectedValue="@SelectedResult"
                      Placeholder="Search..."
                      MinLength="3"
                        FreeTyping>
            <ItemContent>
                <Row Padding="Padding.Is0" TextWeight="TextWeight.Bold">

                    @context?.Value?.ObjectType


                </Row>
                <Row Padding="Padding.Is0" TextWeight="TextWeight.Bold">
                    <Small>
                        @context?.Value?.CanonicalName
                    </Small>

                </Row>
                <Row Padding="Padding.Is0">
                    <Small>
                        @context.Text
                    </Small>
                </Row>
            </ItemContent>
            <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
        </Autocomplete>
    </Column>
    @if (UserStateService?.CurrentUserState?.IsSuperAdmin == true || UserStateService?.CurrentUserState?.DirectoryUser?.CanSearchDisabled == true)
    {
        <Field Horizontal ColumnSize="ColumnSize.Is4.OnTablet" Margin=Margin.Is0>
        <FieldBody ColumnSize="ColumnSize.Is12" Display="Display.InlineBlock" Margin="Margin.IsAuto.OnY">
            <Tooltip Style="width:max-content" Placement=TooltipPlacement.Bottom Text="Include Disabled Users">
                <Row>

                    <Column Display=Display.InlineFlex ColumnSize="ColumnSize.Is2">
                        <Switch Checked="SearchDisabled" TValue="bool" CheckedChanged=DisabledOptionChanged />
                    </Column>

                    <Column Display=Display.InlineFlex ColumnSize="ColumnSize.Is9.OnDesktop">
                        <Small>
                            Include Disabled Users
                        </Small>
                    </Column>
                </Row>
            </Tooltip>

        </FieldBody>

        </Field>
    }
</Row>

@code {
 

    IEnumerable<IDirectoryModel> _searchResults = new List<IDirectoryModel>();
    bool _searchDisabled;
    [Parameter]
    public bool SearchDisabled
    {
        get => _searchDisabled;
        set
        {
            if (_searchDisabled == value)
                return;
            _searchDisabled = value;
            SearchDisabledChanged.InvokeAsync(value);
        }
    }
   

    [Parameter]
    public EventCallback<bool> SearchDisabledChanged { get; set; }

    [Parameter]
    public IEnumerable<IDirectoryModel> SearchResults
    {
        get => _searchResults;
        set
        {
            if (_searchResults == value)
                return;
            _searchResults = value;
            SearchResultsChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IEnumerable<IDirectoryModel>> SearchResultsChanged { get; set; }

    public IDirectoryModel _selectedResult;
    [Parameter]
    public IDirectoryModel SelectedResult
    {
        get => _selectedResult;
        set
        {
            if (_selectedResult == value)
                return;
            SearchResults = new List<IDirectoryModel>
                {
                    value
                };
            _selectedResult = value;
            SelectedResultChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IDirectoryModel> SelectedResultChanged { get; set; }

    private async Task GetResults(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {

            bool? enabledUsersOnly = null;
            if (!SearchDisabled)
                enabledUsersOnly = true;

            var search = new ADSearch();

            search.ObjectTypeFilter = SearchObjectType;
            search.GeneralSearchTerm = autocompleteReadDataEventArgs.SearchValue.Replace(" ", "*");
            search.EnabledOnly = enabledUsersOnly;
            search.MaxResults = 10;
            var temp = await search.SearchAsync();

            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                SearchResults = temp;
            }
            return;

            /*
                        var temp = (await Directory.Users.FindUsersByStringAsync(autocompleteReadDataEventArgs.SearchValue.Replace(" ", "*"), enabledUsersOnly)).Where(u => u.CanRead);
                        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
                        {
                            SearchResults = temp;
                        }
                        */
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SearchDisabled = (bool)UserStateService.CurrentUserState?.UserSettings?.SearchDisabledUsers;
    }

    async Task DisabledOptionChanged(bool state)
    {
        SearchDisabled = state;
        try
        {
            UserStateService.CurrentUserState.UserSettings.SearchDisabledUsers = state;
            await UserStateService.CurrentUserState.SaveUserSettings();
        }
        catch
        {
        }
    }
}
