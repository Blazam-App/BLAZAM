@inherits AutoCompleteComponentBase
<Div Display="Display">
    <Autocomplete TItem="IDirectoryEntryAdapter"
                  TValue="IDirectoryEntryAdapter"
                  Data="@SearchResults"
                  @bind-Search="SearchTerm"
                  ReadData="@GetResults"
                  TextField="@(( item ) => item.SamAccountName)"
                  ValueField="@(( item ) => item)"
                  @bind-SelectedValue="@SelectedResult"
                  @bind-SelectedValues=@SelectedResults
                  @bind-SelectedTexts=SelectedResultNames
                  Placeholder="Search..."
                  MinLength="1"
                  Multiple=Multiple
                  Style=""
                    FreeTyping>
        <ItemContent>
            <Div Padding="Padding.Is0" TextWeight="TextWeight.Bold">
                <Div Flex="Flex.InlineFlex">
                    @context?.Value?.ObjectType

                </Div>
                @if (context?.Value != null && context.Value is IGroupableDirectoryAdapter gdm)
                {
                    if (gdm.LockedOut)
                    {

                        <Badge Flex=Flex.InlineFlex Float=Float.End Background="Background.Warning">Locked</Badge>

                    }
                    if (!gdm.Enabled)
                    {

                        <Badge Flex=Flex.InlineFlex Float=Float.End Background="Background.Danger">Disabled</Badge>

                    }
                }




            </Div>
            <Div Padding="Padding.Is0" TextWeight="TextWeight.Bold">
                <Small>
                    @context?.Value?.CanonicalName
                </Small>

            </Div>
            <Div Padding="Padding.Is0">
                <Small>
                    @context.Text
                </Small>
            </Div>
        </ItemContent>
        <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
    </Autocomplete>
</Div>



@code {

    [Parameter]
    public bool Multiple { get; set; }


    [Parameter]
    public Func<IDirectoryEntryAdapter,bool>CustomResultsFilter{ get; set; }

    [Parameter]
    public IFluentDisplay Display { get; set; }

    [CascadingParameter]
    public SearchService SearchParameters { get; set; }

    IEnumerable<IDirectoryEntryAdapter> _searchResults = new List<IDirectoryEntryAdapter>();
    bool _searchDisabled;
    [Parameter]
    public bool SearchDisabled
    {
        get => _searchDisabled;
        set
        {
            if (_searchDisabled == value)
                return;
            _searchDisabled = value;
            SearchDisabledChanged.InvokeAsync(value);
        }
    }


    [Parameter]
    public EventCallback<bool> SearchDisabledChanged { get; set; }


    [Parameter]
    public ActiveDirectoryObjectType? SearchObjectType { get; set; }


    [Parameter]
    public IEnumerable<IDirectoryEntryAdapter> SearchResults
    {
        get => _searchResults;
        set
        {
            if (_searchResults == value)
                return;
            _searchResults = value;
            SearchResultsChanged.InvokeAsync(value);
        }
    }


    [Parameter]
    public EventCallback<IEnumerable<IDirectoryEntryAdapter>> SearchResultsChanged { get; set; }

    public IDirectoryEntryAdapter _selectedResult;
    [Parameter]
    public IDirectoryEntryAdapter SelectedResult
    {
        get => _selectedResult;
        set
        {
            if (_selectedResult == value)
                return;
            SearchResults = new List<IDirectoryEntryAdapter>
                {
                    value
                };
            _selectedResult = value;
            SelectedResultChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IDirectoryEntryAdapter> SelectedResultChanged { get; set; }





    public List<IDirectoryEntryAdapter> _selectedResults;

    [Parameter]
    public List<IDirectoryEntryAdapter> SelectedResults
    {
        get => _selectedResults; set
        {
            if (_selectedResults == value) return;
            _selectedResults = value;
            SearchResults = value; //quesitnoable neccessity
            SelectedResultsChanged.InvokeAsync(value);
            SelectedResultNames = value.Select(g => g.CanonicalName).ToList();

            InvokeAsync(StateHasChanged);
        }
    }

    [Parameter]
    public EventCallback<List<IDirectoryEntryAdapter>> SelectedResultsChanged { get; set; }

    List<string> SelectedResultNames = new();




    private async Task GetResults(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {


            var search = new ADSearch();

            search.ObjectTypeFilter = SearchObjectType;
            search.GeneralSearchTerm = autocompleteReadDataEventArgs.SearchValue.Replace(" ", "*");
            search.EnabledOnly = !SearchDisabled;
            search.MaxResults = 10;
            var temp = await search.SearchAsync();

            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                SearchResults = temp;

                if (CustomResultsFilter != null)
                {
                    List<IDirectoryEntryAdapter> filteredResults = new();
                    foreach(var result in SearchResults){
                        if (CustomResultsFilter.Invoke(result))
                            filteredResults.Add(result);
                    }
                    SearchResults = filteredResults;
                }
            }
            return;

            /*
                        var temp = (await Directory.Users.FindUsersByStringAsync(autocompleteReadDataEventArgs.SearchValue.Replace(" ", "*"), enabledUsersOnly)).Where(u => u.CanRead);
                        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
                        {
                            SearchResults = temp;
                        }
                        */
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SearchDisabled = (bool)UserStateService.CurrentUserState?.UserSettings?.SearchDisabledUsers;
    }


}
