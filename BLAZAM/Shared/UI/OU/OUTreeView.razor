@inherits AppComponentBase
@if (RootOU != null && RootOU.Any())
{
    <MudText>@Label</MudText>
    <MudTreeView T="IADOrganizationalUnit" ServerData="GetChildren" Items="RootOU"
             @bind-SelectedValue="SelectedOU">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.IsExpanded"
                         Value="@context"
                         Items="@context.Children.ToHashSet()">
                <Content>
                    @if (Badge != null)
                    {
                        <MudBadge Content="Badge" Overlap="true" Class="mx-6 my-4">
                            <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChildren()" />
                            <MudIcon Icon="@Icons.Material.Filled.Folder" Class="ml-0 mr-2" Color="@Color.Default" />
                            <MudText>@context.CanonicalName</MudText>
                            @EndAdornment?.Invoke(context)
                        </MudBadge>
                    }
                    else
                    {
                        <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChildren()" />
                        <MudIcon Icon="@Icons.Material.Filled.Folder" Class="ml-0 mr-2" Color="@Color.Default" />
                        <MudText>@context.CanonicalName</MudText>
                        @EndAdornment?.Invoke(context)
                    }
                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>



}

@code {

#nullable disable warnings
    [Parameter]
    public bool StartRootExpanded { get; set; } = true;

    [Parameter]
    public string? Label { get; set; }


    [Parameter]
    public object? Badge { get; set; }


    [Parameter]
    public RenderFragment<IADOrganizationalUnit>? EndAdornment { get; set; }

    IADOrganizationalUnit? _selectedNode;

    [Parameter]
    public HashSet<IADOrganizationalUnit> RootOU { get; set; } = new HashSet<IADOrganizationalUnit>();


    IADOrganizationalUnit? _startingSelectedNode;
    [Parameter]
    public IADOrganizationalUnit? StartingSelectedOU
    {
        get => _startingSelectedNode; set
        {
            if (value == _startingSelectedNode) return;
            _startingSelectedNode = value;
            _selectedNode = value;


            StartingSelectedOUChanged.InvokeAsync(value);
        }

    }

    [Parameter]
    public EventCallback<IADOrganizationalUnit> StartingSelectedOUChanged
    {
        get; set;
    }

    [Parameter]
    public IADOrganizationalUnit? SelectedOU
    {
        get => _selectedNode; set
        {
            if (value == _selectedNode) return;
            if (value != null && value.CanRead)
            {
                _selectedNode = value;
                if (TopLevel == null)
                    OnInitializedAsync();
                OpenToSelected();
                SelectedOUChanged.InvokeAsync(value);
            }
        }

    }

    [Parameter]
    public EventCallback<IADOrganizationalUnit> SelectedOUChanged { get; set; }

    ADOrganizationalUnit TopLevel;


    MudTreeView<IADOrganizationalUnit>? OUTree { get; set; }


    IList<IADOrganizationalUnit> ExpandedNodes = new List<IADOrganizationalUnit>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //ApplicationBaseOUs = Directory.OUs.FindSubOusByDN(null);
        TopLevel = new ADOrganizationalUnit();
        await TopLevel.Parse(Directory.GetDirectoryEntry(), Directory);
        _ = TopLevel.Children;
        RootOU = new HashSet<IADOrganizationalUnit>() { TopLevel };
        if (StartingSelectedOU == null)
        {
            SelectedOU = TopLevel;
        }
        else
            OpenToSelected();
        LoadingData = false;


        await InvokeAsync(StateHasChanged);


    }
    void OpenToSelected()
    {
        //ExpandedNodes.Clear();
        var newExpandedNodes = new List<IADOrganizationalUnit>(ExpandedNodes);
        if (StartRootExpanded)
            newExpandedNodes.Add(TopLevel);
        if (!SelectedOU.Equals(TopLevel))
        {
            IADOrganizationalUnit? openThis = TopLevel;
            while (openThis != null) 
            {
                openThis = openThis.Children.Where(c => SelectedOU.DN.Contains(c.DN) && !SelectedOU.DN.Equals(c.DN)).FirstOrDefault();
                if (openThis != null)
                    newExpandedNodes.Add(openThis);
            } 
        }
        ExpandedNodes = newExpandedNodes;
        InvokeAsync(StateHasChanged);


    }



    async Task<HashSet<IADOrganizationalUnit>> GetChildren(IADOrganizationalUnit parentNode)
    {
        return parentNode.Children.ToHashSet();
    }



















}
