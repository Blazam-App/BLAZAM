@inherits AppModalContent
<LoadingIndicator Visible=LoadingData>

    <Div Background="Background.Light" TextColor="TextColor.Dark">
        <Section Title=@UserLocalization["Name"]>


            @if (User.CanReadField(ActiveDirectoryFields.GivenName))
            {
                <Field Horizontal ColumnSize="ColumnSize.Is6.OnWidescreen.Is4.OnFullHD">
                <FieldLabel>
                    @UserLocalization["First Name"]
                </FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@_privateUserInstance.GivenName" />

                </FieldBody>
                </Field>
            }
            @if (User.CanReadField(ActiveDirectoryFields.MiddleName))
            {
                <Field Horizontal ColumnSize="ColumnSize.Is6.OnWidescreen.Is4.OnFullHD">
                <FieldLabel>
                    @UserLocalization["Middle Name"]
                </FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@_privateUserInstance.MiddleName" />

                </FieldBody>
                </Field>
            }
            @if (User.CanReadField(ActiveDirectoryFields.SN))
            {
                <Field Horizontal ColumnSize="ColumnSize.Is6.OnWidescreen.Is4.OnFullHD">
                <FieldLabel>
                    @UserLocalization["Last Name"]
                </FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@_privateUserInstance.Surname" />

                </FieldBody>
                </Field>
            }
            @if (User.CanReadField(ActiveDirectoryFields.DisplayName))
            {
                <Field Horizontal ColumnSize="ColumnSize.Is6.OnWidescreen.Is4.OnFullHD">
                <FieldLabel>
                    @UserLocalization["Display Name"]
                </FieldLabel>
                <FieldBody>
                    <TextEdit Text="@_privateUserInstance.DisplayName" TextChanged="DisplayNameChanged" />

                </FieldBody>
                </Field>
            }

        </Section>
        @if (User.CanEditField(ActiveDirectoryFields.SAMAccountName))
        {
            <Field Horizontal>
            <FieldLabel>
                @UserLocalization["Username"]
            </FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@_privateUserInstance.SamAccountName" />

            </FieldBody>
        </Field>
        }
        @if (User.CanEditField(ActiveDirectoryFields.Mail))
        {
            <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                @UserLocalization["Email Address"]
            </FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                <TextEdit @bind-Text="@_privateUserInstance.Email" />

            </FieldBody>
        </Field>
        }
        <Button Disabled=saveDisabled Color=Color.Primary Clicked="SaveChanges">@UserLocalization["Save Changes"]</Button>
    </Div>
</LoadingIndicator>

@code {
    private IADUser _privateUserInstance;

    [Parameter]
    public EventCallback<IDirectoryEntryAdapter> DirectoryModelRenamed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        _privateUserInstance = Directory.Users.FindUserBySID(User.SID.ToSidString());
        saveDisabled = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task DisplayNameChanged(string newName)
    {

        _privateUserInstance.DisplayName = newName;

    }
    async Task SaveChanges()
    {
        if (Directory.Users.FindUsersByContainerName(_privateUserInstance.DisplayName, false, false) == null)
        {
            saveDisabled = true;
            LoadingData = true;
            _privateUserInstance.Rename(_privateUserInstance.DisplayName);
            await _privateUserInstance.CommitChangesAsync();
            //NotificationService.Warning("The user has been renamed but changes must be saved.", "User renamed");
            DirectoryModelRenamed.InvokeAsync(_privateUserInstance);
            Close();
        }
        else
        {
            await NotificationService.Error("That name already exists. Please choose a different Display Name", "Name Exists");
        }
        LoadingData = false;

        saveDisabled = false;
    }

}
