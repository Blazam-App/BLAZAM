@inherits AppModalContent
<LoadingIndicator Visible=LoadingData>

    <div Background="Background.Light" TextColor="Color.Dark">
        <Section Title=@UserLocalization["Name"]>


            @if (User.CanReadField(ActiveDirectoryFields.GivenName))
            {
                <MudField>
                
                        <MudTextField Label="@UserLocalization["First Name"]" @bind-Value="@_privateUserInstance.GivenName" />

                
                </MudField>
            }
            @if (User.CanReadField(ActiveDirectoryFields.MiddleName))
            {
                <MudField>
                
                        <MudTextField Label="@UserLocalization["Middle Name"]" @bind-Value="@_privateUserInstance.MiddleName" />

                
                </MudField>
            }
            @if (User.CanReadField(ActiveDirectoryFields.SN))
            {
                <MudField>
                
                        <MudTextField Label="@UserLocalization["Last Name"]" @bind-Value="@_privateUserInstance.Surname" />

                
                </MudField>
            }
            @if (User.CanReadField(ActiveDirectoryFields.DisplayName))
            {
                <MudField>
                
                    <MudTextField T="string" Label="@UserLocalization["Display Name"]" Text="@_privateUserInstance.DisplayName" TextChanged="DisplayNameChanged" />

                
                </MudField>
            }

        </Section>
        @if (User.CanEditField(ActiveDirectoryFields.SAMAccountName))
        {
            <MudField>
            
                    <MudTextField Label="@UserLocalization["Username"]" @bind-Value="@_privateUserInstance.SamAccountName" />

            
        </MudField>
        }
        @if (User.CanEditField(ActiveDirectoryFields.Mail))
        {
            <MudField>
           
                    <MudTextField Label="@UserLocalization["Email Address"]" @bind-Value="@_privateUserInstance.Email" />

            
        </MudField>
        }
        <MudButton Disabled=saveDisabled Color=Color.Primary Clicked="SaveChanges">@UserLocalization["Save Changes"]</MudButton>
    </div>
</LoadingIndicator>

@code {

#nullable disable warnings
    private IADUser _privateUserInstance;

    [Parameter]
    public EventCallback<IDirectoryEntryAdapter> DirectoryModelRenamed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
        _privateUserInstance = Directory.Users.FindUserBySID(User.SID.ToSidString());
        saveDisabled = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task DisplayNameChanged(string newName)
    {

        _privateUserInstance.DisplayName = newName;

    }
    async Task SaveChanges()
    {
        if (Directory.Users.FindUsersByContainerName(_privateUserInstance.DisplayName, false, false) == null)
        {
            saveDisabled = true;
            LoadingData = true;
            _privateUserInstance.Rename(_privateUserInstance.DisplayName);
            await _privateUserInstance.CommitChangesAsync();
            //NotificationService.Warning("The user has been renamed but changes must be saved.", "User renamed");
            DirectoryModelRenamed.InvokeAsync(_privateUserInstance);
            Close();
        }
        else
        {
            await NotificationService.Error("That name already exists. Please choose a different Display Name", "Name Exists");
        }
        LoadingData = false;

        saveDisabled = false;
    }

}
