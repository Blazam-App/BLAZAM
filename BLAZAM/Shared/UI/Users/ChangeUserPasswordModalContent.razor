@inherits AppModalContent
<div Background="Background.Light" Color="Color.Dark">
    <SettingsField>
            <MudTextField Label="@UserLocalization["Username"]" @bind-Value="@User.SamAccountName" Disabled=true />

        
    </SettingsField>

    <SettingsField>
        
            <MudTextField Label="@UserLocalization["Email Address"]" @bind-Value="@User.Email" Disabled=true />

        
    </SettingsField>

        <SettingsField>
            
                <MudTextField Label="@UserLocalization["Password"]" InputType="InputType.Password" @bind-Value="@newPassword"/>
            
        </SettingsField>
        <SettingsField>
            
                <MudTextField Label="@UserLocalization["Password"]" InputType="InputType.Password" @bind-Value="@newPasswordConfirm"/>

            
        </SettingsField>
    <SettingsField>
        <MudText>
            @UserLocalization["Require change"]
        </MudText>
        <MudText>
            Require the user to change their password at next logona
        </MudText>
        
            <MudSwitch T="bool" @ref=requireChangeSwitch/>

        

    </SettingsField>
    <MudButton Color=Color.Primary Disabled=!PasswordsValid OnClick="SaveChanges">@UserLocalization["Change Password"]</MudButton>
</div>
@code {
#nullable disable warnings
    string newPassword;
    string newPasswordConfirm;
    MudSwitch<bool> requireChangeSwitch;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }


    async Task SaveChanges()
    {
        //User.CommitChanges();
        if (User.SetPassword(newPassword.ToSecureString(), requireChangeSwitch.Checked))
        {
           
                
             SnackBarService.Success("Changed password for " + User.DisplayName, "Password Changed");
        }
        else
        {
             SnackBarService.Error("Unable to set password for " + User.DisplayName, "Change Failed");

        }
        Close();

    }
    bool PasswordsValid
    {
        get
        {

            if (newPassword != null && newPassword != "")
                return newPassword == newPasswordConfirm;
            return false;
        }
    }
    //void ValidateName(ValidatorEventArgs e)
    //{

    //    e.Status = !PasswordsValid
    //        ? ValidationStatus.Error
    //    : ValidationStatus.Success;

    //}

}
