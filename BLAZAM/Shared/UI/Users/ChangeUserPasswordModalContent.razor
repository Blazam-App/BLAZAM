@inherits AppModalContent

    <SettingsField>
        <MudTextField Label="@UserLocalization["Username"]" @bind-Value="@User.SamAccountName" Disabled=true />


    </SettingsField>

    <SettingsField>

        <MudTextField Label="@UserLocalization["Email Address"]" @bind-Value="@User.Email" Disabled=true />


    </SettingsField>

    <SettingsField>

        <MudTextField Validation="@(newPassword.IsNullOrEmpty()==false)" Label="@UserLocalization["Password"]" InputType="InputType.Password" @bind-Value="@newPassword" />

    </SettingsField>
    <SettingsField>

        <MudTextField Validation="@(newPasswordConfirm.Equals(newPassword))" Label="@UserLocalization["Password"]" InputType="InputType.Password" @bind-Value="@newPasswordConfirm" />


    </SettingsField>
    <SettingsField>
        <MudText>
            @UserLocalization["Require change"]
        </MudText>
        <MudText>
            Require the user to change their password at next logona
        </MudText>

        <MudSwitch T="bool" @ref=requireChangeSwitch />



    </SettingsField>
@code {
    #nullable disable warnings
    string newPassword = "";
    string newPasswordConfirm = "";
    MudSwitch<bool> requireChangeSwitch;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Modal.OnYes += SaveChanges;
        Modal.YesText = UserLocalization["Change Password"];
        Modal.Title = "Change Password";

        Modal.YesEnabled = ValidateModal;
    }


    public async void SaveChanges()
    {
        //User.CommitChanges();

        if (User.SetPassword(newPassword.ToSecureString(), requireChangeSwitch.Checked))
        {


            SnackBarService.Success("Changed password for " + User.DisplayName, "Password Changed");
            AuditLogger.User.PasswordChanged(User,requireChangeSwitch.Checked);
            Close();

        }
        else
        {
            SnackBarService.Error("Unable to set password for " + User.DisplayName, "Change Failed");

        }
    }
    bool PasswordsValid
    {
        get
        {

            if (newPassword != null && newPassword != "")
                return newPassword == newPasswordConfirm;
            return false;
        }
    }
    protected override bool IsValid => (!newPassword.IsNullOrEmpty()
            && !newPasswordConfirm.IsNullOrEmpty()
            && newPassword.Equals(newPasswordConfirm));
        
    


}
