@inherits AppModalContent
<Div Background="Background.Light" TextColor="TextColor.Dark">
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
            @UserLocalization["Username"]
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
            <TextEdit @bind-Text="@User.SamAccountName" Disabled=true />

        </FieldBody>
    </Field>

    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
            @UserLocalization["Email Address"]
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
            <TextEdit @bind-Text="@User.Email" Disabled=true />

        </FieldBody>
    </Field>

    <Validation Validator="ValidationRule.IsNotEmpty">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                @UserLocalization["Password"]
            </FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                <TextEdit Role="TextRole.Password" @bind-Text="@newPassword">
                    <Feedback>
                        <ValidationError>Password cannot be blank</ValidationError>
                    </Feedback>
                </TextEdit>

            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidateName">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is4.OnTablet">
                @UserLocalization["Password"]
            </FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8.OnTablet">
                <TextEdit Role="TextRole.Password" @bind-Text="@newPasswordConfirm">
                    <Feedback>
                        <ValidationError>Passwords must match</ValidationError>
                    </Feedback>
                </TextEdit>

            </FieldBody>
        </Field>
    </Validation>
    <Button Color=Color.Primary Disabled=!PasswordsValid Clicked="SaveChanges">@UserLocalization["Change Password"]</Button>
</Div>
@code {
    string newPassword;
    string newPasswordConfirm;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }


    async Task SaveChanges()
    {
        //User.CommitChanges();
        if (User.SetPassword(newPassword.ToSecureString()))
        {
            await NotificationService.Success("Changed password for " + User.DisplayName, "Password Changed");
        }
        else
        {
            await NotificationService.Error("Unable to set password for " + User.DisplayName, "Change Failed");

        }
        Close();

    }
    bool PasswordsValid
    {
        get
        {

            if (newPassword != null && newPassword != "")
                return newPassword == newPasswordConfirm;
            return false;
        }
    }
    void ValidateName(ValidatorEventArgs e)
    {

        e.Status = !PasswordsValid
            ? ValidationStatus.Error
        : ValidationStatus.Success;

    }

}
