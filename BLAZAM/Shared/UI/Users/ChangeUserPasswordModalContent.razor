@inherits AppModalContent
<div Background="Background.Light" TextColor="Color.Dark">
    <SettingsField>
        <MudFieldLabel>
            @UserLocalization["Username"]
        </FieldLabel>
        
            <MudTextField  @bind-Value="@User.SamAccountName" Disabled=true />

        
    </SettingsField>

    <SettingsField>
        <MudFieldLabel>
            @UserLocalization["Email Address"]
        </FieldLabel>
        
            <MudTextField  @bind-Value="@User.Email" Disabled=true />

        
    </SettingsField>

    <Validation Validator="ValidationRule.IsNotEmpty">
        <SettingsField>
            <MudFieldLabel>
                @UserLocalization["Password"]
            </FieldLabel>
            
                <MudTextField  InputType="InputType.Password" @bind-Value="@newPassword">
                    
                        <ValidationError>Password cannot be blank</ValidationError>
                    
                </MudTextField >

            
        </SettingsField>
    </Validation>
    <Validation Validator="@ValidateName">
        <SettingsField>
            <MudFieldLabel>
                @UserLocalization["Password"]
            </FieldLabel>
            
                <MudTextField  InputType="InputType.Password" @bind-Value="@newPasswordConfirm">
                    
                        <ValidationError>Passwords must match</ValidationError>
                    
                </MudTextField >

            
        </SettingsField>
    </Validation>
    <SettingsField>
        <MudFieldLabel>
            @UserLocalization["Require change"]
        </FieldLabel>
        <MudFieldHelp>
            Require the user to change their password at next logona
        </FieldHelp>
        
            <MudSwitch TValue="bool" @ref=requireChangeSwitch/>

        

    </SettingsField>
    <MudButton Color=Color.Primary Disabled=!PasswordsValid Clicked="SaveChanges">@UserLocalization["Change Password"]</MudButton>
</div>
@code {
#nullable disable warnings
    string newPassword;
    string newPasswordConfirm;
    Switch<bool> requireChangeSwitch;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }


    async Task SaveChanges()
    {
        //User.CommitChanges();
        if (User.SetPassword(newPassword.ToSecureString(), requireChangeSwitch.Checked))
        {
           
                
            await NotificationService.Success("Changed password for " + User.DisplayName, "Password Changed");
        }
        else
        {
            await NotificationService.Error("Unable to set password for " + User.DisplayName, "Change Failed");

        }
        Close();

    }
    bool PasswordsValid
    {
        get
        {

            if (newPassword != null && newPassword != "")
                return newPassword == newPasswordConfirm;
            return false;
        }
    }
    void ValidateName(ValidatorEventArgs e)
    {

        e.Status = !PasswordsValid
            ? ValidationStatus.Error
        : ValidationStatus.Success;

    }

}
