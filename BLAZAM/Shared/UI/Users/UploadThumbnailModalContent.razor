@inherits AppModalContent
@using Blazorise.Cropper
<div Background="Background.Light" TextColor="Color.Dark">
    @if (newThumbnail != null)
    {
        <Base64Image Data="newThumbnail" />

    }
    <MudText>
        @SettingsLocalization["Upload Thumbnail Photo"]
    </MudText>

    <MudFileUpload T="IBrowserFile" FilesChanged="LoadIcon">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Upload Files
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>


    <MudButton Color=Color.Primary Clicked="SaveChanges">@UserLocalization["Save Photo"]</MudButton>
</div>
@code {
    byte[]? newThumbnail;
    [Parameter]
    public IADUser DirectoryModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }
    private async void LoadIcon(IBrowserFile e)
    {
        
        using (var stream = e.OpenReadStream(5000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                newThumbnail = memoryStream.ToArray().ReizeRawImage(250);
                //settings.AppIcon = memoryStream.ToArray();
            }
        }

        await InvokeAsync(StateHasChanged);

    }


    async Task SaveChanges()
    {
        //User.CommitChanges();
        try
        {
            DirectoryModel.ThumbnailPhoto = newThumbnail;

            await NotificationService.Warning("Thumbnail changed for " + DirectoryModel.DisplayName + " but changes need to be saved.", "Thumbnail Changed");
        }
        catch
        {
            await NotificationService.Error("Unable to set thumbnail for " + DirectoryModel.DisplayName, "Change Failed");

        }
        Close();

    }


}
