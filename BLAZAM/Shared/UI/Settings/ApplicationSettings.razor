@using BLAZAM.Server.Pages;
@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;
@inject IDbContextFactory<DatabaseContext> DbFactory
@inherits ValidatedForm


<LoadingIndicator Height="Height.Is100" Visible=LoadingData>
    <Row Padding="Padding.Is1.OnMobile.Is2.OnTablet.Is3.OnDesktop.Is4.OnWidescreen.Is5.OnFullHD">
        <Heading>@SettingsLocalization["Application Settings"]</Heading>
        <Form @onsubmit="Save">

            <Validations Mode="ValidationMode.Auto" Model="@settings" StatusChanged="OnValidation">

                <Validation>
                    <SettingsField>
                        <FieldLabel>@SettingsLocalization["Application Name"]</FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="Give you're application a display name" @bind-Text="@settings.AppName">
                                <Feedback>
                                    <ValidationError />
                                    <ValidationNone>
                                        You must give the Web Application a personalized name.
                                    </ValidationNone>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </SettingsField>
                </Validation>

                <Validation>
                    <SettingsField>
                        <FieldLabel>@SettingsLocalization["Homepage Message"]</FieldLabel>
                        <FieldBody>
                            <MemoEdit Placeholder="Place a custom welcome message for your users on the dashboard" @bind-Text="@settings.MOTD">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </FieldBody>
                    </SettingsField>

                </Validation>

                <Validation>
                    <SettingsField>
                        <FieldLabel>@SettingsLocalization["Force Https"]</FieldLabel>
                        <FieldBody>
                            <Switch TValue="bool" @bind-Checked="@settings.ForceHTTPS" />
                        </FieldBody>
                    </SettingsField>

                </Validation>
                <Validation>
                    <SettingsField>
                        <FieldLabel>
                            @SettingsLocalization["User Helpdesk URL"]
                            <Tooltip Display=Display.InlineFlex Margin=Margin.IsAuto.OnX Style="width:max-content" Text="Not Yet Implemented">
                                <Badge Background="Background.Warning" Pill>!</Badge>
                            </Tooltip>
                        </FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="If not provided, support links will be disabled" @bind-Text="@settings.UserHelpdeskURL">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </SettingsField>

                </Validation>


                <SettingsField>

                    <FieldLabel>
                        @SettingsLocalization["Branding Icon"]
                        @if (settings != null && settings.AppIcon != null && settings.AppIcon.Length > 0)
                        {
                            <Image Class="app-icon" Source="@StaticAssets.ApplicationIconUri" />
                            <Tooltip Text="Remove custom icon">
                                <AppCloseButton Clicked="@(()=>{settings.AppIcon=null;})" />
                            </Tooltip>
                        }
                    </FieldLabel>
                    <FieldBody>
                        <Blazorise.FilePicker AutoReset Upload="LoadIcon" />
                    </FieldBody>
                    </SettingsField>



                    <Validation Validator="AppValidationRule.IsFqdn">
                    <SettingsField>
                        <FieldLabel>@SettingsLocalization["Website FQDN"]</FieldLabel>
                        <FieldHelp>Enter the fqdn of the published website. (eg: blazam.mydomain.company)</FieldHelp>
                        <FieldBody>
                            <TextEdit Placeholder="Enter the web address" @bind-Text="@settings.AppFQDN">
                                <Feedback>
                                    <ValidationError />
                                    <ValidationNone>
                                        You must give the Web Application a FQDN to use auto updates.
                                    </ValidationNone>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </SettingsField>
                    </Validation>

                    <SettingsField>
                    <FieldBody>
                        <Button Disabled="saveDisabled" Type="ButtonType.Submit" Color="Color.Success">Save Changes</Button>
                    </FieldBody>
                    </SettingsField>


                    </Validations>
                    </Form>
                    </Row>
                    </LoadingIndicator>
                    @code {
    AppSettings settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        Task.Run(() =>
        {
            settings = Context.AppSettings.FirstOrDefault();
            LoadingData = false;
            InvokeAsync(StateHasChanged);
        });
    }


    private async void LoadIcon(FileUploadEventArgs e)
    {
        //TODO Try and capture the moment the file upload starts
        using (var stream = e.File.OpenReadStream(5000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                settings.AppIcon = memoryStream.ToArray();
            }
        }
        await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);


    }

    protected override void Save()
    {
        base.Save();
    }

}
