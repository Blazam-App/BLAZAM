@inherits SettingsComponents


<MudText Typo="Typo.h4">@SettingsLocalization["Application Settings"]</MudText>
<EditForm @ref=@EditForm Context="editContext" OnValidSubmit="Save" Model="settings">


    <SettingsField>
        <FieldLabel>
            <MudText>
                @SettingsLocalization["Application Name"]
            </MudText>
        </FieldLabel>
        <ChildContent>
            <MudTextField Class="mt-0" Label=@SettingsLocalization["Application Name"] @bind-Value="@settings.AppName" />
        </ChildContent>
    </SettingsField>

    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["Homepage Message"]
        </FieldLabel>
        <ChildContent>
            <MudTextField Label="@SettingsLocalization["Homepage Message"]" T="string" Variant="Variant.Text" @bind-Text="@settings.MOTD" Lines="5" Placeholder="Place a custom welcome message for your users on the dashboard" />

        </ChildContent>




    </SettingsField>


    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["Force Https"]
        </FieldLabel>

        <ChildContent>
            <MudSwitch Label="@SettingsLocalization["Enabled"]" TValue="bool" @bind-Checked="@settings.ForceHTTPS" />
        </ChildContent>
    </SettingsField>

    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["User Helpdesk URL"]
        </FieldLabel>
        <ChildContent>
            <MudTextField Placeholder="If not provided, support links will be disabled" @bind-Value="@settings.UserHelpdeskURL">
                <MudTooltip Display=Display.InlineFlex Margin=Margin.IsAuto.OnX Style="width:max-content" Text="Not Yet Implemented">
                    <MudBadge>!</MudBadge>
                </MudTooltip>


            </MudTextField>
        </ChildContent>
    </SettingsField>



    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["Branding Icon"]
        </FieldLabel>
        <ChildContent>
            <MudContainer>

                @if (settings != null && settings.AppIcon != null && settings.AppIcon.Length > 0)
                {
                    <MudImage Class="app-icon" Src="@StaticAssets.ApplicationIconUri" />
                    <MudTooltip Text="Remove custom icon">
                        <AppCloseButton OnClick="@(()=>{settings.AppIcon=null;})" />
                    </MudTooltip>
                }
            </MudContainer>
            <MudFileUpload T="IBrowserFile" FilesChanged="LoadIcon">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Icon
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </ChildContent>
    </SettingsField>



    <SettingsField>
        <FieldLabel>
            @SettingsLocalization["Website FQDN"]
        </FieldLabel>
        <ChildContent>
            <MudTextField For=@(()=> settings.AppFQDN) ErrorText="Must be a valid domain name" HelperText="Enter the fqdn of the published website. (eg: blazam.mydomain.company)" Placeholder="Enter the web address" @bind-Value="@settings.AppFQDN" />
        </ChildContent>
    </SettingsField>

    <SettingsField>
        <MudButton Disabled="SaveDisabled" ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>
    </SettingsField>


</EditForm>
<MudOverlay Visible="LoadingData" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
@code {
    AppSettings settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = await Context.AppSettings.FirstOrDefaultAsync();
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }


    private async void LoadIcon(IBrowserFile e)
    {
        byte[] fileBytes;
        using (var stream = e.OpenReadStream(5000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                fileBytes = memoryStream.ToArray();
            }
        }
        settings.AppIcon = await e.ToByteArrayAsync(5000000);
        await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);


    }

    protected override void Save()
    {
        AuditLogger.System.SettingsChanged("Application", settings.GetChanges(originalSettings));
        base.Save();
    }

}
