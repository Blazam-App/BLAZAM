@inject IDbContextFactory<DatabaseContext> DbFactory
@inherits SettingsComponents



<LoadingIndicator Height="Height.Is100" Visible=LoadingData>
    <Heading>@SettingsLocalization["Authentication Settings"]</Heading>
    <Form @onsubmit=Save>
        <Validations Mode="ValidationMode.Auto" Model="@settings" StatusChanged="OnValidation">

            <Validation Validator="AppValidationRule.IsNotEmpty">
                <SettingsField>
                    <FieldLabel>@SettingsLocalization["Admin Password"]</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" @bind-Text="newAdminPassword">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </SettingsField>
            </Validation>
            <Validation>

                <SettingsField>
                    <FieldLabel>@SettingsLocalization["Session Timeout"]</FieldLabel>
                    <FieldHelp>Time in minutes</FieldHelp>
                    <FieldBody>
                        <NumericPicker TValue="int?" @bind-Value="@settings.SessionTimeout">

                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </NumericPicker>


                    </FieldBody>
                </SettingsField>
            </Validation>

            <Text>Duo Security MFA (optional)</Text>
            <hr />
            <Validation>
                <SettingsField>
                    <FieldLabel>Duo ClientID</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" @bind-Text="@settings.DuoClientId">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </SettingsField>
            </Validation>
            <Validation>
                <SettingsField>
                    <FieldLabel>Duo ClientSecret</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" @bind-Text="@settings.DuoClientSecret">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </SettingsField>
            </Validation>
            <Validation>
                <SettingsField>
                    <FieldLabel>Duo ApiHost</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" @bind-Text="@settings.DuoApiHost">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </SettingsField>
            </Validation>
            <SettingsField>
                <FieldBody>
                    <Button Disabled="saveDisabled" Type="ButtonType.Submit" Color="Color.Success">Save Changes</Button>
                </FieldBody>
            </SettingsField>



        </Validations>
    </Form>
</LoadingIndicator>
@code {
    AuthenticationSettings settings = new AuthenticationSettings();
    string newAdminPassword;
    string adminPasswordInDb;
    string _timeoutString = "Loading...";
    protected override async Task OnInitializedAsync()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);


        originalSettings = await Context.AuthenticationSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = await Context.AuthenticationSettings.FirstOrDefaultAsync();
        _timeoutString = settings.SessionTimeout.ToString() + " Minutes";
        adminPasswordInDb = settings?.AdminPassword;
        newAdminPassword = adminPasswordInDb;
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }
    private void UpdateTimeoutDisplay()
    {
        _timeoutString = settings.SessionTimeout.ToString() + " Minutes";
        InvokeAsync(StateHasChanged);

    }
    protected override async void Save()
    {
        if (!newAdminPassword.Equals(adminPasswordInDb))
        {

            settings.AdminPassword = EncryptionService.EncryptObject(newAdminPassword);

            adminPasswordInDb = settings.AdminPassword;

        }
        AuditLogger.System.SettingsChanged("Authentication", settings.GetChanges(originalSettings));
        base.Save();
        await InvokeAsync(StateHasChanged);

    }
}
