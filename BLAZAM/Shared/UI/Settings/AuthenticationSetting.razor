@inherits SettingsComponents




<LoadingIndicator Height="Height.Is100" Visible=LoadingData>
    <MudText Typo="Typo.h4">@SettingsLocalization["Authentication Settings"]</MudText>
    <MudForm @onsubmit=Save>


        <SettingsField Label="@SettingsLocalization["Admin Password"]">

            <MudTextField InputType="InputType.Password" @bind-Value="newAdminPassword" />
        </SettingsField>

        <SettingsField Label="@SettingsLocalization["Session Timeout"]">

            <MudNumericField HelperText="Time in minute" TValue="int?" @bind-Value="@settings.SessionTimeout" />

        </SettingsField>

        <MudText>Duo Security MFA (optional)</MudText>
        <br />
        <SettingsField Label="Duo ClientID">

                <MudTextField InputType="InputType.Password" @bind-Value="@settings.DuoClientId"/>

        </SettingsField>
        <SettingsField Label="Duo ClientSecret">

                <MudTextField InputType="InputType.Password" @bind-Value="@settings.DuoClientSecret"/>

        </SettingsField>
        <SettingsField Label="Duo ApiHost">

                <MudTextField InputType="InputType.Password" @bind-Value="@settings.DuoApiHost"/>

        </SettingsField>
        <SettingsField>

            <MudButton Disabled="saveDisabled" ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

        </SettingsField>



    </MudForm>
</LoadingIndicator>
@code {
#nullable disable warnings
    AuthenticationSettings settings = new AuthenticationSettings();
    string newAdminPassword;
    string adminPasswordInDb;
    string _timeoutString = "Loading...";
    protected override async Task OnInitializedAsync()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);


        originalSettings = await Context.AuthenticationSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = await Context.AuthenticationSettings.FirstOrDefaultAsync();
        _timeoutString = settings.SessionTimeout.ToString() + " Minutes";
        adminPasswordInDb = settings?.AdminPassword;
        newAdminPassword = adminPasswordInDb;
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }
    private void UpdateTimeoutDisplay()
    {
        _timeoutString = settings.SessionTimeout.ToString() + " Minutes";
        InvokeAsync(StateHasChanged);

    }
    protected override async void Save()
    {
        if (!newAdminPassword.Equals(adminPasswordInDb))
        {

            settings.AdminPassword = EncryptionService.EncryptObject(newAdminPassword);

            adminPasswordInDb = settings.AdminPassword;

        }
        AuditLogger.System.SettingsChanged("Authentication", settings.GetChanges(originalSettings));
        base.Save();
        await InvokeAsync(StateHasChanged);

    }
}
