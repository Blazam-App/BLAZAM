@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;

@inject IDbContextFactory<DatabaseContext> DbFactory
@inherits ValidatedForm


<h3>@SettingsLocalization["Authentication Settings"]</h3>

<LoadingIndicator Height="Height.Is100" Visible=LoadingData>
    <Validations Mode="ValidationMode.Auto" Model="@settings" StatusChanged="OnValidation">
        <Validation>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">@SettingsLocalization["Website Name"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit Role="TextRole.Password" Placeholder="Give you\'re application a display name" @bind-Text="@settings.AdminPassword">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation>

            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">@SettingsLocalization["Session Timeout"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <NumericPicker TValue="int?" @bind-Value="@settings.SessionTimeout">

                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </NumericPicker>
                    <p>@settings.SessionTimeout.ToString() + " Minutes"</p>

                </FieldBody>
            </Field>
        </Validation>

        <Section Title="Duo Security MFA (optional)">
            <Validation>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">Duo ClientID</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit Role="TextRole.Password" @bind-Text="@settings.DuoClientId">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
            <Validation>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">Duo ClientSecret</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit Role="TextRole.Password" @bind-Text="@settings.DuoClientSecret">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
            <Validation>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">Duo ApiHost</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit Role="TextRole.Password" @bind-Text="@settings.DuoApiHost">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
        </Section>
        <Button Disabled="saveDisabled" @onclick="Save" Color="Color.Success">Save Changes</Button>



    </Validations>
</LoadingIndicator>
@code {
    AuthenticationSettings settings = new AuthenticationSettings();
    string _timeoutString = "Loading...";
    protected override async Task OnInitializedAsync()
    {
        LoadingData = true;
        InvokeAsync(StateHasChanged);

        Task.Run(() =>
        {
            settings = Context.AuthenticationSettings.FirstOrDefault();
            _timeoutString = settings.SessionTimeout.ToString() + " Minutes";
            LoadingData = false;
            InvokeAsync(StateHasChanged);
        });
    }
    private void UpdateTimeoutDisplay()
    {
        _timeoutString = settings.SessionTimeout.ToString() + " Minutes";
        InvokeAsync(StateHasChanged);

    }

}
