@inherits SettingsComponents
@using System.IO.Compression;
    <Heading>@SettingsLocalization["System Settings"]</Heading>
    <Form @onsubmit="Save">
    @if (settings != null)
    {
        <SettingsField>
            <FieldLabel>@SettingsLocalization["Google Analytics ID"]</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@settings.AnalyticsId" />
            </FieldBody>
        </SettingsField>
        <SettingsField>
            <FieldBody>
                <Button Color="Color.Danger" Clicked=RestartApplication>Restart Web Application</Button>

            </FieldBody>
        </SettingsField>
    }
    
    <SettingsField>
        <FieldBody>
            <Blazorise.Link To="/download/logs" Target="Target.Blank">
            <Button Color="Color.Primary">Download Logs</Button>
            </Blazorise.Link>

        </FieldBody>
    </SettingsField>
        <SettingsField>
            <FieldBody>
                <Button Type="ButtonType.Submit" Color="Color.Success">Save Changes</Button>
            </FieldBody>
        </SettingsField>
    </Form>
@code {
#nullable disable warnings
    AppSettings? settings = new AppSettings();

    protected override async Task OnInitializedAsync()
    {
        originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();

        settings = Context.AppSettings.FirstOrDefault();
        LoadingData = false;
        InvokeAsync(StateHasChanged);
    }



    [Inject] ApplicationManager applicationManager { get; set; }

    async Task RestartApplication()
    {
        if (await MessageService.Confirm("Are you sure you want to restart the application? All connected users will be disconnected.", "Restart Application"))
        {
            if (Program.InDemoMode && !UserStateService.CurrentUsername.Equals("admin", StringComparison.OrdinalIgnoreCase))
            {
                await NotificationService.Warning("Restarting the application is not allowed in the demo");
                return;
            }
            applicationManager.Restart();
        }
    }

    protected override void Save()
    {
        AuditLogger.System.SettingsChanged("Application", settings.GetChanges(originalSettings));
        base.Save();
    }

}
