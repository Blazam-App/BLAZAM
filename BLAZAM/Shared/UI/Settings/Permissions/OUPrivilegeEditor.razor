@inherits ValidatedForm

<MudCard>
    <MudCardHeader>
        @OU?.Name
    </MudCardHeader>
    <MudCardBody>
        @if (inheritedMappings.Count > 0)
        {
            <Accordion>
                <Collapse Visible="@collapseVisible">
                    <CollapseHeader>
                        <MudText Typo ="Typo.h1" Size="HeadingSize.Is5">
                            <MudButton Clicked="@(()=>collapseVisible = !collapseVisible)">@SettingsLocalization["Inherited Permissions"]</MudButton>
                        </MudText>
                    </CollapseHeader>
                    <CollapseBody>
                        @foreach (var map in inheritedMappings)
                        {
                            <MudCard>
                                <MudCardBody>
                                    <PermissionMapEditor Map="map" ReadOnly=true />
                                </MudCardBody>
                            </MudCard>
                        }
                    </CollapseBody>
            </Collapse>

        </Accordion>
        }
        @foreach (var map in appliedMappings)
        {
            <PermissionMapEditor MappingDeleted="@(()=>{RefreshData();})" Map="map" />
        }
        @if (NewMapping != null)
        {
            <PermissionMapEditor MappingDeleted="@(()=>{RefreshData();})" Map="NewMapping" />
        }
    </MudCardBody>
    <MudCardFooter>
        <MudButton Clicked="AddNewMapping" Color="Color.Success">Add new mapping</MudButton>
    </MudCardFooter>
</MudCard>


@code {
#nullable disable warnings
    bool collapseVisible = false;

    IADOrganizationalUnit _ou;
    [Parameter]
    public IADOrganizationalUnit OU
    {
        get => _ou; set
        {
            if (_ou == value) return;
            _ou = value;
            OnOUChanged(_ou);

        }
    }

    private PermissionMapping? NewMapping;
    List<PermissionMapping> appliedMappings { get; set; } = new List<PermissionMapping>();
    List<PermissionMapping> inheritedMappings { get; set; } = new List<PermissionMapping>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnOUChanged(OU);
    }

    async Task OnOUChanged(IADOrganizationalUnit? newOU)
    {
        if (Context != null && newOU != null)
        {
            await RefreshData();
        }
    }
    async Task RefreshData()
    {
        appliedMappings = OU.DirectPermissionMappings;
        inheritedMappings = OU.InheritedPermissionMappings;
        NewMapping = null;
        await InvokeAsync(StateHasChanged);
    }
    void AddNewMapping()
    {
        NewMapping = new() { OU = OU.DN };
    }
}