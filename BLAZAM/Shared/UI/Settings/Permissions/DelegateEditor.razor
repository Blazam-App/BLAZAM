@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;

@inherits AppComponentBase
<h3>Delegates</h3>
<LoadingIndicator Visible=LoadingData>
    <p> Delegates are your approved application users. Only the users your define here, or users in the following Active Directory groups (or nested groups) will be allowed to log in to the applicaiton.</p>
    <p> The acceess allowed to each delegate is controlled by the mapped access level.</p>
    <ListGroup>
        <Row>
            <Column ColumnSize="ColumnSize.Is10.OnTablet">
                <MudTextField  Display=Display.InlineFlex Placeholder="Filter Delegates" @bind-Value="@GroupFilter" />

            </Column>

            <Column ColumnSize="ColumnSize.Is2.OnTablet">
                <MudButton Color=Color.Secondary Float=Float.End Display=Display.InlineFlex Clicked="(()=>{trashModal.Show();})"><Icon Name=IconName.Delete /></MudButton>

            </Column>
        </Row>
        @if (AllLevels.Count > 0)
        {

            @foreach (var pl in AllLevels.Where(l => l.DeletedAt == null).Where(l =>
           Directory.GetDirectoryModelBySid(l.DelegateSid).CanonicalName
           .StartsWith(GroupFilter, StringComparison.OrdinalIgnoreCase) ||
           Directory.GetDirectoryModelBySid(l.DelegateSid).CanonicalName
           .Contains(GroupFilter, StringComparison.OrdinalIgnoreCase)))
            {
                <BLAZAM.Server.Shared.UI.Settings.Permissions.PriviligeLevelListItem Level="pl" Context="Context" />
            }
        }
        <ListGroupItem Name="AddUserGroup">

            <MudButton Background="Background.Success"  Clicked="@ShowAddGroup">
                @SettingsLocalization["Create New Delegation Target"]
            </MudButton>
        </ListGroupItem>

    </ListGroup>
    <AppModal @ref=@trashModal Title="Deleted Delegates">
        @foreach (var deleg in AllLevels.Where(l => l.DeletedAt != null))
        {
            var model = @Directory.GetDirectoryModelBySid(deleg.DelegateSid);
            <Row>
                <Column>
                    <Strong>@model.ObjectType</Strong><br />
                    <MudText>@model.CanonicalName</MudText>
                    <MudText>@deleg.DeletedAt</MudText>
                </Column>
                <Column>
                    <MudButton Float="Float.End" Color="Color.Primary" Clicked="(()=>{RestoreDelegate(deleg);})">Restore</MudButton>
                </Column>

            </Row>
        }
    </AppModal>
    <AddPrivilegeLevelModal @ref=@addGroupModal Context="Context" DelegateAdded="GroupAdded" />

</LoadingIndicator>

@{

}
@code {
#nullable disable warnings
    string _groupFilter = "";
    string GroupFilter
    {
        get => _groupFilter; set
        {
            if (_groupFilter == value) return;
            _groupFilter = value;
            InvokeAsync(StateHasChanged);
        }
    }
    AppModal? trashModal;
    AddPrivilegeLevelModal addGroupModal;
    List<PermissionDelegate> AllLevels { get; set; } = new List<PermissionDelegate>();
    DbSet<PermissionDelegate> settings;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        settings = Context.PermissionDelegate;
        RefreshLevels();

        await InvokeAsync(StateHasChanged);

    }

    private async Task RefreshLevels()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);

        AllLevels.Clear();
        AllLevels = await settings.ToListAsync();
        LoadingData = false;

        await InvokeAsync(StateHasChanged);

    }
    private async void ShowAddGroup()
    {
        addGroupModal.Show();

    }
    async Task RestoreDelegate(PermissionDelegate delegateToRestore)
    {
        delegateToRestore.DeletedAt = null;
        await Context.SaveChangesAsync();
        await NotificationService.Success("Delegate restored");
        if (AllLevels.Where(l => l.DeletedAt != null).Count() < 1)
        {
            trashModal.Hide();
        }
    }
    private async void GroupAdded()
    {
        await RefreshLevels();

        await InvokeAsync(StateHasChanged);
    }

}
