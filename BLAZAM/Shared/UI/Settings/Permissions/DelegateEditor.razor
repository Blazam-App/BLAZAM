@using Microsoft.EntityFrameworkCore;
@using BLAZAM.Common.Data.ActiveDirectory.Interfaces;
@using BLAZAM.Server.Data.Services.Email;

@inherits AppComponentBase
<h3>Delegates</h3>
<LoadingIndicator Visible=LoadingData>
    <p> Delegates are your approved application users. Only the users your define here, or users in the following Active Directory groups (or nested groups) will be allowed to log in to the applicaiton.</p>
    <p> The acceess allowed to each delegate is controlled by the mapped access level.</p>
    <ListGroup>
        <MudStack Row>
            <MudTextField Display=Display.InlineFlex Placeholder="Filter Delegates" @bind-Value="@GroupFilter" />
            <MudSpacer />
            <MudButton Color=Color.Secondary OnClick="(()=>{trashModal.Show();})"><MudIcon Icon=@Icons.Material.Filled.RestoreFromTrash /></MudButton>
        </MudStack>
        @if (AllDelegates.Count > 0)
        {

            @foreach (var pl in AllDelegates.Where(l => l.DeletedAt == null).Where(l =>
           Directory.GetDirectoryModelBySid(l.DelegateSid).CanonicalName
           .StartsWith(GroupFilter, StringComparison.OrdinalIgnoreCase) ||
           Directory.GetDirectoryModelBySid(l.DelegateSid).CanonicalName
           .Contains(GroupFilter, StringComparison.OrdinalIgnoreCase)))
            {
                <BLAZAM.Server.Shared.UI.Settings.Permissions.PriviligeLevelListItem Level="pl" Context="Context" DelegateDeleted="DelegatesChanged" />
            }
        }
        <ListGroupItem Name="AddUserGroup">

            <MudButton Background="Background.Success" OnClick="@ShowAddGroup">
                @SettingsLocalization["Create New Delegation Target"]
            </MudButton>
        </ListGroupItem>

    </ListGroup>
    <AppModal @ref=@trashModal Title="Deleted Delegates">
        @foreach (var deleg in AllDelegates.Where(l => l.DeletedAt != null))
        {
            var model = @Directory.GetDirectoryModelBySid(deleg.DelegateSid);
            <MudContainer>
                <Column>
                    <Strong>@model.ObjectType</Strong><br />
                    <MudText>@model.CanonicalName</MudText>
                    <MudText>@deleg.DeletedAt</MudText>
                </Column>
                <Column>
                    <MudButton Float="Float.End" Color="Color.Primary" OnClick="(()=>{RestoreDelegate(deleg);})">Restore</MudButton>
                </Column>

            </MudContainer>
        }
    </AppModal>
    <AppModal @ref=@addGroupModal Title="Add Delegate" YesText="Add"
              OnCancel=@(()=>{
              string test= "";
              })
              OnYes="@((val)=>{

})">
        <AddPrivilegeLevelModalContent @ref=addDelegateContent />
    </AppModal>

</LoadingIndicator>

@{

}
@code {
#nullable disable warnings
    string _groupFilter = "";
    string GroupFilter
    {
        get => _groupFilter; set
        {
            if (_groupFilter == value) return;
            _groupFilter = value;
            InvokeAsync(StateHasChanged);
        }
    }
    AddPrivilegeLevelModalContent? addDelegateContent;
    AppModal? trashModal;
    AppModal? addGroupModal;
    List<PermissionDelegate> AllDelegates { get; set; } = new List<PermissionDelegate>();
    DbSet<PermissionDelegate> settings;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        settings = Context.PermissionDelegate;
        RefreshDelegates();

        await InvokeAsync(StateHasChanged);

    }

    private async Task RefreshDelegates()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);

        AllDelegates.Clear();
        AllDelegates = await settings.ToListAsync();
        LoadingData = false;

        await InvokeAsync(StateHasChanged);

    }
    private async void ShowAddGroup()
    {
        bool? result = await addGroupModal.Show();
        if (result == true)
        {
            if (await addDelegateContent.AddGroup())
            {
                SnackBarService.Success("Delegate added");
                DelegatesChanged();

            }

        }

    }
    async Task RestoreDelegate(PermissionDelegate delegateToRestore)
    {
        delegateToRestore.DeletedAt = null;
        await Context.SaveChangesAsync();
        SnackBarService.Success("Delegate restored");
        if (AllDelegates.Where(l => l.DeletedAt != null).Count() < 1)
        {
            trashModal.Hide();
        }
    }
    private async void DelegatesChanged()
    {

        await RefreshDelegates();

        await InvokeAsync(StateHasChanged);
    }

}
