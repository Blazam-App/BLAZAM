
@inherits ValidatedForm


<Validations Mode=ValidationMode.Auto Model="WorkingModel" StatusChanged="OnValidation">
    <Row>
        <Column>
            <Row>
                <Validation>
                    <MudField ColumnSize="ColumnSize.IsHalf.OnTablet">
                        <MudFieldLabel>@SettingsLocalization["Name"]</FieldLabel>
                        
                            <MudTextField  @bind-Value=WorkingModel.Name>

                                
                                    
                                
                            </MudTextField >


                        
                    </MudField>
                </Validation>
                <MudField Horizontal ColumnSize="ColumnSize.IsHalf.OnTablet">
                    <MudFieldLabel>
                        @SettingsLocalization["Assign Objects"]
                    </FieldLabel>
                    @foreach (var adObjectType in Enum.GetValues(typeof(ActiveDirectoryObjectType)))
                    {
                        if ((ActiveDirectoryObjectType)adObjectType != ActiveDirectoryObjectType.All)
                        {
                            //Prepare data to show object access addbutons
                            var existingAccess = WorkingModel.ObjectMap.Where(m => m.ObjectType == (ActiveDirectoryObjectType)adObjectType).FirstOrDefault();
                            bool buttonDisabled = true;
                            if (existingAccess == null)
                            {
                                buttonDisabled = false;
                            }
                            var name = Enum.GetName(typeof(ActiveDirectoryObjectType), adObjectType);
                            <Column ColumnSize="ColumnSize.IsQuarter.OnFullHD.IsHalf">
                                <MudButton Width=Width.Is100 Disabled=buttonDisabled Color=Color.Success Clicked="()=>AddObjectTypeAccess(adObjectType)">@SettingsLocalization[name]</MudButton>
                            </Column>
                        }
                    }
                </MudField>
            </Row>
            @if (WorkingModel.ObjectMap.Count > 0)
            {


                <Row>
                    <h3>Assign Object Permissions</h3>

                </Row>
            }
            @foreach (var objectMap in WorkingModel.ObjectMap)
            {
                //Prepare data to show object access fields

                var name = Enum.GetName(typeof(ActiveDirectoryObjectType), objectMap.ObjectType);

                <MudField Horizontal Margin="Margin.Is2.OnY">
                <MudFieldLabel ColumnSize="ColumnSize.Is4" Class="h3">@SettingsLocalization[name]</FieldLabel>
                <MudFieldBody ColumnSize="ColumnSize.Is6">

                    <Select TValue="int" SelectedValueChanged="(int value)=>SetObjectMapAccess(objectMap,value)" SelectedValue="objectMap.ObjectAccessLevelId">

                        @foreach (ObjectAccessLevel levelValue in ObjectAccessLevels.Levels)
                            {
                                <SelectItem Value="levelValue.Id">@SettingsLocalization[levelValue.Name]</SelectItem>

                            }
                        </Select>
                        @if (objectMap.ObjectType == ActiveDirectoryObjectType.User && objectMap.ObjectAccessLevelId != ObjectAccessLevels.Deny.Id)
                        {
                            <MudSwitch @bind-Checked=objectMap.AllowDisabled>@SettingsLocalization["Allow Disabled User Access"]</Switch>
                        }
                    
                    <MudFieldBody ColumnSize="ColumnSize.Is2">
                        <AppCloseButton Clicked="()=>RemoveObjectTypeAccess(objectMap)" />

                    
                </MudField>
                @if (objectMap.ObjectAccessLevelId != 0 && objectMap.ObjectAccessLevelId != ObjectAccessLevels.Deny.Id)
                {

                    <h4>@name Actions</h4>

                    <MudField>
                    @foreach (var action in actions.OrderBy(f => f.Name))
                        {
                            if (action.IsActionAppropriateForObject(objectMap.ObjectType))
                            {
                                if (!WorkingModel.ActionMap.Any(a => a.ObjectAction == action))
                                {



                                    <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.Is1">
                                        <MudButton Color=Color.Secondary Clicked="()=>AddActionAccess(action,objectMap.ObjectType)">@SettingsLocalization[@action.Name+" "+@name]</MudButton>
                                    </Column>
                                }
                            }
                        }
                    </MudField>
                    @if (WorkingModel.ActionMap.Any())
                    {
                        foreach (var actionMap in WorkingModel.ActionMap.ToList())
                        {
                            string? aname = Enum.GetName(typeof(ActiveDirectoryObjectType), actionMap.ObjectType);

                            <MudField>
                            <MudFieldLabel ColumnSize="ColumnSize.Is6">@SettingsLocalization[actionMap.ObjectAction.Name+" "+aname]</FieldLabel>
                            <MudFieldBody ColumnSize="ColumnSize.Is6">
                                <RadioGroup @bind-CheckedValue=actionMap.AllowOrDeny>
                                    <Radio Value="false">@SettingsLocalization["Deny"]</Radio>
                                    <Radio Value="true">@SettingsLocalization["Allow"]</Radio>
                                    <AppCloseButton Clicked="()=>RemoveActionAccess(actionMap)" />

                                </RadioGroup>
                            
                        </MudField>
                        }
                    }
                }

            }

            @if (ShowFields)
            {
                <h4>Fields</h4>

                <MudField>

                @foreach (var field in fields.OrderBy(f => f.FieldName))
                    {

                        if (ShowField(field))
                        {
                            var existingFieldAccess = WorkingModel.FieldMap.Where(m => m.Field.FieldName == field.FieldName).FirstOrDefault();
                            if (existingFieldAccess == null)
                            {
                                <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.Is1">
                                    <MudButton Color=Color.Secondary Clicked="()=>AddFieldAccess(field)">@SettingsLocalization[field.FieldName]</MudButton>
                                </Column>
                            }
                        }
                    }

                </MudField>
                foreach (var field in WorkingModel.FieldMap.OrderBy(f => f.Field.FieldName))
                {


                    <MudField>
                    <MudFieldLabel ColumnSize="ColumnSize.Is6">@field.Field.FieldName</FieldLabel>
                    <MudFieldBody ColumnSize="ColumnSize.Is6">
                        <Select TValue="int" @bind-SelectedValue="field.FieldAccessLevelId">
                            @foreach (FieldAccessLevel levelValue in FieldAccessLevels.Levels)
                                {

                                    <SelectItem Value="levelValue.Id">@SettingsLocalization[levelValue.Name]</SelectItem>

                                }
                            </Select>
                            <AppCloseButton Clicked="()=>RemoveFieldAccess(field)" />

                        
                    </MudField>
                }
            }
        </Column>
    </Row>

    @{
        string buttonLabel = SettingsLocalization["Create Access Level"];
        if (Model.Id > 0)
            buttonLabel = SettingsLocalization["Update Access Level"];
    }
    <MudButton Color=Color.Success Margin=Margin.IsAuto.OnX Disabled=saveDisabled Clicked="CreateAccessLevel">@buttonLabel</MudButton>
    @if (WorkingModel.Id != 0)
    {
        <MudButton Color=Color.Error Margin=Margin.IsAuto.OnX Clicked="DeleteAccessLevel">@SettingsLocalization["Delete Access Level"]</MudButton>
    }
</Validations>
@code {

    [Parameter]
    public EventCallback LevelsChanged { get; set; }
    ObjectAccessLevel? checkedValue;
    bool ShowFields
    {
        get
        {
            return WorkingModel.ObjectMap.AsQueryable().Any(om => om.ObjectAccessLevelId > ObjectAccessLevels.Deny.Id);
            foreach (var map in WorkingModel.ObjectMap)
            {
                if (map.ObjectAccessLevel != null)
                {
                    if (map.ObjectAccessLevel.Level > ObjectAccessLevels.Deny.Level)
                    {
                        return true;
                    }
                }
                if (map.ObjectAccessLevelId != 0)
                {
                    if (map.ObjectAccessLevelId > ObjectAccessLevels.Deny.Id)
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    [Parameter]
    public AccessLevel Model { get; set; } = new AccessLevel();

    public AccessLevel WorkingModel { get; set; } = new AccessLevel();

    IEnumerable<ActiveDirectoryField> fields = new List<ActiveDirectoryField>();
    IEnumerable<ActionAccessFlag> actions = new List<ActionAccessFlag>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Context = DbFactory.CreateDbContext();

        fields = Context.ActiveDirectoryFields.AsEnumerable();
        actions = Context.ObjectActionFlag.AsEnumerable();
        if (Model.Id > 0)
        {
            WorkingModel = Context.AccessLevels.Where(l => l.Id == Model.Id).FirstOrDefault();


        }
        else
        {
            WorkingModel = Model;
        }

    }

    private void CreateAccessLevel()
    {
        if (Context == null) return;

        bool addition = false;
        if (WorkingModel.Id == 0)
        {
            Context.AccessLevels.Add(WorkingModel);
            addition = true;
        }
        Context.SaveChanges();
        if (addition)
            WorkingModel = new();
        LevelsChanged.InvokeAsync();
        StateHasChanged();
    }

    private void AddObjectTypeAccess(object objectTypeIndex)
    {
        var typeEnum = (ActiveDirectoryObjectType)objectTypeIndex;
        if (typeEnum != null)
        {
            WorkingModel.ObjectMap.Add(new ObjectAccessMapping()
                {
                    ObjectType = typeEnum,
                    ObjectAccessLevelId = ObjectAccessLevels.Deny.Id
                });
        }
        StateHasChanged();
    }
    private void AddActionAccess(ActionAccessFlag action, ActiveDirectoryObjectType type)
    {
        var proposedAddition = new ActionAccessMapping()
            {
                ObjectType = type,
                ObjectAction = action
            };
        if (WorkingModel.ActionMap == null)
            WorkingModel.ActionMap = new List<ActionAccessMapping>();

        WorkingModel.ActionMap.Add(proposedAddition);
        StateHasChanged();
    }
    private void RemoveActionAccess(ActionAccessMapping action)
    {
        WorkingModel.ActionMap.Remove(action);

        StateHasChanged();
    }
    private void AddFieldAccess(ActiveDirectoryField fieldToAdd)
    {

        WorkingModel.FieldMap.Add(new FieldAccessMapping()
            {
                Field = fieldToAdd,
                FieldAccessLevelId = FieldAccessLevels.Deny.Id
            });

        StateHasChanged();
    }
    private void RemoveFieldAccess(FieldAccessMapping fieldToRemove)
    {

        WorkingModel.FieldMap.Remove(fieldToRemove);

        StateHasChanged();
    }
    private void RemoveObjectTypeAccess(ObjectAccessMapping accessToRemove)
    {
        WorkingModel.ObjectMap.Remove(accessToRemove);

        InvokeAsync(StateHasChanged);
    }
    Task OnCheckedValueChanged(ObjectAccessLevel nl)
    {

        return Task.CompletedTask;
    }

    void SetObjectMapAccess(ObjectAccessMapping mapping, int accessIndex)
    {
        mapping.ObjectAccessLevelId = (int)accessIndex;
        StateHasChanged();

    }
    async Task DeleteAccessLevel()
    {
        WorkingModel.DeletedAt = DateTime.UtcNow;
        await Context.SaveChangesAsync();
        InvokeAsync(StateHasChanged);
    }
    private bool ShowField(ActiveDirectoryField field)
    {
        foreach (var map in WorkingModel.ObjectMap)
        {
            if (map.ObjectAccessLevelId != ObjectAccessLevels.Deny.Id)
            {

                return field.IsActionAppropriateForObject(map.ObjectType);
            }
        }
        return false;


    }
}