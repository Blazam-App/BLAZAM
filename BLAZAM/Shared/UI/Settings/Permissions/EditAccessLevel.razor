@inherits ValidatedForm


<Row>
    <Row>


        <MudTextField Label="@SettingsLocalization["Name"]" @bind-Value=WorkingModel.Name>




        </MudTextField>





        <MudText>
            @SettingsLocalization["Assign Objects"]
        </MudText>
        @foreach (var adObjectType in Enum.GetValues(typeof(ActiveDirectoryObjectType)))
        {
            if ((ActiveDirectoryObjectType)adObjectType != ActiveDirectoryObjectType.All)
            {
                //Prepare data to show object access addbutons
                var existingAccess = WorkingModel.ObjectMap.Where(m => m.ObjectType == (ActiveDirectoryObjectType)adObjectType).FirstOrDefault();
                bool buttonDisabled = true;
                if (existingAccess == null)
                {
                    buttonDisabled = false;
                }
                var name = Enum.GetName(typeof(ActiveDirectoryObjectType), adObjectType);

                <MudButton Width=Width.Is100 Disabled=buttonDisabled Color=Color.Success OnClick="()=>AddObjectTypeAccess(adObjectType)">@SettingsLocalization[name]</MudButton>

            }
        }

    </Row>
    @if (WorkingModel.ObjectMap.Count > 0)
    {


        <Row>
            <h3>Assign Object Permissions</h3>

        </Row>
    }
    @foreach (var objectMap in WorkingModel.ObjectMap)
    {
        //Prepare data to show object access fields

        var name = Enum.GetName(typeof(ActiveDirectoryObjectType), objectMap.ObjectType);



        <MudSelect T="int" ValueChanged="(int value)=>SetObjectMapAccess(objectMap,value)" Value="objectMap.ObjectAccessLevelId">

            @foreach (ObjectAccessLevel levelValue in ObjectAccessLevels.Levels)
            {
                <MudSelectItem Value="levelValue.Id">@SettingsLocalization[levelValue.Name]</MudSelectItem>

            }
        </MudSelect>
        @if (objectMap.ObjectType == ActiveDirectoryObjectType.User && objectMap.ObjectAccessLevelId != ObjectAccessLevels.Deny.Id)
        {
            <MudSwitch Label="@SettingsLocalization["Allow Disabled User Access"]" @bind-Checked=objectMap.AllowDisabled />
        }

        <AppCloseButton OnClick="()=>RemoveObjectTypeAccess(objectMap)" />


        @if (objectMap.ObjectAccessLevelId != 0 && objectMap.ObjectAccessLevelId != ObjectAccessLevels.Deny.Id)
        {

            <h4>@name Actions</h4>


            @foreach (var action in actions.OrderBy(f => f.Name))
            {
                if (action.IsActionAppropriateForObject(objectMap.ObjectType))
                {
                    if (!WorkingModel.ActionMap.Any(a => a.ObjectAction == action))
                    {



                        <MudButton Color=Color.Secondary OnClick="()=>AddActionAccess(action,objectMap.ObjectType)">@SettingsLocalization[@action.Name+" "+@name]</MudButton>
                    }
                }
            }

            @if (WorkingModel.ActionMap.Any())
            {
                foreach (var actionMap in WorkingModel.ActionMap.ToList())
                {
                    string? nmae = Enum.GetName(typeof(ActiveDirectoryObjectType), actionMap.ObjectType);


                    <MudText>@SettingsLocalization[actionMap.ObjectAction.Name+" "+nmae]</MudText>
                    <MudRadioGroup T="bool" @bind-Value=actionMap.AllowOrDeny>
                        <MudRadio T="bool" Tag="false">@SettingsLocalization["Deny"]</MudRadio>
                        <MudRadio T="bool" Tag="true">@SettingsLocalization["Allow"]</MudRadio>
                        <AppCloseButton OnClick="()=>RemoveActionAccess(actionMap)" />

                    </MudRadioGroup>


                }
            }
        }

    }

    @if (ShowFields)
    {
        <h4>Fields</h4>



        @foreach (var field in fields.OrderBy(f => f.FieldName))
        {

            if (ShowField(field))
            {
                var existingFieldAccess = WorkingModel.FieldMap.Where(m => m.Field.FieldName == field.FieldName).FirstOrDefault();
                if (existingFieldAccess == null)
                {
                    <MudButton Color=Color.Secondary OnClick="()=>AddFieldAccess(field)">@SettingsLocalization[field.FieldName]</MudButton>
                }
            }
        }
        <MudDataGrid T="FieldAccessMapping"
                 MultiSelection="true"
                 Items="@WorkingModel.FieldMap.OrderBy(f => f.Field.FieldName)"
                 Filterable="true" 
                 Hideable="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Periodic Elements</MudText>
                <MudSpacer />

            </ToolBarContent>
           
            <Columns>
                <SelectColumn T="FieldAccessMapping" />
                <PropertyColumn Property="x => x.Field.FieldName" Title="Field" />
                <TemplateColumn>
                    <HeaderTemplate>
                        <MudSelect T="int" ValueChanged="@((value)=>{SetAllFieldAccessLevelsTo(value);})">
                            @foreach (FieldAccessLevel levelValue in FieldAccessLevels.Levels)
                            {
                                <MudSelectItem Value="levelValue.Id">@SettingsLocalization[levelValue.Name]</MudSelectItem>
                            }
                        </MudSelect>
                    </HeaderTemplate>
                    <CellTemplate>
                        <MudSelect T="int" @bind-Value="context.Item.FieldAccessLevelId">
                            @foreach (FieldAccessLevel levelValue in FieldAccessLevels.Levels)
                            {
                                <MudSelectItem Value="levelValue.Id">@SettingsLocalization[levelValue.Name]</MudSelectItem>
                            }
                        </MudSelect>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn>
                    <CellTemplate>
                        <AppCloseButton OnClick="()=>RemoveFieldAccess(context.Item)" />

                    </CellTemplate>
                </TemplateColumn>
            </Columns>

        </MudDataGrid>

        foreach (var field in WorkingModel.FieldMap.OrderBy(f => f.Field.FieldName))
        {



            <MudSelect Label="@field.Field.FieldName" T="int" @bind-Value="field.FieldAccessLevelId">
                @foreach (FieldAccessLevel levelValue in FieldAccessLevels.Levels)
                {

                    <MudSelectItem Value="levelValue.Id">@SettingsLocalization[levelValue.Name]</MudSelectItem>

                }
            </MudSelect>
            <AppCloseButton OnClick="()=>RemoveFieldAccess(field)" />



        }
    }
</Row>

@{
    string buttonLabel = SettingsLocalization["Create Access Level"];
    if (Model.Id > 0)
        buttonLabel = SettingsLocalization["Update Access Level"];
}
<MudButton Color=Color.Success Margin=Margin.IsAuto.OnX Disabled=SaveDisabled OnClick="CreateAccessLevel">@buttonLabel</MudButton>
@if (WorkingModel.Id != 0)
{
    <MudButton Color=Color.Error Margin=Margin.IsAuto.OnX OnClick="DeleteAccessLevel">@SettingsLocalization["Delete Access Level"]</MudButton>
}
@code {

    [Parameter]
    public EventCallback LevelsChanged { get; set; }
    ObjectAccessLevel? checkedValue;
    bool ShowFields
    {
        get
        {
            return WorkingModel.ObjectMap.AsQueryable().Any(om => om.ObjectAccessLevelId > ObjectAccessLevels.Deny.Id);
            foreach (var map in WorkingModel.ObjectMap)
            {
                if (map.ObjectAccessLevel != null)
                {
                    if (map.ObjectAccessLevel.Level > ObjectAccessLevels.Deny.Level)
                    {
                        return true;
                    }
                }
                if (map.ObjectAccessLevelId != 0)
                {
                    if (map.ObjectAccessLevelId > ObjectAccessLevels.Deny.Id)
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    [Parameter]
    public AccessLevel Model { get; set; } = new AccessLevel();

    public AccessLevel WorkingModel { get; set; } = new AccessLevel();

    IEnumerable<ActiveDirectoryField> fields = new List<ActiveDirectoryField>();
    IEnumerable<ObjectAction> actions = new List<ObjectAction>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Context = DbFactory.CreateDbContext();

        fields = Context.ActiveDirectoryFields.AsEnumerable();
        actions = Context.ObjectActionFlag.AsEnumerable();
        if (Model.Id > 0)
        {
            WorkingModel = Context.AccessLevels.Where(l => l.Id == Model.Id).FirstOrDefault();


        }
        else
        {
            WorkingModel = Model;
        }

    }

    private void CreateAccessLevel()
    {
        if (Context == null) return;

        bool addition = false;
        if (WorkingModel.Id == 0)
        {
            Context.AccessLevels.Add(WorkingModel);
            addition = true;
        }
        Context.SaveChanges();
        if (addition)
            WorkingModel = new();
        LevelsChanged.InvokeAsync();
        StateHasChanged();
    }

    private void AddObjectTypeAccess(object objectTypeIndex)
    {
        var typeEnum = (ActiveDirectoryObjectType)objectTypeIndex;
        if (typeEnum != null)
        {
            WorkingModel.ObjectMap.Add(new ObjectAccessMapping()
                {
                    ObjectType = typeEnum,
                    ObjectAccessLevelId = ObjectAccessLevels.Deny.Id
                });
        }
        StateHasChanged();
    }
    private void AddActionAccess(ObjectAction action, ActiveDirectoryObjectType type)
    {
        var proposedAddition = new ActionAccessMapping()
            {
                ObjectType = type,
                ObjectAction = action
            };
        if (WorkingModel.ActionMap == null)
            WorkingModel.ActionMap = new List<ActionAccessMapping>();

        WorkingModel.ActionMap.Add(proposedAddition);
        StateHasChanged();
    }
    private void RemoveActionAccess(ActionAccessMapping action)
    {
        WorkingModel.ActionMap.Remove(action);

        StateHasChanged();
    }
    private void AddFieldAccess(ActiveDirectoryField fieldToAdd)
    {

        WorkingModel.FieldMap.Add(new FieldAccessMapping()
            {
                Field = fieldToAdd,
                FieldAccessLevelId = FieldAccessLevels.Deny.Id
            });

        StateHasChanged();
    }
    private void RemoveFieldAccess(FieldAccessMapping fieldToRemove)
    {

        WorkingModel.FieldMap.Remove(fieldToRemove);

        StateHasChanged();
    }
    private void RemoveObjectTypeAccess(ObjectAccessMapping accessToRemove)
    {
        WorkingModel.ObjectMap.Remove(accessToRemove);

        InvokeAsync(StateHasChanged);
    }
    Task OnCheckedValueChanged(ObjectAccessLevel nl)
    {

        return Task.CompletedTask;
    }

    void SetObjectMapAccess(ObjectAccessMapping mapping, int accessIndex)
    {
        mapping.ObjectAccessLevelId = (int)accessIndex;
        StateHasChanged();

    }
    async Task DeleteAccessLevel()
    {
        WorkingModel.DeletedAt = DateTime.UtcNow;
        await Context.SaveChangesAsync();
        InvokeAsync(StateHasChanged);
    }
    private bool ShowField(ActiveDirectoryField field)
    {
        foreach (var map in WorkingModel.ObjectMap)
        {
            if (map.ObjectAccessLevelId != ObjectAccessLevels.Deny.Id)
            {

                return field.IsActionAppropriateForObject(map.ObjectType);
            }
        }
        return false;


    }

    async Task SetAllFieldAccessLevelsTo(int value)
    {
        if (value == null) return;
        WorkingModel.FieldMap.ForEach(fm =>

        {
            fm.FieldAccessLevelId = value;
        });
    }
}