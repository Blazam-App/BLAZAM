
@inherits AppComponentBase
@{
    var render = true;
}
<h3>OU Privilege Mapper</h3>
    <Row>


        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is4.OnWidescreen">
            <BLAZAM.Server.Shared.UI.OU.OUTreeView @bind-SelectedOU="selectedNode">
            <NodeContent>
                   @context.Name
                        @if (context.DirectPermissionMappings.Count() > 0)
                        {
                            <MudBadge Pill=true Color="Color.Primary">@context.DirectPermissionMappings.Count</MudBadge>
                        }
                        @if (context.OffspringPermissionMappings.Count() > 0)
                        {
                            <MudBadge Pill=true Color="Color.Success">@context.OffspringPermissionMappings.Count()</MudBadge>

                        }
            </NodeContent>
            </BLAZAM.Server.Shared.UI.OU.OUTreeView>
           
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is8.OnWidescreen">
            <OUPrivilegeEditor OU="selectedNode" />

        </Column>
    </Row>

@code {

    #nullable disable warnings
    MudTreeView<IADOrganizationalUnit> OUTree { get; set; }
    IADOrganizationalUnit selectedNode;
    IList<IADOrganizationalUnit> ExpandedNodes = new List<IADOrganizationalUnit>();
    HashSet<IADOrganizationalUnit> ApplicationBaseOUs = new HashSet<IADOrganizationalUnit>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Task.Run(async () =>
        {

            //ApplicationBaseOUs = Directory.OUs.FindSubOusByDN(null);
            ADOrganizationalUnit TopLevel = new ADOrganizationalUnit();
            await TopLevel.Parse(Directory.GetDirectoryEntry(), Directory);
            _ = TopLevel.Children;
            ApplicationBaseOUs.Add(TopLevel);

            ExpandedNodes.Add(TopLevel);
            selectedNode = TopLevel;
            while (OUTree == null)
                Task.Delay(50).Wait();
            OUTree.Items = ApplicationBaseOUs;
            LoadingData = false;
            await InvokeAsync(StateHasChanged);
        });
        InvokeAsync(StateHasChanged);

    }



    void test()
    {
        int[] numbers = new int[]{1,2,3,4,5,6};
        int[] newnumbers = new int[numbers.Length + 1];
        for (int x = 0; x < numbers.Length; x++)
        {
            newnumbers[x] = numbers[x];
        }
        numbers[numbers.Length - 1] = 7;





        List<int> numberList = new() { 1, 2, 3, 4, 5, 6 };
        numberList.Add(7);
        numberList.Remove(3);
        numberList.RemoveAt(5);
        numberList.Sort();
    }
}
