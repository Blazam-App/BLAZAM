@inherits AppComponentBase
<MudCard Elevation="2">
    <h3>OU Privilege Mapper</h3>


    <MudGrid>
        <MudItem xs="3">
            <BLAZAM.Server.Shared.UI.OU.OUTreeView @bind-SelectedOU="SelectedNode">
                <EndAdornment>
                    @if (@context.DirectPermissionMappings.Count() > 0)
                    {
                        <MudBadge Overlap Color="Color.Secondary" Content="@context.DirectPermissionMappings.Count()" Class="mx-6 my-4"></MudBadge>

                    }
                    @if (@context.OffspringPermissionMappings.Count() > 0)
                    {
                        <MudBadge Color="Color.Primary" Content="@context.OffspringPermissionMappings.Count()" Class="mx-6 my-4"></MudBadge>

                    }
                </EndAdornment>
            </BLAZAM.Server.Shared.UI.OU.OUTreeView>
        </MudItem>
        <MudItem xs="9">
            <OUPrivilegeEditor OU="SelectedNode" />
        </MudItem>
    </MudGrid>
</MudCard>
@code {

    #nullable disable warnings
    MudTreeView<IADOrganizationalUnit> OUTree { get; set; }
    IADOrganizationalUnit selectedNode;
    IADOrganizationalUnit SelectedNode
    {
        get => selectedNode; set
        {
            if (selectedNode == value) return;
            selectedNode = value;
            InvokeAsync(StateHasChanged);

        }
    }

    IList<IADOrganizationalUnit> ExpandedNodes = new List<IADOrganizationalUnit>();
    HashSet<IADOrganizationalUnit> ApplicationBaseOUs = new HashSet<IADOrganizationalUnit>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Task.Run(async () =>
        {

            //ApplicationBaseOUs = Directory.OUs.FindSubOusByDN(null);
            ADOrganizationalUnit TopLevel = new ADOrganizationalUnit();
            await TopLevel.Parse(Directory.GetDirectoryEntry(), Directory);
            _ = TopLevel.Children;
            ApplicationBaseOUs.Add(TopLevel);

            ExpandedNodes.Add(TopLevel);
            selectedNode = TopLevel;
            while (OUTree == null)
                Task.Delay(50).Wait();
            OUTree.Items = ApplicationBaseOUs;
            LoadingData = false;
            await InvokeAsync(StateHasChanged);
        });
        InvokeAsync(StateHasChanged);

    }



    void test()
    {
        int[] numbers = new int[] { 1, 2, 3, 4, 5, 6 };
        int[] newnumbers = new int[numbers.Length + 1];
        for (int x = 0; x < numbers.Length; x++)
        {
            newnumbers[x] = numbers[x];
        }
        numbers[numbers.Length - 1] = 7;





        List<int> numberList = new() { 1, 2, 3, 4, 5, 6 };
        numberList.Add(7);
        numberList.Remove(3);
        numberList.RemoveAt(5);
        numberList.Sort();
    }
}
