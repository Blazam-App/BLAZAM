@inherits AppModal
<Modal @ref="Modal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add Delegate</ModalTitle>
            <AppCloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Field>
                    <FieldLabel>User or Group</FieldLabel>
                    <ADAutoComplete SearchObjectType="ActiveDirectoryObjectType.All"
                                    @bind-SelectedResult=@selectedDelegate
                                    CustomResultsFilter="(result)=>result.ObjectType==ActiveDirectoryObjectType.User|| result.ObjectType==ActiveDirectoryObjectType.Group" />


                </Field>
                <Field>
                    <FieldLabel>Super User</FieldLabel>
                    <FieldHelp>Will have complete and total acceess to the application if enabled</FieldHelp>
                    <Switch TValue="bool" @bind-Checked="@NewPermissionDelegate.IsSuperAdmin" Disabled=Program.InDemoMode />
                </Field>
            </Row>
            <Row>
                <Button Color="Color.Primary" Clicked="AddGroup">Add</Button>

            </Row>


        </ModalBody>
    </ModalContent>
</Modal>
@code {

    IDirectoryModel selectedDelegate;
    [Parameter]
    public EventCallback DelegateAdded { get; set; }

    PermissionDelegate NewPermissionDelegate = new PermissionDelegate();
    private async void AddGroup()
    {
        try
        {
            NewPermissionDelegate.DelegateSid = selectedDelegate.SID;
            Context.PermissionDelegate.Add(NewPermissionDelegate);
            await Context.SaveChangesAsync();
            NewPermissionDelegate = new PermissionDelegate();
            await Modal?.Hide();
            await DelegateAdded.InvokeAsync();
        }catch(DbUpdateException ex)
        {
            switch (ex.InnerException?.HResult)
            {
                case -2146232060:
                    var confilctingDelegate = Context.PermissionDelegate.Where(pd=>pd.DelegateSid==selectedDelegate.SID).FirstOrDefault();
                    if(confilctingDelegate.DeletedAt==null)
                    await NotificationService.Error("That delegate already exists.");
                    else
                        await NotificationService.Error("That delegate already exists. It has been deleted. Restore it from the trash.");

                    break;
            }
        }
        catch(Exception ex)
        {
            await NotificationService.Error("An unexpected error has occured.");
        }

    }
}