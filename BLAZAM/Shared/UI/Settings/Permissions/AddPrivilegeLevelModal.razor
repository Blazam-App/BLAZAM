@inherits AppModal
<Modal @ref="Modal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add Delegate</ModalTitle>
            <AppCloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>
                <MudField>
                    <MudFieldLabel>User or Group</FieldLabel>
                    <ADAutoComplete SearchObjectType="ActiveDirectoryObjectType.All"
                                    @bind-SelectedResult=@selectedDelegate
                                    CustomResultsFilter="(result)=>result.ObjectType==ActiveDirectoryObjectType.User|| result.ObjectType==ActiveDirectoryObjectType.Group" />


                </MudField>
                <MudField>
                    <MudFieldLabel>Super User</FieldLabel>
                    <MudFieldHelp>Will have complete and total acceess to the application if enabled</FieldHelp>
                    <MudSwitch TValue="bool" @bind-Checked="@NewPermissionDelegate.IsSuperAdmin" Disabled=Program.InDemoMode />
                </MudField>
            </Row>
            <Row>
                <MudButton Color="Color.Primary" Clicked="AddGroup">Add</MudButton>

            </Row>


        </ModalBody>
    </ModalContent>
</Modal>
@code {

    IDirectoryEntryAdapter? selectedDelegate;
    [Parameter]
    public EventCallback DelegateAdded { get; set; }

    PermissionDelegate NewPermissionDelegate = new PermissionDelegate();
    private async void AddGroup()
    {
        try
        {
            if (Context == null) return;

            NewPermissionDelegate.DelegateSid = selectedDelegate.SID;
            Context.PermissionDelegate.Add(NewPermissionDelegate);
            await Context.SaveChangesAsync();
            NewPermissionDelegate = new PermissionDelegate();
            await Modal?.Hide();
            await DelegateAdded.InvokeAsync();
        }
        catch (DbUpdateException ex)
        {
            switch (ex.InnerException?.HResult)
            {
                case -2146232060:
                    var confilctingDelegate = Context.PermissionDelegate.Where(pd => pd.DelegateSid == selectedDelegate.SID).FirstOrDefault();
                    if (confilctingDelegate != null)
                        if (confilctingDelegate.DeletedAt == null)
                            await NotificationService.Error("That delegate already exists.");
                        else
                            await NotificationService.Error("That delegate already exists. It has been deleted. Restore it from the trash.");

                    break;
            }
        }
        catch (Exception ex)
        {

            Loggers.ActiveDirectryLogger.Error("Error attempting to add delegate " + selectedDelegate.CanonicalName);
            Loggers.ActiveDirectryLogger.Error(ex.Message, ex);
            await NotificationService.Error("An unexpected error has occured.");
        }

    }
}