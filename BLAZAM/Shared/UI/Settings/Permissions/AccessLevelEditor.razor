@inherits AppComponent

<Accordion>

    <Collapse Visible="@collapseVisible">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <Button Clicked="@(()=>collapseVisible = !collapseVisible)"><h3>@SettingsLocalization["Access Levels"]</h3></Button>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            <LoadingIndicator Visible=LoadingData>

                @if (CurrentAccessLevels != null)
                {
                    @foreach (AccessLevel ap in CurrentAccessLevels)
                    {

                        <ShowAccessLevel Model="ap" />
                    }
                }
                <Accordion>

                    <Collapse Visible="@addCollapseVisible">
                        <CollapseHeader>
                            <Heading Size="HeadingSize.Is5">
                                <Button Background=Background.Success TextColor=TextColor.Light Clicked="@(()=>addCollapseVisible = !addCollapseVisible)">@SettingsLocalization["Add New Access Level"]</Button>
                            </Heading>
                        </CollapseHeader>
                        <CollapseBody>

                            <EditAccessLevel LevelsChanged="Update" />


                        </CollapseBody>
                    </Collapse>
                </Accordion>
            </LoadingIndicator>

        </CollapseBody>
    </Collapse>
</Accordion>
@code {
    int x = 0;
    bool collapseVisible;
    bool addCollapseVisible;
    List<AccessLevel> CurrentAccessLevels;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CurrentAccessLevels = await Context.AccessLevels.ToListAsync();
        LoadingData = false;

    }
    async void Update()
    {
        CurrentAccessLevels = await  Context.AccessLevels.ToListAsync();
        await InvokeAsync(StateHasChanged);
    }
}