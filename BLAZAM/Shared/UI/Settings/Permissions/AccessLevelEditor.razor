@inherits AppComponentBase

<MudText Typo ="Typo.h1" Size="HeadingSize.Is3">
    @SettingsLocalization["Access Levels"]
</MudText>
<p> Access levels are a template of permissions that can be applied to specific OU's for specific delegates.</p>
<LoadingIndicator Visible=LoadingData>

    @if (CurrentAccessLevels != null)
    {
        @foreach (AccessLevel ap in CurrentAccessLevels)
        {

            <ShowAccessLevel Model="ap" />
        }
    }
    <Accordion>

        <Collapse Visible="@addCollapseVisible">
            <CollapseHeader>
                <MudText Typo ="Typo.h1" Size="HeadingSize.Is5">
                    <MudButton Background=Background.Success TextColor=Color.Light Clicked="@(()=>addCollapseVisible = !addCollapseVisible)">@SettingsLocalization["Add New Access Level"]</MudButton>
                </MudText>
            </CollapseHeader>
            <CollapseBody>

                <EditAccessLevel LevelsChanged="Update" />


            </CollapseBody>
        </Collapse>
    </Accordion>
</LoadingIndicator>

@code {
    bool addCollapseVisible;
    List<AccessLevel> CurrentAccessLevels=new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Update();

    }
    async void Update()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);

        CurrentAccessLevels = await Context.AccessLevels.Where(al => al.DeletedAt == null).ToListAsync();
        LoadingData = false;

        await InvokeAsync(StateHasChanged);
    }
}