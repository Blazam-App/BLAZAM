@inherits ValidatedForm
@inject IDbContextFactory<DatabaseContext> DbFactory
@if (Map != null)
{


    <Form @onsubmit="@Save">
        <Validations Model="Map" Mode="ValidationMode.Auto">
            <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">@SettingsLocalization["User Groups"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <Validation @ref="PrivValidation">
                    @if (!ReadOnly)
                        {


                            <Autocomplete TItem="PermissionDelegate"
                                  TValue="PermissionDelegate"
                                  FreeTyping=false
                                  MinLength=-1
                                  Data="@PermissionDelegates"
                                  TextField="@(( item ) => Directory.Groups.FindGroupBySID(item.DelegateSid)?.GroupName)"
                                  ValueField="@(( item ) => item)"
                                  Placeholder=@SettingsLocalization["Choose or Search..."]
                                  SelectionMode="AutocompleteSelectionMode.Checkbox"
                                  CloseOnSelection="false"
                                  @bind-SelectedValues="Map.PermissionDelegates"
                                  @bind-SelectedTexts="selectedPermissionDelegateNames" />
                            <ValidationError />
                        }
                        else
                        {
                            @if (selectedPermissionDelegateNames != null)
                            {
                                @foreach (var name in selectedPermissionDelegateNames)
                                {
                                    <Button Disabled Width=Width.Auto Flex=Flex.InlineFlex Color="Color.Secondary">@name</Button>
                                }
                            }
                        }

                    </Validation>

                </FieldBody>
            </Field>
            <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop">@SettingsLocalization["Access Levels"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <Validation @ref=AccValidation Validator="ValidationRule.IsNotEmpty">
                    @if (!ReadOnly)
                        {
                            <Autocomplete TItem="AccessLevel"
                                  TValue="AccessLevel"
                                  FreeTyping=false
                                  MinLength=-1
                                  Data="@accessLevels"
                                  TextField="@(( item ) => item.Name)"
                                  ValueField="@(( item ) => item)"
                                  Placeholder=@SettingsLocalization["Choose or Search..."]
                                  SelectionMode="AutocompleteSelectionMode.Checkbox"
                                  CloseOnSelection="false"
                                  @bind-SelectedValues="Map.AccessLevels"
                                  @bind-SelectedTexts="selectedAccessLevelNames"
                                  Disabled=ReadOnly />
                        }
                        else
                        {
                            @if (selectedAccessLevelNames != null)
                            {
                                @foreach (var name in selectedAccessLevelNames)
                                {
                                    <Button Disabled Width=Width.Auto Flex=Flex.InlineFlex Color="Color.Secondary">@name</Button>
                                }
                            }
                        }

                        <ValidationError />

                    </Validation>

                </FieldBody>
            </Field>
            @if (!ReadOnly)
            {
                <Button Color=Color.Success Disabled=saveDisabled Type="ButtonType.Submit">Save Mapping</Button>
                <AppCloseButton Clicked="DeleteMapping" />
            }
        </Validations>

    </Form>

    ValidateCheck();

}
@code {
    PermissionMap _map;
    [Parameter]
    public PermissionMap Map
    {
        get => _map; set
        {
            if (_map == value) return;

            _map = value;

            RefreshData();


        }
    }
    [Parameter]
    public EventCallback MappingDeleted{ get; set; }
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    Validation? PrivValidation;
    Validation? AccValidation;

    List<AccessLevel> accessLevels;
    List<PermissionDelegate> PermissionDelegates;
    List<string> selectedAccessLevelNames;
    List<string> selectedPermissionDelegateNames;
    protected override async Task OnInitializedAsync()
    {
        //Wait for a database connection
        await base.OnInitializedAsync();
        //try
        //{
        //    //Context.Attach( Map);

        //}
        //catch
        //{
        //}
        ////RefreshData();
        LoadingData = false;
        await RefreshData();
    }

    async Task RefreshData()
    {

        if (!LoadingData)
        {
            LoadingData = true;

            //Context = await DbFactory.CreateDbContextAsync();
            if (Context != null)
            {
                if (Map.PrivilegeMapId != 0)
                {
                    Map = Context.PrivilegeMap.Include(m => m.PrivilegeLevels).Where(pm => pm.PrivilegeMapId == Map.PrivilegeMapId).FirstOrDefault();
                }
                accessLevels = await Context.AccessLevels.ToListAsync();
                privilegeLevels = await Context.PrivilegeLevel.Where(p => !p.IsSuperAdmin).ToListAsync();
                if (Map.PrivilegeMapId != 0)
                {
                    selectedAccessLevelNames = Map.AccessLevels.Select(a => a.Name).ToList();
                    selectedPrivilegeLevelNames = Map.PrivilegeLevels.Select(a => Directory.Groups.FindGroupBySID(a.GroupSID).GroupName).ToList();
                }
                await InvokeAsync(StateHasChanged);
            }

        }
        LoadingData = false;

    }
    async Task DeleteMapping()
    {
        if (Map.PermissionMapId == 0)
        {
            Map = null;
        }

        else
        {
            Context.PermissionMap.Remove(Map);
            await Context.SaveChangesAsync();
        }
        await InvokeAsync(StateHasChanged);
        await NotificationService.Success("Mapping deleted");
        await MappingDeleted.InvokeAsync();

    }
    async Task Save()
    {
        if (Map.PermissionMapId == 0)
            Context.PermissionMap.Add(Map);
        var result = Context.SaveChanges();
        await InvokeAsync(StateHasChanged);
        await NotificationService.Success("Mapping saved");

    }
    async void ValidateCheck()
    {
        if (PrivValidation != null && !ReadOnly)
        {
            if (Map != null)
            {
                if (Map.PermissionDelegates == null || Map.PermissionDelegates?.Count < 1)
                    PrivValidation.Status = ValidationStatus.Error;
                else
                    PrivValidation.Status = ValidationStatus.Success;
                if (Map.AccessLevels == null || Map.AccessLevels?.Count < 1)
                    AccValidation.Status = ValidationStatus.Error;
                else
                    AccValidation.Status = ValidationStatus.Success;
                if (AccValidation.Status == ValidationStatus.Success && PrivValidation.Status == ValidationStatus.Success)
                    saveDisabled = false;
                else
                    saveDisabled = true;
            }
        }
    }
}