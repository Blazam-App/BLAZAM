@inherits ValidatedForm
@inject AppDatabaseFactory DbFactory
@if (Map != null)
{


    <MudForm @onsubmit="@Save">

        @if (!ReadOnly)
        {

            <MudSelectList Values=@PermissionDelegates
                   Placeholder=@SettingsLocalization["Choose or Search..."]
                   T="PermissionDelegate"
                   ToStringFunc="item=>Directory.Groups.FindGroupBySID(item?.DelegateSid)?.GroupName"
                   Label="@SettingsLocalization["Delegates"]"
                              MultiSelection
                   @bind-Text=@selectedPermissionDelegateNames
                   @bind-SelectedValues=@Map.PermissionDelegates />

        }
        else
        {
            @if (selectedPermissionDelegateNames != null)
            {
                @foreach (var name in selectedPermissionDelegateNames)
                {
                    <MudButton Disabled Width=Width.Auto Flex=Flex.InlineFlex Color="Color.Secondary">@name</MudButton>
                }
            }
        }

        @if (!ReadOnly)
        {

            <MudSelectList Values=@accessLevels
                   Placeholder=@SettingsLocalization["Choose or Search..."]
                   T="AccessLevel"
                   ToStringFunc="item=>item?.Name"
                   Label="@SettingsLocalization["Access Levels"]"
                   @bind-Text=@selectedAccessLevelNames
                              MultiSelection
                   @bind-SelectedValues=@Map.AccessLevels />

        }
        else
        {
            @if (selectedAccessLevelNames != null)
            {
                @foreach (var name in selectedAccessLevelNames)
                {
                    <MudButton Disabled Width=Width.Auto Flex=Flex.InlineFlex Color="Color.Secondary">@name</MudButton>
                }
            }
        }


        @if (!ReadOnly)
        {
            <MudButton Color=Color.Success Disabled=SaveDisabled ButtonType="ButtonType.Submit">Save Mapping</MudButton>
            <AppCloseButton OnClick="DeleteMapping" />
        }


    </MudForm>

    ValidateCheck();

}
@code {
#nullable disable warnings
    PermissionMapping? _map;
    [Parameter]
    public PermissionMapping? Map
    {
        get => _map; set
        {
            if (_map == value) return;

            _map = value;

            RefreshData();


        }
    }
    [Parameter]
    public EventCallback MappingDeleted { get; set; }
    [Parameter]
    public bool ReadOnly { get; set; } = false;



    List<AccessLevel> accessLevels;
    List<PermissionDelegate> PermissionDelegates;
    string selectedAccessLevelNames;
    string selectedPermissionDelegateNames;
    protected override async Task OnInitializedAsync()
    {
        //Wait for a database connection
        await base.OnInitializedAsync();

        LoadingData = false;
        await RefreshData();
    }

    async Task RefreshData()
    {

        if (!LoadingData)
        {
            if (Map == null) return;

            LoadingData = true;

            if (Context != null)
            {
                if (Map.Id != 0)
                {
                    Map = Context.PermissionMap.Include(m => m.PermissionDelegates).Where(pm => pm.Id == Map.Id).FirstOrDefault();
                }
                accessLevels = await Context.AccessLevels.ToListAsync();
                PermissionDelegates = await Context.PermissionDelegate.Where(p => !p.IsSuperAdmin).ToListAsync();
                if (Map.Id != 0)
                {
                    string concatenatd = "";

                    Map.AccessLevels.Select(a => a.Name).ToList().ForEach(s =>
                    {
                        concatenatd += s + ", ";

                    });
                    if (concatenatd != "")

                        concatenatd = concatenatd.Substring(0, concatenatd.Length - 2);

                    selectedAccessLevelNames = concatenatd;
                    concatenatd = "";
                    Map.PermissionDelegates.Select(
                         a => Directory.GetDirectoryModelBySid(a.DelegateSid).CanonicalName)
                         .ToList().ForEach(s =>
                         {
                             concatenatd += s + ", ";

                         });
                    if (concatenatd != "")
                        concatenatd = concatenatd.Substring(0, concatenatd.Length - 2);

                    selectedPermissionDelegateNames = concatenatd;
                }
            }

        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }
    async Task DeleteMapping()
    {
        if (Map.Id == 0)
        {
            Map = null;
        }

        else
        {
            Context.PermissionMap.Remove(Map);
            await Context.SaveChangesAsync();
        }
        await InvokeAsync(StateHasChanged);
        SnackBarService.Success("Mapping deleted");
        await MappingDeleted.InvokeAsync();

    }
    new async Task Save()
    {
        if (Map.Id == 0)
            Context.PermissionMap.Add(Map);
        var result = Context.SaveChanges();
        await InvokeAsync(StateHasChanged);
        SnackBarService.Success("Mapping saved");

    }
    void ValidateCheck()
    {
        /*
        if (PrivValidation != null && AccValidation!=null && !ReadOnly)
        {
            if (Map != null)
            {
                if (Map.PermissionDelegates == null || Map.PermissionDelegates?.Count < 1)
                    PrivValidation.Status = ValidationStatus.Error;
                else
                    PrivValidation.Status = ValidationStatus.Success;
                if (Map.AccessLevels == null || Map.AccessLevels?.Count < 1)
                    AccValidation.Status = ValidationStatus.Error;
                else
                    AccValidation.Status = ValidationStatus.Success;
                if (AccValidation.Status == ValidationStatus.Success && PrivValidation.Status == ValidationStatus.Success)
                    SaveDisabled = false;
                else
                    SaveDisabled = true;
            }
        }
        */
    }
}