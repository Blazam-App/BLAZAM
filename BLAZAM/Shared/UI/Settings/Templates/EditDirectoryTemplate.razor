@using System.Text.RegularExpressions;
@using BLAZAM.Common.Extensions;
@inherits ValidatedForm

<EditForm OnSubmit="SaveTemplate" Model="DirectoryTemplate">
    <Row Width="Width.Is100" Margin="Margin.Is2">
        

            <MudTextField Label="@SettingsLocalization["Template Name"]" @bind-Value=DirectoryTemplate.Name>



            </MudTextField>

        

        
            <MudText>
                @SettingsLocalization["Template Category"]
            </MudText>
                <MudAutocomplete T="string" Label="US States" @bind-Value="DirectoryTemplate.Category" SearchFunc="@SearchCategories"
                                 ResetValueOnEmptyText="false"
                                 CoerceText="true" CoerceValue="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
             

        
        <MudCard>
            Variables:
            <Row Width="Width.Is100">
                <Column ColumnSize="ColumnSize.Is6.OnTablet">
                    <Code>{fn}</Code>:First Name<br />
                    <Code>{fi}</Code>:First Initial<br />
                    <Code>{mn}</Code>:Middle Name<br />
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnTablet">

                    <Code>{mi}</Code>:Middle Initial<br />
                    <Code>{ln}</Code>:Last Name<br />
                    <Code>{li}</Code>:Last Initial<br />
                </Column>
                <Column ColumnSize="ColumnSize.Is6.OnTablet">

                    <Code>{AlphaNum[:u/l]}</Code>:Random letter or number (optional force uppercase/lowercase)<br />
                    <Code>{Alpha[:u/l]}</Code>:Random letter (optional force uppercase/lowercase)<br />
                    <Code>{Num}</Code>:Random number<br />
                </Column>

            </Row>
        </MudCard>
        <Section Padding=Padding.Is0 Title="Account and Name">


            

                <MudTextField Label="Username Format" @bind-Value=DirectoryTemplate.UsernameFormula>



                </MudTextField>

            
            

                <MudTextField Label="Display Name Format" @bind-Value=DirectoryTemplate.DisplayNameFormula>



                </MudTextField>

            

            

                    <MudTextField Label="Password" Placeholder="{AlphaNum}{Alpha:U}{Alpha:L}{Num}{Num}{Num}" @bind-Value=DirectoryTemplate.PasswordFormula>



                    </MudTextField>

            



        </Section>
        <Section Padding=Padding.Is0 Title="Fields">
            <Column ColumnSize="ColumnSize.Is8">
                <Help Display="Display.InlineFlex">
                    Fields left blank will be editable by the user on creation.
                    Fields with values will not be editable.
                </Help>
            </Column>
            <Column ColumnSize="ColumnSize.Is4">
                <Dropdown Display="Display.InlineFlex">
                    <DropdownToggle Color="Color.Primary">
                        Add Field
                    </DropdownToggle>
                    <DropdownMenu>
                        @foreach (var field in fields.OrderBy(f => f.DisplayName))
                        {
                            @if (field.FieldName != "samaccountname" &&
                           field.FieldName != "userPrincipalName" &&

                           field.FieldName != "sn" &&
                           field.FieldName != "givenname" &&
                           field.FieldName != "middleName" &&
                           field.FieldName != "displayName" &&
                           field.FieldName != "cn" &&
                           field.FieldName != "site" &&
                           field.FieldName != "distinguishedName" &&
                           field.FieldName != "memberOf" &&
                           field.FieldName != "objectSID" &&
                           !DirectoryTemplate.FieldValues.Any(f => f.Field.Equals(field)) &&
                           field.IsActionAppropriateForObject(DirectoryTemplate.ObjectType))
                            {
                                <MudMenuItem OnClick=@(()=>{DirectoryTemplate.FieldValues.Add(new(){ Field=field});}) Color="Color.Secondary">@field.DisplayName</MudMenuItem>

                            }

                        }

                    </DropdownMenu>
                </Dropdown>
            </Column>


            @foreach (var field in DirectoryTemplate.FieldValues.OrderBy(fv => fv.Field.DisplayName))
            {
                
                        <Row>


                                <MudTextField Label="@field.Field.DisplayName" @bind-Value=field.Value />

                                <AppCloseButton OnClick=@(()=>{DirectoryTemplate.FieldValues.Remove(field);InvokeAsync(StateHasChanged);}) />
                        </Row>
                
            }
        </Section>
        
                @if (SelectedOU != null)
                {

                    <BLAZAM.Server.Shared.UI.OU.OUTreeView Label=@(SettingsLocalization["OU"]+": @SelectedOU?.CanonicalName") StartRootExpanded=false @bind-SelectedOU=@SelectedOU @bind-StartingSelectedOU=@SelectedOU>
                        <NodeContent Context="ouContext">
                            @ouContext.Name
                        </NodeContent>
                    </BLAZAM.Server.Shared.UI.OU.OUTreeView>


                }

        
        


                <ADAutoComplete Label="@SettingsLocalization["Groups"]" Multiple @bind-SelectedResults="@SelectedGroups" />


        
    </Row>

    @{
        string buttonText = "";
        @if (DirectoryTemplate.Id == 0)
        {
            buttonText = "Add this template";
        }
        else
        {
            buttonText = "Save this template";
        }
    }
    <MudButton Disabled=saveDisabled Color="Color.Success" ButtonType="ButtonType.Submit">@buttonText</MudButton>
    @if (DirectoryTemplate.Id == 0)
    {
        <MudButton Color="Color.Warning" OnClick="@(()=>{ DirectoryTemplate=null;})">Cancel</MudButton>

    }
</EditForm>


@code {
    #nullable disable warnings
    bool ouCollapseVisible = true;
    //Validations? validations;
    List<ActiveDirectoryField> fields = new();

    List<TemplateVariable> usernameVariables = new List<TemplateVariable>()
    {

        new TemplateVariable(){DisplayName="First Name", Value="{fn}"},
        new TemplateVariable(){DisplayName="First Initial", Value="{fi}"},
        new TemplateVariable(){DisplayName="Middle Name", Value="{mn}"},
        new TemplateVariable(){DisplayName="Middle Initial", Value="{mi}"},
        new TemplateVariable(){DisplayName="Last Name", Value="{ln}"},
        new TemplateVariable(){DisplayName="Last Initial", Value="{li}"},

    };

    List<string> selectedUsernameFormatValues { get; set; } = new();





    public DirectoryTemplate _template;

    [Parameter]
    public DirectoryTemplate DirectoryTemplate
    {
        get => _template; set
        {
            if (_template == value) return;
            _template = value;
            LoadData();
            DirectoryTemplateChanged.InvokeAsync(value);

        }
    }

    [Parameter]
    public EventCallback<DirectoryTemplate> DirectoryTemplateChanged { get; set; }


    async Task LoadData()
    {
        if (Context == null) await OnInitializedAsync();
        var matching = await Context.DirectoryTemplates.Where(dt => dt.Id == DirectoryTemplate.Id).FirstOrDefaultAsync();
        if (matching != null)
            DirectoryTemplate = matching;
        SelectedOU = (await Directory.OUs.FindOuByStringAsync(DirectoryTemplate.ParentOU)).FirstOrDefault();
        if (SelectedOU == null)
        {
            SelectedOU = await Directory.OUs.GetApplicationRootOU();
        }
        fields = await Context.ActiveDirectoryFields.ToListAsync();

        await RefreshGroups();
        await InvokeAsync(StateHasChanged);

    }




    IADOrganizationalUnit SelectedOU;


    List<IDirectoryEntryAdapter> SelectedGroups = new();

    async Task<IEnumerable<string>> SearchCategories(string searchTerm)
    {
        return Context.DirectoryTemplates.Select(t => t.Category).Distinct().Where(s => s.Contains(searchTerm) || s.Equals(searchTerm));
    }


    async Task RefreshGroups()
    {
        SelectedGroups.Clear();
        if (DirectoryTemplate != null)
        {
            foreach (var sid in DirectoryTemplate.AssignedGroupSids)
            {
                var temp = Directory.Groups.FindGroupBySID(sid.GroupSid);
                if (temp != null)
                    SelectedGroups.Add(temp);
            }
        }
    }
    async Task SaveTemplate()
    {
        if (Context == null) throw new ApplicationException("Database not available");

        DirectoryTemplate.ParentOU = SelectedOU.DN;
        DirectoryTemplate.AssignedGroupSids.Clear();
        foreach (var group in SelectedGroups)
        {
            var existing = Context.DirectoryTemplateGroups.Where(g => g.GroupSid == group.SID.ToSidString()).FirstOrDefault();
            if (existing == null)
                existing = new DirectoryTemplateGroup() { GroupSid = group.SID.ToSidString() };
            DirectoryTemplate.AssignedGroupSids.Add(existing);
        }
        List<DirectoryTemplateFieldValue> replaceValues = new();
        foreach (var field in DirectoryTemplate.FieldValues)
        {
            var trackedField = Context.ActiveDirectoryFields.Where(f => f.Equals(field.Field)).FirstOrDefault();
            if (trackedField != null)
            {
                var replaceWith = new DirectoryTemplateFieldValue
                    {
                        Field = trackedField,
                        Value = field.Value
                    };
                replaceValues.Add(replaceWith);
            }
        }
        DirectoryTemplate.FieldValues = replaceValues;

        if (DirectoryTemplate.Id == 0)
        {
            try
            {
                await Context.DirectoryTemplates.AddAsync(DirectoryTemplate);

                var result = await Context.SaveChangesAsync();
                if (result > 0)
                {
                    SnackBarService.Success("", DirectoryTemplate.Name + " was added.");
                    // DirectoryTemplate = new();

                }
            }
            catch (DbUpdateException ex)
            {
                switch (ex.InnerException?.HResult)
                {
                    case -2146232060:
                        SnackBarService.Error("Each template must be uniquely named.", "Duplicate Template Name");

                        break;
                }
            }
            catch (SqlException ex)
            {

                Loggers.DatabaseLogger.Error("Error attempting to save creation template " + _template.Name);
                Loggers.DatabaseLogger.Error(ex.Message, ex);
            }
        }
        else
        {
            var result = await Context.SaveChangesAsync();
            if (result > 0)
            {
                SnackBarService.Success("Template changes saved");
            }
            else
            {
                SnackBarService.Warning("No changes");

            }
        }

    }

    class TemplateVariable
    {
        public string? DisplayName { get; set; }
        public string? Value { get; set; }
    }
}
