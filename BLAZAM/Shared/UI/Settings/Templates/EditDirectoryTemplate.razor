@using System.Text.RegularExpressions;
@using BLAZAM.Common.Extensions;
@inherits ValidatedForm

<EditForm OnValidSubmit="SaveTemplate" Model="DirectoryTemplate">
    <MudStack>


        <MudTextField Label="@SettingsLocalization["Template Name"]"
                      @bind-Value=DirectoryTemplate.Name />

        <MudAutocomplete CoerceValue SearchFunc="SearchCategories"
                         @bind-Value=DirectoryTemplate.Category
                         Label="@SettingsLocalization["Template Category"]" />



        <MudCard>
            Variables:
            <MudStack Row=true>
                <code>{fn}</code>:First Name<br />
            </MudStack>
            <MudStack Row=true>

                <code>{fi}</code>:First Initial<br />
            </MudStack>
            <MudStack Row=true>
                <code>{mn}</code>:Middle Name<br />
            </MudStack>
            <MudStack Row=true>
                <code>{mi}</code>:Middle Initial<br />
            </MudStack>
            <MudStack Row=true>
                <code>{ln}</code>:Last Name<br />
            </MudStack>
            <MudStack Row=true>
                <code>{li}</code>:Last Initial<br />
            </MudStack>
            <MudStack Row=true>
                <code>{AlphaNum[:u/l]}</code>:Random letter or number (optional force uppercase/lowercase)<br />
            </MudStack>
            <MudStack Row=true>
                <code>{Alpha[:u/l]}</code>:Random letter (optional force uppercase/lowercase)<br />
            </MudStack>
            <MudStack Row=true>
                <code>{Num}</code>:Random number<br />

            </MudStack>
        </MudCard>
        <Section Title="Account and Name">



            <MudElement Class="d-flex flex-wrap gap-5">
                <MudTextField Label="Username Format"
                              @bind-Value=DirectoryTemplate.UsernameFormula />

                <MudTextField Label="Display Name Format"
                              @bind-Value=DirectoryTemplate.DisplayNameFormula />

                <MudTextField Label="Password"
                              Placeholder="{AlphaNum}{Alpha:U}{Alpha:L}{Num}{Num}{Num}"
                              @bind-Value=DirectoryTemplate.PasswordFormula />

            </MudElement>

        </Section>
        <Section Title="Fields">


            <MudDrawerContainer Class="mud-height-full" Style="min-height:200px">
                <MudDrawer @bind-Open="@open" Elevation="0" Variant="@DrawerVariant.Persistent">
                    <MudNavMenu>
                        <MudStack>
                            @foreach (var field in fields.OrderBy(f => f.DisplayName))
                            {
                                @if (field.FieldName != "samaccountname" &&
                               field.FieldName != "userPrincipalName" &&

                               field.FieldName != "sn" &&
                               field.FieldName != "givenname" &&
                               field.FieldName != "middleName" &&
                               field.FieldName != "displayName" &&
                               field.FieldName != "cn" &&
                               field.FieldName != "site" &&
                               field.FieldName != "distinguishedName" &&
                               field.FieldName != "memberOf" &&
                               field.FieldName != "objectSID" &&
                               !DirectoryTemplate.FieldValues.Any(f => f.Field.Equals(field)) &&
                               field.IsActionAppropriateForObject(DirectoryTemplate.ObjectType))
                                {
                                    <MudButton OnClick=@(()=>{
                                       DirectoryTemplate.FieldValues.Add(new(){ Field=field});
                                       })>@field.DisplayName</MudButton>

                                }

                            }
                        </MudStack>

                    </MudNavMenu>
                </MudDrawer>
                <div class="d-flex justify-center align-center mud-height-full">
                    <MudStack>
                        Fields left blank will be editable by the user on creation.
                        Fields with values will not be editable.
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>{open=!open;})">Persistent drawer</MudButton>

                        @foreach (var field in DirectoryTemplate.FieldValues.OrderBy(fv => fv.Field.DisplayName))
                        {

                            <MudStack Row=true>


                            <MudTextField Label="@field.Field.DisplayName" @bind-Value=field.Value />

                            <AppCloseButton OnClick=@(()=>{DirectoryTemplate.FieldValues.Remove(field);InvokeAsync(StateHasChanged);}) />
                        </MudStack>

                        }
                    </MudStack>
                </div>
            </MudDrawerContainer>

        </Section>

        <Section Title="Organizational Unit">

       @*     @if (SelectedOU != null)
            {
*@
                <OUTreeView Label=@(SettingsLocalization["OU"]+": "+ SelectedOU?.CanonicalName)
                
                        StartRootExpanded=false
                        @bind-SelectedOU=@SelectedOU
                        @bind-StartingSelectedOU=@SelectedOU />


            @*}*@

        </Section>
        <Section Title="Assigned Groups">


            @foreach (var group in TemplateGroups)
            {
                <MudText>@group</MudText>
            }
            <MudStack Row=true>
                <ADAutoComplete Label="@SettingsLocalization["Groups"]"
                                    Multiple
                                @bind-SelectedResult="@SelectedGroup" />
                <MudFab Size="Size.Small" Icon=@Icons.Material.Filled.Add
                        Color="Color.Primary"
                        OnClick="@(()=>{TemplateGroups.Add(SelectedGroup);})" />
                </MudStack>

                </Section>

                </MudStack>

                @{
        string buttonText = "";
        @if (DirectoryTemplate.Id == 0)
        {
            buttonText = "Add this template";
        }
        else
        {
            buttonText = "Save this template";
        }
    }
    <MudButton Disabled=SaveDisabled Color="Color.Success" ButtonType="ButtonType.Submit">@buttonText</MudButton>
    @if (DirectoryTemplate.Id == 0)
    {
        <MudButton Color="Color.Warning" OnClick="@(()=>{ DirectoryTemplate=new();})">Cancel</MudButton>

    }
</EditForm>


@code {
    string groupText;
    bool open;
#nullable disable warnings
    bool ouCollapseVisible = true;
    //Validations? validations;
    List<ActiveDirectoryField> fields = new();

    List<TemplateVariable> usernameVariables = new List<TemplateVariable>()
    {

        new TemplateVariable(){DisplayName="First Name", Value="{fn}"},
        new TemplateVariable(){DisplayName="First Initial", Value="{fi}"},
        new TemplateVariable(){DisplayName="Middle Name", Value="{mn}"},
        new TemplateVariable(){DisplayName="Middle Initial", Value="{mi}"},
        new TemplateVariable(){DisplayName="Last Name", Value="{ln}"},
        new TemplateVariable(){DisplayName="Last Initial", Value="{li}"},

    };

    List<string> selectedUsernameFormatValues { get; set; } = new();





    public DirectoryTemplate _template;

    [Parameter]
    public DirectoryTemplate DirectoryTemplate
    {
        get => _template; set
        {
            if (_template == value) return;
            _template = value;
            LoadData();
            DirectoryTemplateChanged.InvokeAsync(value);

        }
    }

    [Parameter]
    public EventCallback<DirectoryTemplate> DirectoryTemplateChanged { get; set; }


    async Task LoadData()
    {
        if (Context == null) await OnInitializedAsync();
        var matching = await Context.DirectoryTemplates.Where(dt => dt.Id == DirectoryTemplate.Id).FirstOrDefaultAsync();
        if (matching != null)
            DirectoryTemplate = matching;
        SelectedOU = (await Directory.OUs.FindOuByStringAsync(DirectoryTemplate.ParentOU)).FirstOrDefault();
        //if (SelectedOU == null)
        //{
        //    SelectedOU = await Directory.OUs.GetApplicationRootOU();
        //}
        fields = await Context.ActiveDirectoryFields.ToListAsync();

        await RefreshGroups();
        await InvokeAsync(StateHasChanged);

    }




    IADOrganizationalUnit SelectedOU;


    IDirectoryEntryAdapter SelectedGroup;
    List<IDirectoryEntryAdapter> TemplateGroups = new();

    async Task<IEnumerable<string>> SearchCategories(string? searchTerm)
    {
        var categories = Context.DirectoryTemplates.Select(t => t.Category).Distinct();
        if (searchTerm.IsNullOrEmpty()) return categories;
        return categories.Where(s => s.Contains(searchTerm) || s.Equals(searchTerm));
    }


    async Task RefreshGroups()
    {
        TemplateGroups.Clear();
        if (DirectoryTemplate != null)
        {
            foreach (var sid in DirectoryTemplate.AssignedGroupSids)
            {
                var temp = Directory.Groups.FindGroupBySID(sid.GroupSid);
                if (temp != null)
                    TemplateGroups.Add(temp);
            }
        }
    }
    async Task SaveTemplate()
    {
        if (Context == null) throw new ApplicationException("Database not available");

        DirectoryTemplate.ParentOU = SelectedOU.DN;
        DirectoryTemplate.AssignedGroupSids.Clear();

        foreach (var group in TemplateGroups)
        {
            var existing = Context.DirectoryTemplateGroups.Where(g => g.GroupSid == group.SID.ToSidString()).FirstOrDefault();
            if (existing == null)
                existing = new DirectoryTemplateGroup() { GroupSid = group.SID.ToSidString() };
            DirectoryTemplate.AssignedGroupSids.Add(existing);
        }
        List<DirectoryTemplateFieldValue> replaceValues = new();

        foreach (var field in DirectoryTemplate.FieldValues)
        {
            var trackedField = Context.ActiveDirectoryFields.Where(f => f.Equals(field.Field)).FirstOrDefault();
            if (trackedField != null)
            {
                var replaceWith = new DirectoryTemplateFieldValue
                    {
                        Field = trackedField,
                        Value = field.Value
                    };
                replaceValues.Add(replaceWith);
            }
        }
        DirectoryTemplate.FieldValues = replaceValues;

        if (DirectoryTemplate.Id == 0)
        {
            try
            {
                await Context.DirectoryTemplates.AddAsync(DirectoryTemplate);

                var result = await Context.SaveChangesAsync();
                if (result > 0)
                {
                    SnackBarService.Success("", DirectoryTemplate.Name + " was added.");
                    // DirectoryTemplate = new();

                }
            }
            catch (DbUpdateException ex)
            {
                switch (ex.InnerException?.HResult)
                {
                    case -2146232060:
                        SnackBarService.Error("Each template must be uniquely named.", "Duplicate Template Name");

                        break;
                }
            }
            catch (SqlException ex)
            {

                Loggers.DatabaseLogger.Error("Error attempting to save creation template " + _template.Name);
                Loggers.DatabaseLogger.Error(ex.Message, ex);
            }
        }
        else
        {
            var result = await Context.SaveChangesAsync();
            if (result > 0)
            {
                SnackBarService.Success("Template changes saved");
            }
            else
            {
                SnackBarService.Warning("No changes");

            }
        }

    }

    class TemplateVariable
    {
        public string? DisplayName { get; set; }
        public string? Value { get; set; }
    }
}
