@inherits AppComponentBase

<MudStack Row>
        <MudSelectList
            T="string"
            Values="categories"
            @bind-Text=SelectedCategory
            />
      
            @SelectedCategory
@*
        <ListView TItem="DirectoryTemplate"
                  Data="SavedTemplates"
                  TextField="(item)=>item.Name"
                  ValueField="(item)=>item.Name"
                  Mode="ListGroupMode.Selectable"
                  MaxHeight="400px"
                  SelectedItemChanged=@((v)=>{SelectedTemplate=v;})>

            <ItemTemplate>
                <div>
                    @context.Item.Name
                </div>
               
            </ItemTemplate>
        </ListView>*@
        @if (SelectedTemplate != null)
        {
            <MudButton OnClick=@(()=>{DuplicateTemplate(SelectedTemplate);}) Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.FileCopy" /></MudButton>
        }
        <div>
            <h6>Users granted this template</h6>

        </div>
        @if (SelectedTemplate != null)
        {
            <EditDirectoryTemplate DirectoryTemplate="SelectedTemplate"  />

        }
</MudStack>
@code {
#nullable disable warnings
    string _selectedCategory;
    string SelectedCategory
    {
        get => _selectedCategory; set
        {
            _selectedCategory = value;
            UpdateTemplateList();

        }
    }
    IEnumerable<string> categories = new List<string>() { null };

    IEnumerable<DirectoryTemplate> categorizedTemplates { get; set; } = new List<DirectoryTemplate>();

    DirectoryTemplate _selectedTemplate;
    DirectoryTemplate SelectedTemplate
    {
        get => _selectedTemplate; set
        {
            if (_selectedTemplate == value) return;
            _selectedTemplate = value;
           // if(value!=null){
               // var availableGroups = Context.PermissionMap.Where(pm => pm.OU.Contains(value.ParentOU) && pm.AccessLevels.Any(al => al.ActionMap.Any(am => am.ObjectType == ActiveDirectoryObjectType.User && am.ObjectAction.ActionAccessFlagId == ActionAccessFlags.Create.ActionAccessFlagId))).ToList();
          //  }
        }
    }
    IEnumerable<DirectoryTemplate>? SavedTemplates { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        categories.Concat(DbFactory.CreateDbContext().DirectoryTemplates.Where(t => t.Category != null && t.Category != "").Select(t => t.Category).Distinct());
        await UpdateTemplateList();

        await InvokeAsync(StateHasChanged);
    }
    async Task UpdateTemplateList()
    {
        if (Context == null) return;

        if (SelectedCategory == null)
            SavedTemplates = await Context.DirectoryTemplates.ToListAsync();
        else
            SavedTemplates = await Context.DirectoryTemplates.Where(t => t.Category.Contains(SelectedCategory)).ToListAsync();
        await InvokeAsync(StateHasChanged);
    }
    async Task DuplicateTemplate(DirectoryTemplate template)
    {
        SelectedTemplate = (DirectoryTemplate)template.Clone();
        await InvokeAsync(StateHasChanged);

    }
}
