@inherits AppComponentBase


<code>
    Working Directory: @Program.RootDirectory
</code>
<code>
    PID: @Program.ApplicationProcess.Id
</code>
@if (AutoUpdateService.IsUpdatedScheduled)
{
    <Alert>
        <AlertMessage>@SettingsLocalization["Update Scheduled"]</AlertMessage>
        <AlertDescription>
            The application will be updated to version @AutoUpdateService.ScheduledUpdate.Version at @AutoUpdateService.ScheduledUpdateTime
        </AlertDescription>
    </Alert>
}
@if (LoadingData)
{
    <MudText>Checking for update..</MudText>

}

<LoadingIndicator Visible=LoadingData>
    <MudButton Color="Color.Primary" OnClick=@GetLatestUpdate>Refresh Latest Update</MudButton>

    @{
        if (LatestAvailableVersion != null)
        {
            var value = updateStage;
            switch (updateStage)
            {
                case UpdateStage.Downloading:
                    <MudText>Downloading Update...</MudText>
                    @if (DownladProgress != null)
                    {

                        <MudProgressLinear Value="@DownladProgress.FilePercentage">
                            @(DownladProgress?.CompletedBytes / 1024 / 1024)MB
                        </MudProgressLinear>
                    }
                    <MudButton Color=Color.Error OnClick=@(()=>{ LatestAvailableVersion.Cancel(); })>Cancel</MudButton>
                    break;
                case UpdateStage.Staging:
                    <MudText>Staging update, please wait a moment...</MudText>
                    <MudProgressLinear Animated Striped />
                    break;
                case UpdateStage.BackingUp:
                    <MudText>Backing up current version, please wait a moment...</MudText>
                    <MudProgressLinear Animated Striped />

                    break;
                case UpdateStage.Applying:
                    <MudText>Applying update, please wait a moment...</MudText>
                    <MudProgressLinear Animated Striped />

                    break;
                case UpdateStage.None:
                default:
                    if ((LatestAvailableVersion != null && LatestAvailableVersion.Newer) || Program.InDebugMode)
                    {
                        if (Program.InDebugMode && !LatestAvailableVersion.Newer)
                        {
                            <h4>
                                Downgrade Available (Debug Mode)
                                <MudIcon Display="Display.InlineBlock" Name="IconName.QuestionCircle" OnClick=@(()=>{CopyToClipboard(LatestAvailableVersion.UpdateCommand);}) />

                            </h4>
                        }
                        else
                        {

                            <h4>Update Available</h4>

                        }
                        <MudText>Current Version: @Program.Version</MudText>




                        <MudText>Available Version: @LatestAvailableVersion.Version</MudText>
                        <MudText>Update Branch: @LatestAvailableVersion.Branch</MudText>
                        <MudButton Color=Color.Success OnClick="ApplyUpdate">Apply Update</MudButton>
                        <MudButton Disabled=@(AutoUpdateService.IsUpdatedScheduled) OnClick=TestAutoUpdate Color="Color.Success">Test Auto Update</MudButton>
                        @if (AutoUpdateService.IsUpdatedScheduled)
                        {
                            <MudButton OnClick=@(()=>{AutoUpdateService.Cancel();}) Color="Color.Error">Cancel Auto Update</MudButton>
                        }
                    }
                    else
                    {
                        <MudText>Application is up to date</MudText>

                    }
                    break;

            }
        }
    }
</LoadingIndicator>

@if (Monitor.DatabaseUpdatePending)
{
    <MudText>A database update needs to be applied</MudText>
    <MudButton Color=Color.Primary OnClick="UpdateDB">Update</MudButton>
}
else
{

    <MudText>Database is up to date.</MudText>
}

@code {
    ApplicationUpdate? LatestAvailableVersion { get; set; }

    UpdateStage updateStage = UpdateStage.None;

    FileProgress? DownladProgress { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        GetLatestUpdate();
    }
    async Task GetLatestUpdate()
    {
        LoadingData = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            LatestAvailableVersion = await UpdateService.GetLatestUpdate();
        }
        catch (Exception ex)
        {
            SnackBarService.Error(ex.Message);
        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);
    }
    async Task ApplyUpdate()
    {
        SnackBarService.Info("Update started. Downloading update...");

        updateStage = UpdateStage.Downloading;
        LatestAvailableVersion.DownloadPercentageChanged += UpdateDownloadPercentage;

        if (await LatestAvailableVersion.Download())
        {
            DownladProgress = null;
            LatestAvailableVersion.DownloadPercentageChanged -= UpdateDownloadPercentage;

            //NotificationService.Success("Update downloaded successfully. Preparing for update...");

            //if (await MessageService.Confirm("The update has been downloaded. Would you like to Stage the update?"))
            //{
            updateStage = UpdateStage.Staging;

            await InvokeAsync(StateHasChanged);
            if (await LatestAvailableVersion.Stage())
            {

                /*
                                    if (await MessageService.Confirm(
                                        "The update has been staged. Would you like to backup the current version?",
                                        "Backup?",
                                        options =>
                                        {
                                            options.CancelButtonText = "No";
                                            options.OkButtonText = "Yes";
                                        }
                                    ))
                                    {
                                        updateStage = UpdateStage.BackingUp;

                                        await InvokeAsync(StateHasChanged);
                                        if (!await LatestAvailableVersion.Backup())
                                        {


                                            NotificationService.Error("Backup failed.");
                                            return;

                                        }
                                    }
                */
                if (await MessageService.Confirm("Would you like to apply the update?"))
                {
                    updateStage = UpdateStage.Applying;


                    await InvokeAsync(StateHasChanged);

                    var output = await LatestAvailableVersion.Apply();
                    if (output != null)
                    {
                        SnackBarService.Success("Update started successfully. The web application will restart and update momentarily.");

                    }
                    if (Program.InDebugMode)
                    {
                        await MessageService.Info(output);

                    }



                    updateStage = UpdateStage.Applied;

                }
                updateStage = UpdateStage.None;

                await InvokeAsync(StateHasChanged);
                //}
            }
        }
        else
        {
            SnackBarService.Error("Update failed.");
            updateStage = UpdateStage.None;

        }
        updateStage = UpdateStage.None;

    }
    void TestAutoUpdate()
    {
        if (LatestAvailableVersion != null)
            AutoUpdateService.ScheduleUpdate(DateTime.Now.TimeOfDay + TimeSpan.FromSeconds(30), LatestAvailableVersion);
    }
    async void UpdateDownloadPercentage(FileProgress? progress)
    {

        DownladProgress = progress;
        await InvokeAsync(StateHasChanged);

    }
    protected void UpdateDB()
    {
        Task.Run(async () =>
        {

            await InvokeAsync(StateHasChanged);
            if (await Program.ApplyDatabaseMigrations())
            {
            }

            await InvokeAsync(StateHasChanged);

        });
    }

}