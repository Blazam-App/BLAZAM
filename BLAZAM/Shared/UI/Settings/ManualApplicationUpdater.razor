@inherits AppComponent


<Code>
    Working Directory: @Program.RootDirectory
</Code>
@if (AutoUpdateService.IsUpdatedScheduled)
{
    <Alert>
        <AlertMessage>@SettingsLocalization["Update Scheduled"]</AlertMessage>
        <AlertDescription>
            The application will be updated to version @AutoUpdateService.ScheduledUpdate.Version at @AutoUpdateService.ScheduledUpdateTime
        </AlertDescription>
    </Alert>
}
@if (LoadingData)
{
    <Paragraph>Checking for update..</Paragraph>

}

<LoadingIndicator Height="Height.Is100" Visible=LoadingData>
    @{
        if (LatestAvailableVersion != null)
        {
            var value = updateStage;
            switch (updateStage)
            {
                case UpdateStage.Downloading:
                    <Paragraph>Downloading Update...</Paragraph>
                    <Progress Value="@DownladProgress?.FilePercentage">
                        @(DownladProgress?.CompletedBytes / 1024 / 1024)MB
                    </Progress>
                    <Button Color=Color.Danger Clicked=@(()=>{ LatestAvailableVersion.Cancel(); })>Cancel</Button>
                    break;
                case UpdateStage.Staging:
                    <Paragraph>Staging update, please wait a moment...</Paragraph>
                    <Progress Animated Striped />
                    break;
                case UpdateStage.BackingUp:
                    <Paragraph>Backing up current version, please wait a moment...</Paragraph>
                    <Progress Animated Striped />

                    break;
                case UpdateStage.Applying:
                    <Paragraph>Applying update, please wait a moment...</Paragraph>
                    <Progress Animated Striped />

                    break;
                case UpdateStage.None:
                default:
                    if ((LatestAvailableVersion != null && LatestAvailableVersion.Newer) || Program.InDebugMode)
                    {
                        if (Program.InDebugMode && !LatestAvailableVersion.Newer)
                        {
                            <h4>
                            Downgrade Available (Debug Mode)
                            </h4>
                        }
                        else
                        {

                            <h4>Update Available</h4>

                        }
                        <Paragraph>Current Version: @Program.Version</Paragraph>

                        LatestAvailableVersion.Nav = Nav;
                       <Button Color="Color.Primary" Clicked=@(()=>{CopyToClipboard(LatestAvailableVersion.UpdateCommand);})>Copy Command</Button>
                        
                   
                       
                        <Paragraph>Available Version: @LatestAvailableVersion.Version</Paragraph>
                        <Button Color=Color.Success Clicked="ApplyUpdate">Apply Update</Button>
                    }
                    else
                    {
                        <Paragraph>Application is up to date</Paragraph>

                    }
                    break;

            }
        }
    }
</LoadingIndicator>

@if (Monitor.DatabaseUpdatePending)
{
    <Paragraph>A database update needs to be applied</Paragraph>
    <Button Color=Color.Primary Clicked="UpdateDB">Update</Button>
}
else
{

    <Paragraph>Database is up to date.</Paragraph>
}

@code {
    ApplicationUpdate LatestAvailableVersion { get; set; }

    UpdateStage updateStage = UpdateStage.None;

    FileProgress? DownladProgress { get; set; } = null;
    bool updateChecked = false;

  
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LatestAvailableVersion = await UpdateService.GetLatestUpdate();
        updateChecked = true;
        LoadingData = false;
        InvokeAsync(StateHasChanged);
    }
    async Task ApplyUpdate()
    {
        NotificationService.Info("Update started. Downloading update...");

        updateStage = UpdateStage.Downloading;
        LatestAvailableVersion.DownloadPercentageChanged += UpdateDownloadPercentage;

        if ( await LatestAvailableVersion.Download())
        {
            DownladProgress = null;
            LatestAvailableVersion.DownloadPercentageChanged -= UpdateDownloadPercentage;

            NotificationService.Success("Update downloaded successfully. Preparing for update...");

            if (await MessageService.Confirm("The update has been downloaded. Would you like to Stage the update?"))
            {
                updateStage = UpdateStage.Staging;

                InvokeAsync(StateHasChanged);
                if (await LatestAvailableVersion.Stage())
                {


                    if (await MessageService.Confirm(
                        "The update has been staged. Would you like to backup the current version?",
                        "Backup?",
                        options =>
                        {
                            options.CancelButtonText = "No";
                            options.OkButtonText = "Yes";
                        }
                    ))
                    {
                        updateStage = UpdateStage.BackingUp;

                        InvokeAsync(StateHasChanged);
                        if (!await LatestAvailableVersion.Backup())
                        {


                            NotificationService.Error("Backup failed.");
                            return;

                        }
                    }
                    if (await MessageService.Confirm("Would you like to apply the update?"))
                    {
                        updateStage = UpdateStage.Applying;


                        InvokeAsync(StateHasChanged);

                        var output = await LatestAvailableVersion.Apply();
                        if (output != null)
                        {
                            NotificationService.Success("Update started successfully. The web application will restart and update momentarily.");

                        }
                        if (Program.InDebugMode)
                        {
                            MessageService.Info(output);

                        }



                        updateStage = UpdateStage.Applied;

                    }
                    updateStage = UpdateStage.None;

                    InvokeAsync(StateHasChanged);
                }
            }
        }
        else
        {
            NotificationService.Error("Update failed.");
            updateStage = UpdateStage.None;

        }
        updateStage = UpdateStage.None;

    }
    async void UpdateDownloadPercentage(FileProgress progress)
    {

        DownladProgress = progress;
        InvokeAsync(StateHasChanged);

    }
    protected void UpdateDB()
    {
        Task.Run(async () =>
        {

            await InvokeAsync(StateHasChanged);
            if (Program.ApplyDatabaseMigrations())
            {
            }

            await InvokeAsync(StateHasChanged);

        });
    }

}