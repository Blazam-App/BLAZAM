@inherits SettingsComponents


<LoadingIndicator Height="Height.Is100" Visible=LoadingData>
    <MudText Typo="Typo.h4">@SettingsLocalization["Update Settings"]</MudText>
    <MudForm @onsubmit="Save">

        <Validations Mode="ValidationMode.Auto" Model="@settings" StatusChanged="OnValidation">

            @if (settings != null)
            {

                <SettingsField>

                    <MudSelect Label="@SettingsLocalization["Update Branch"]" @bind-Value=@settings.UpdateBranch>
                        @foreach (var val in updateBranches)
                        {
                            <MudSelectItem Value="@val">@val</MudSelectItem>
                        }
                    </MudSelect>



                </SettingsField>


                <SettingsField>

                    <MudText>
                        @SettingsLocalization["Update"]
                    </MudText>


                    <ManualApplicationUpdater />


                </SettingsField>


                <SettingsField>

                    <MudSwitch Label="@SettingsLocalization["Allow Auto Update"]" @bind-Checked=@(settings.AutoUpdate) />

                </SettingsField>


                @if (settings?.AutoUpdate == true)
                {
                    <SettingsField>

                        <MudTimePicker HelperText="The time of each day to automatically apply an update."
                               Label="@SettingsLocalization["Auto Update Time"]"
                               @bind-Time="@settings.AutoUpdateTime" />


                    </SettingsField>


                }


                <SettingsField>

                    <MudButton Disabled="saveDisabled" ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

                </SettingsField>
            }
        </Validations>
    </MudForm>
</LoadingIndicator>
@code {
    AppSettings? settings = new AppSettings();
    List<string> updateBranches = new() { ApplicationReleaseBranches.Stable, ApplicationReleaseBranches.Nightly, ApplicationReleaseBranches.Dev };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Context != null)
        {
            originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();
            settings = await Context.AppSettings.FirstOrDefaultAsync();

        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }




}

