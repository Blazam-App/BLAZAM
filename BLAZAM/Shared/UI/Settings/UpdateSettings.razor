@inherits SettingsComponents


<LoadingIndicator Height="Height.Is100" Visible=LoadingData>
    <Heading>@SettingsLocalization["Update Settings"]</Heading>
    <Form @onsubmit="Save">

        <Validations Mode="ValidationMode.Auto" Model="@settings" StatusChanged="OnValidation">

            @if (settings != null)
            {

                <SettingsField>
                    <FieldLabel>@SettingsLocalization["Update Branch"]</FieldLabel>
                    <FieldBody>
                        <SelectList Data="@updateBranches"
                                TValue="string"
                                TItem="string"
                                TextField="item=>item"
                                ValueField="item=>item"
                                @bind-SelectedValue=@settings.UpdateBranch />
                    </FieldBody>

                </SettingsField>


                <SettingsField>

                    <FieldLabel>
                        @SettingsLocalization["Update"]
                    </FieldLabel>
                    <FieldBody>

                        <ManualApplicationUpdater />

                    </FieldBody>
                </SettingsField>


                <SettingsField>
                    <FieldLabel>@SettingsLocalization["Allow Auto Update"]</FieldLabel>
                    <FieldBody>
                        <Switch TValue="bool" @bind-Checked=@(settings.AutoUpdate) />
                    </FieldBody>
                </SettingsField>


                @if (settings?.AutoUpdate == true)
                {
                    <SettingsField>
                        <FieldLabel>@SettingsLocalization["Auto Update Time"]</FieldLabel>
                        <FieldHelp>The time of each day to automatically apply an update.</FieldHelp>
                        <FieldBody>
                            <TimePicker TValue="TimeSpan" @bind-Time="@settings.AutoUpdateTime">

                            </TimePicker>
                        </FieldBody>
                    </SettingsField>


                }


                <SettingsField>
                    <FieldBody>
                        <Button Disabled="saveDisabled" Type="ButtonType.Submit" Color="Color.Success">Save Changes</Button>
                    </FieldBody>
                </SettingsField>
            }
        </Validations>
    </Form>
</LoadingIndicator>
@code {
    AppSettings? settings = new AppSettings();
    List<string> updateBranches = new() { ApplicationReleaseBranches.Stable, ApplicationReleaseBranches.Nightly, ApplicationReleaseBranches.Dev };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Context != null)
        {
            originalSettings = await Context.AppSettings.AsNoTracking().FirstOrDefaultAsync();
            settings = await Context.AppSettings.FirstOrDefaultAsync();

        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }


    private async void UploadIcon(FileUploadEventArgs e)
    {
        if (Context == null) throw new ApplicationException("Unable to retrieve database settings table: AppSettings");
        if (settings == null) throw new ApplicationException("App Settings is null");
        //TODO Try and capture the moment the file upload starts
        using (var stream = e.File.OpenReadStream(5000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                settings.AppIcon = memoryStream.ToArray();
            }
        }
        AuditLogger.System.SettingsChanged("Application", settings.GetChanges(originalSettings));
        await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);


    }



}

