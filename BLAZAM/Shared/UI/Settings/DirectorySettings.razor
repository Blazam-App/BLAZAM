@inject AppDatabaseFactory DbFactory
@inherits SettingsComponents


<LoadingIndicator Height="Height.Is100" Visible=LoadingData>

    <MudText Typo="Typo.h1">@SettingsLocalization["Active Directory Settings"]</MudText>

    <MudForm @onsubmit="Save">

        <SettingsField>


            @if (Program.InDemoMode && UserStateService.CurrentUsername != "admin")
            {

                <MudTextField HelperText="Can be your domain name in most environments" Label="@SettingsLocalization["Server"]" Value=@("Private") Disabled />
            }
            else
            {

                <MudTextField HelperText="Can be your domain name in most environments" Label="@SettingsLocalization["Server"]" @bind-Value="@settings.ServerAddress">



                </MudTextField>

            }

        </SettingsField>
        <SettingsField>

            @{
                string helperText = "The default port of 389 is the recommended port to use.";
            }

            @*
            TODO Add this as a popover
            <MudTooltip Display="Display.InlineBlock" Multiline Style="max-width:300px" Text="The application will automatically use an SSL
            connection if the server's CA Certificate is a trusted CA on this web server. Using port 636 can work,
            but may lead to unexpected behaviour of other services that listen to Active Directory changes.">
            <Icon Name="IconName.QuestionCircle" TextColor="Color.Info" />
            </MudTooltip>*@

            @if (Program.InDemoMode && UserStateService.CurrentUsername != "admin")
            {
                <MudNumericField HelperText="@helperText" Label="@SettingsLocalization["Port"]" HideSpinButtons="true" Value="0" Disabled />


            }
            else
            {

                <MudNumericField HelperText="@helperText" Label="@SettingsLocalization["Port"]" HideSpinButtons="true" @bind-Value="@settings.ServerPort" />




            }





        </SettingsField>



        <SettingsField>

            <MudTextField Label="@SettingsLocalization["Username"]" name="username" @bind-Value="@settings.Username">



            </MudTextField>

        </SettingsField>



        <SettingsField>

            <MudTextField Label="@SettingsLocalization["Password"]" name="password" InputType="InputType.Password" @bind-Value="@settings.Password">



            </MudTextField>

        </SettingsField>



        <SettingsField>

            <MudSwitch Label="@SettingsLocalization["UseTLS"]" TValue="bool" @bind-Checked="@settings.UseTLS" />

        </SettingsField>



        <SettingsField>

            <MudTextField Label="@SettingsLocalization["FQDN"]" name="fqdn" @bind-Value="@settings.FQDN" />

        </SettingsField>



        <SettingsField>

            <MudTextField Label="@SettingsLocalization["BaseDN"]" name="baseDN" @bind-Value="@settings.ApplicationBaseDN" />

        </SettingsField>


        <SettingsField>

            <MudButton Disabled="saveDisabled" ButtonType="ButtonType.Submit" Color="Color.Success">Save Changes</MudButton>

        </SettingsField>
    </MudForm>
</LoadingIndicator>
@code {

#nullable disable warnings
    ADSettings settings = new ADSettings();
    bool _insert;

    string passwordInDb;

    protected override async Task OnInitializedAsync()
    {
        originalSettings = await Context.ActiveDirectorySettings.AsNoTracking().FirstOrDefaultAsync();

        var set = await Context.ActiveDirectorySettings.FirstOrDefaultAsync();
        if (set != null)
        {
            settings = set;
            passwordInDb = settings?.Password;

        }
        else
        {
            settings.Id = 1;
            _insert = true;
        }
        LoadingData = false;
        await InvokeAsync(StateHasChanged);

    }
    protected override async void Save()
    {
        //if (await Validation.ValidateAll())
        //{
        if (!settings.Password.Equals(passwordInDb))
        {
            settings.Password = EncryptionService.EncryptObject(settings.Password);
            passwordInDb = settings.Password;
        }
        if (_insert)
        {
            Context.ActiveDirectorySettings.Add(settings);
            _insert = false;
        }
        AuditLogger.System.SettingsChanged("Active Directory", settings.GetChanges(originalSettings));
        base.Save();
        //}

    }

}




