@inherits AppComponentBase
@inject IHttpContextAccessor ca

<MudPaper  Class="mud-theme-dark py-3" Width="250px" Elevation="0" >
    <MudNavMenu Color="Color.Success" Bordered="true">


        <MudText Typo="Typo.h6">Dev Tools</MudText>

        <MudButton Color="Color.Primary" style="height:35px;" OnClick="@(()=>
            {SnackBarService.Success("Test Notification " + Guid.NewGuid(),"Test");
            })">Test Notification</MudButton>
        <MudButton Color="Color.Primary" style="height:35px;" OnClick="@(()=>{SnackbarBroadcastService.Success("Test Broadcast " + Guid.NewGuid(),"Test");})">Test Broadcast</MudButton>

        <MudCard Class="mud-theme-dark">
            <MudCardHeader>
                Conn Monitor
            </MudCardHeader>
            <Row>Database Status: @Enum.GetName(typeof(ServiceConnectionState),Monitor.DatabaseConnected)</Row>
            <Row>ActiveDirectory Status: @Enum.GetName(typeof(ServiceConnectionState),Monitor.DirectoryConnected)</Row>
            <Row>App Ready Status: @Enum.GetName(typeof(ServiceConnectionState),Monitor.AppReady)</Row>
            <Row>Error Message: @Oops.ErrorMessage</Row>
        </MudCard>
        <MudCard Class="mud-theme-dark">
            <MudCardHeader>
                User State Service
            </MudCardHeader>
            <Row>User States: @UserStateService.UserStates.Count</Row>
            @foreach (var state in UserStateService.UserStates)
            {
                <MudCard Class="mud-theme-dark">
                    <Row>Username: @state.User?.Identity?.Name</Row>
                    <Row>Authenticated: @state.User?.Identity?.IsAuthenticated</Row>
                    <Row>Auth Type: @state.User?.Identity?.AuthenticationType</Row>
                    <Row>Last Access: @state.LastAccessed</Row>
                    <Row>Ticket Expiration: @(state.Ticket?.Properties.ExpiresUtc)</Row>
                        <Row>Is Super Admin: @state.IsSuperAdmin</Row>
                        <Row>Directory Entry Exists: @(state.DirectoryUser != null)</Row>
                        @if (state.DirectoryUser != null)
                    {
                        <Row>Has User Priv: @state.DirectoryUser.HasUserPrivilege</Row>
                        <Row>Has Group Priv: @state.DirectoryUser.HasGroupPrivilege</Row>
                        <Row>Has OU Priv: @state.DirectoryUser.HasOUPrivilege</Row>
                        <Row>Has Computer Priv: @state.DirectoryUser.HasComputerPrivilege</Row>

                    }
                </MudCard>


            }
        </MudCard>


        <MudCard Class="mud-theme-dark">
            <MudCardHeader>
                User
            </MudCardHeader>
            @{
                var ids = ca.HttpContext?.User.Identities.ToList();
            }
            @if (ids != null)
            {
                @foreach (var id in ids)
                {

                    var claims2 = @ca.HttpContext?.User.Claims.ToList();

                    <Row>Name: @id.Name</Row>
                    <Row>Authenticated: @id.IsAuthenticated.ToString()</Row>
                    <Row>Type: @id.AuthenticationType</Row>
                    @if (claims2 != null)
                    {
                        @foreach (var claim in claims2)
                        {
                            <Row>@claim.Type: @claim.Value</Row>

                        }
                    }
                }
            }
        </MudCard>



        <MudCard Class="mud-theme-dark">
            <MudCardHeader>
                Active Directory
            </MudCardHeader>
            <Row>
                <Row>ActiveDirectory Status: @DirectoryStatus</Row>
                <Row>ActiveDirectory Server: @Directory.ConnectionSettings?.ServerAddress</Row>

                <Row>ActiveDirectory Server Port: @Directory.ConnectionSettings?.ServerPort</Row>
                <Row>ActiveDirectory Server Port Open: @DirectoryPortOpen</Row>

            </Row>
        </MudCard>

    </MudNavMenu>
</MudPaper>

@code {
    string DirectoryStatus = "";
    bool DirectoryPortOpen;
    bool collapseVisible = false;
    Timer t;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        t = new Timer((obj) =>
        {
            DirectoryPortOpen = Directory.PortOpen;
            DirectoryStatus = Enum.GetName(typeof(DirectoryConnectionStatus), Directory.Status);
            InvokeAsync(StateHasChanged);
        }, null, 500, 2000);
    }
    [Parameter]
    public bool DrawerOpen { get; set; }
    [Parameter]
    public string Style { get; set; }
}