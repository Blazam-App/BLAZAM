@inherits AppComponentBase
@inject IHttpContextAccessor ca
<Accordion Border=Border.Is0.RoundedZero>
    <Collapse Border=Border.Is0.RoundedZero Visible="@collapseVisible">
        <CollapseHeader Border=Border.Is0.RoundedZero>
            <Button Border=Border.Is0.RoundedZero Background="Background.Dark" TextColor="TextColor.Light" style="height:15px;" Clicked="@(()=>collapseVisible = !collapseVisible)">Dev Tools</Button>

        </CollapseHeader>
        <CollapseBody>
            <Row>
                <Button Border=Border.Is0.RoundedZero Background="Background.Dark" TextColor="TextColor.Light" style="height:35px;" Clicked="@(()=>{NotificationService.Success("Test Notification " + Guid.NewGuid(),"Test");})">Test Notification</Button>
                <Button Border=Border.Is0.RoundedZero Background="Background.Dark" TextColor="TextColor.Light" style="height:35px;" Clicked="@(()=>{NotificationBroadcast.Success("Test Broadcast " + Guid.NewGuid(),"Test");})">Test Broadcast</Button>

                <Card ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnDesktop">
                    <CardHeader>
                        Conn Monitor
                    </CardHeader>
                    <CardBody>
                        <Row>Database Status: @Enum.GetName(typeof(ConnectionState),Monitor.DatabaseConnected)</Row>
                        <Row>ActiveDirectory Status: @Enum.GetName(typeof(ConnectionState),Monitor.DirectoryConnected)</Row>
                        <Row>App Ready Status: @Enum.GetName(typeof(ConnectionState),Monitor.AppReady)</Row>
                        <Row>Error Message: @Oops.ErrorMessage</Row>
                    </CardBody>
                </Card>
                <Card ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnDesktop">
                    <CardHeader>
                        User State Service
                    </CardHeader>
                    <CardBody>
                        <Row>User States: @UserStateService.UserStates.Count</Row>
                        @foreach (var state in UserStateService.UserStates)
                        {
                            <Card>
                                <Row>Username: @state.User?.Identity?.Name</Row>
                                <Row>Authenticated: @state.User?.Identity?.IsAuthenticated</Row>
                                <Row>Auth Type: @state.User?.Identity?.AuthenticationType</Row>
                                <Row>Last Access: @state.LastAccessed</Row>
                                <Row>Is Super Admin: @state.IsSuperAdmin</Row>
                                <Row>Directory Entry Exists: @(state.DirectoryUser != null)</Row>
                                    @if (state.DirectoryUser != null)
                                {
                                    <Row>Has User Priv: @state.DirectoryUser.HasUserPrivilege</Row>
                                    <Row>Has Group Priv: @state.DirectoryUser.HasGroupPrivilege</Row>
                                    <Row>Has OU Priv: @state.DirectoryUser.HasOUPrivilege</Row>
                                    <Row>Has Computer Priv: @state.DirectoryUser.HasComputerPrivilege</Row>

                                }
                            </Card>


                        }
                    </CardBody>
                </Card>


                <Card ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnDesktop">
                    <CardHeader>
                        User
                    </CardHeader>
                    <CardBody>
                        @{
                            var ids = ca.HttpContext?.User.Identities.ToList();
                        }
                        @if (ids != null)
                        {
                            @foreach (var id in ids)
                            {

                                var claims2 = @ca.HttpContext?.User.Claims.ToList();

                                <Row>Name: @id.Name</Row>
                                <Row>Authenticated: @id.IsAuthenticated.ToString()</Row>
                                <Row>Type: @id.AuthenticationType</Row>
                                @if (claims2 != null)
                                {
                                    @foreach (var claim in claims2)
                                    {
                                        <Row>@claim.Type: @claim.Value</Row>

                                    }
                                }
                            }
                        }
                    </CardBody>
                </Card>



                <Card ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnDesktop">
                    <CardHeader>
                        Active Directory
                    </CardHeader>
                    <CardBody>
                        <Row>
                            <Row>ActiveDirectory Status: @DirectoryStatus</Row>
                            <Row>ActiveDirectory Server: @Directory.ConnectionSettings?.ServerAddress</Row>
                            <Row>ActiveDirectory Server Pingable: @DirectoryPingable</Row>

                            <Row>ActiveDirectory Server Port: @Directory.ConnectionSettings?.ServerPort</Row>
                            <Row>ActiveDirectory Server Port Open: @DirectoryPortOpen</Row>

                        </Row>
                    </CardBody>
                </Card>

            </Row>
        </CollapseBody>
    </Collapse>

</Accordion>


@code {
    string DirectoryStatus = "";
    bool DirectoryPingable;
    bool DirectoryPortOpen;
    bool collapseVisible = false;
    Timer t;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        t = new Timer((obj) =>
        {
            DirectoryPingable = Directory.Pingable;
            DirectoryPortOpen = Directory.PortOpen;
            DirectoryStatus = Enum.GetName(typeof(DirectoryConnectionStatus), Directory.Status);
            InvokeAsync(StateHasChanged);
        }, null, 500, 2000);
    }

}