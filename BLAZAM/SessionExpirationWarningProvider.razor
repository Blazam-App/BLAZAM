@inject IMessageService MessageService
@inject IApplicationUserStateService UserStateService
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime


@code{
    private Timer _t;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _t = new Timer(CheckExpiration, null, 30000, 30000);
    }
    private async void CheckExpiration(object? obj)
    {
        if(UserStateService.CurrentUserState?.Ticket?.Properties.ExpiresUtc-DateTime.UtcNow < TimeSpan.FromMinutes(2))
        {
            if(await MessageService.Confirm("Your session is about to expire !", "Warning", options =>
            {
                options.CancelButtonClass = "d-none";
                options.ConfirmButtonText = "Refresh Session";
                options.ShowCloseButton = false;
                options.ShowMessageIcon = false;
            }))
            {
                JSRuntime.InvokeVoidAsync("updateCookieExpiration");

            }
        }
    }
}
